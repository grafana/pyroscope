{
  "sample_types": [
    {
      "type": "cpu",
      "unit": "nanoseconds"
    }
  ],
  "samples": [
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13d",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x65",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xec95b",
          "lines": [
            "__GI___clock_gettime[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13205",
          "lines": [
            "os::javaTimeNanos()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x69",
          "lines": [
            "void kotlinx.coroutines.DispatchedTaskKt.dispatch(kotlinx.coroutines.DispatchedTask, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x82",
          "lines": [
            "boolean kotlinx.coroutines.CancellableContinuationImpl.cancel(java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void kotlinx.coroutines.CancellableContinuationImpl.parentCancelled$kotlinx_coroutines_core(java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void kotlinx.coroutines.ChildContinuation.invoke(java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x47",
          "lines": [
            "void kotlinx.coroutines.JobSupport.notifyCancelling(kotlinx.coroutines.NodeList, java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x63",
          "lines": [
            "boolean kotlinx.coroutines.JobSupport.tryMakeCancelling(kotlinx.coroutines.Incomplete, java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x112",
          "lines": [
            "java.lang.Object kotlinx.coroutines.JobSupport.makeCancelling(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "boolean kotlinx.coroutines.JobSupport.cancelImpl$kotlinx_coroutines_core(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.JobSupport.cancelInternal(java.lang.Throwable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void kotlinx.coroutines.JobSupport.cancel(java.util.concurrent.CancellationException)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7e",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3$1.emit(java.lang.Object, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x181",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.SharedFlowImpl.collect$suspendImpl(kotlinx.coroutines.flow.SharedFlowImpl, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.SharedFlowImpl$collect$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x56",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void io.grpc.internal.ClientCallImpl.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void io.grpc.PartialForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void io.grpc.ForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void io.grpc.ForwardingClientCall$SimpleForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void io.grpc.PartialForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void io.grpc.ForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void io.grpc.ForwardingClientCall$SimpleForwardingClientCall.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17f",
          "lines": [
            "java.lang.Object io.grpc.kotlin.ClientCalls$rpcImpl$1$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x61",
          "lines": [
            "kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findAnyTask(boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.findTask(boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x63",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x62",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "100000000"
    },
    {
      "locations": [
        {
          "address": "0x98d61",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.park()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x63",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.tryPark()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x62",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4eb64a",
          "lines": [
            "cp_new_stat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4ec2c5",
          "lines": [
            "__do_sys_newfstat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4ec2f4",
          "lines": [
            "__x64_sys_newfstat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x733b",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12a166",
          "lines": [
            "___fxstat64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x16ee5",
          "lines": [
            "handleAvailable[]@:0"
          ],
          "mapping": "0xd000-0x1b000@0xd000 libjava.so(5eb07e5f00b86523ac6778ee76204ff3081fd7d8)"
        },
        {
          "address": "0xf2ca",
          "lines": [
            "Java_java_io_FileInputStream_available0[]@:0"
          ],
          "mapping": "0xd000-0x1b000@0xd000 libjava.so(5eb07e5f00b86523ac6778ee76204ff3081fd7d8)"
        },
        {
          "address": "0x0",
          "lines": [
            "int java.io.FileInputStream.available0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.FileInputStream.available()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x64",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x36",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.FilterInputStream.read(byte[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x35",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.SafeFlow.collectSafely(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x81",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.AbstractFlow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.FlowKt__EmittersKt$onCompletion$$inlined$unsafeFlow$1.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3a",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void kotlinx.coroutines.internal.SoftLimitedDispatcher$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.scheduling.TaskImpl.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "kotlin.coroutines.CoroutineContext$Element kotlin.coroutines.CombinedContext.get(kotlin.coroutines.CoroutineContext$Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void kotlinx.coroutines.JobKt__JobKt.ensureActive(kotlin.coroutines.CoroutineContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.JobKt.ensureActive(kotlin.coroutines.CoroutineContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.SafeCollector.emit(kotlin.coroutines.Continuation, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.SafeCollector.emit(java.lang.Object, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.SafeFlow.collectSafely(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x81",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.AbstractFlow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.FlowKt__EmittersKt$onCompletion$$inlined$unsafeFlow$1.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3a",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void kotlinx.coroutines.internal.SoftLimitedDispatcher$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.scheduling.TaskImpl.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4f1466",
          "lines": [
            "pipe_read[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e3456",
          "lines": [
            "vfs_read[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e42d8",
          "lines": [
            "ksys_read[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e4338",
          "lines": [
            "__x64_sys_read[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6f99",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11ba99",
          "lines": [
            "__GI___libc_read[]@:0",
            "__GI___libc_read[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x16e37",
          "lines": [
            "handleRead[]@:0"
          ],
          "mapping": "0xd000-0x1b000@0xd000 libjava.so(5eb07e5f00b86523ac6778ee76204ff3081fd7d8)"
        },
        {
          "address": "0x165b0",
          "lines": [
            "readBytes[]@:0"
          ],
          "mapping": "0xd000-0x1b000@0xd000 libjava.so(5eb07e5f00b86523ac6778ee76204ff3081fd7d8)"
        },
        {
          "address": "0x0",
          "lines": [
            "int java.io.FileInputStream.readBytes(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "int java.io.FileInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x36",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.FilterInputStream.read(byte[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x35",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.daemon.ProcessManager$readStream$1.invoke(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.SafeFlow.collectSafely(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x81",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.AbstractFlow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.FlowKt__EmittersKt$onCompletion$$inlined$unsafeFlow$1.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.flowCollect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo$suspendImpl(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectTo(kotlinx.coroutines.channels.ProducerScope, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3a",
          "lines": [
            "java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlow$collectToFun$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void kotlinx.coroutines.internal.SoftLimitedDispatcher$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.scheduling.TaskImpl.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(kotlinx.coroutines.scheduling.Task)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "boolean java.util.regex.Pattern.lambda$negate$7(java.util.regex.Pattern$CharPredicate, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "boolean java.util.regex.Pattern$$Lambda+\u003chidden\u003e.is(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x32",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "int com.intellij.openapi.util.text.StringUtil.indexOf(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x50",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.gradle.execution.GradleConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$Slice.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x2d",
          "lines": [
            "int java.lang.Character.codePointAt(java.lang.CharSequence, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x78",
          "lines": [
            "boolean java.util.regex.Pattern$Caret.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void com.intellij.openapi.util.text.StringUtil$BombedCharSequence.check()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "char java.lang.String.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "com.jetbrains.python.traceBackParsers.LinkInTrace com.jetbrains.python.testing.pytest.PyTestTracebackParser.findLinkInTrace(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.jetbrains.python.run.PythonTracebackFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$Start.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "boolean java.util.regex.Matcher.find(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "kotlin.text.MatchResult kotlin.text.RegexKt.findNext(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "kotlin.text.MatchResult kotlin.text.RegexKt.access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "kotlin.text.MatchResult kotlin.text.Regex.find(java.lang.CharSequence, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "kotlin.text.MatchResult kotlin.text.Regex.find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.kotlin.idea.run.KotlinConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "com.jetbrains.python.traceBackParsers.LinkInTrace com.jetbrains.python.traceBackParsers.TraceBackParserAdapter.findLinkInTrace(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.jetbrains.python.run.PythonTracebackFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "com.jetbrains.python.traceBackParsers.LinkInTrace com.jetbrains.python.traceBackParsers.TraceBackParserAdapter.findLinkInTrace(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.jetbrains.python.run.PythonTracebackFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$Slice.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "com.jetbrains.python.traceBackParsers.LinkInTrace com.jetbrains.python.traceBackParsers.TraceBackParserAdapter.findLinkInTrace(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.jetbrains.python.run.PythonTracebackFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x5cbe22b612c526e6",
          "lines": [
            "StubRoutines (final stubs)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.ExceptionExFilterFactory$MyFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x80",
          "lines": [
            "boolean com.intellij.openapi.util.text.Strings.startsWith(java.lang.CharSequence, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x26",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "int com.intellij.openapi.util.text.Strings.indexOf(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "int com.intellij.openapi.util.text.StringUtil.indexOf(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x50",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.gradle.execution.GradleConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5b",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "char java.lang.String.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x33",
          "lines": [
            "boolean java.util.regex.Pattern$Caret.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5b",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5b",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71",
          "lines": [
            "boolean java.util.regex.Pattern$CharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x5",
          "lines": [
            "int java.lang.Character.codePointBefore(java.lang.CharSequence, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x86",
          "lines": [
            "boolean java.util.regex.Pattern$CharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.kotlin.idea.debugger.core.KotlinExceptionFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$$Lambda+\u003chidden\u003e.is(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "boolean java.util.regex.Pattern.lambda$union$3(java.util.regex.Pattern$CharPredicate, java.util.regex.Pattern$CharPredicate, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "boolean java.util.regex.Pattern$$Lambda+\u003chidden\u003e.is(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "boolean java.util.regex.Pattern$CharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$CharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "boolean java.util.regex.Pattern$Begin.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x36",
          "lines": [
            "com.intellij.openapi.util.Pair com.intellij.execution.filters.PatternBasedFileHyperlinkRawDataFinder.findMatcher(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "java.util.List com.intellij.execution.filters.PatternBasedFileHyperlinkRawDataFinder.find(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.util.List com.intellij.execution.filters.PatternBasedFileHyperlinkFilter.parse(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.AbstractFileHyperlinkFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "com.jetbrains.python.traceBackParsers.LinkInTrace com.jetbrains.python.traceBackParsers.TraceBackParserAdapter.findLinkInTrace(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.jetbrains.python.run.PythonTracebackFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb03",
          "lines": [
            "linux-vdso.1.so 0xb03[]@:0"
          ],
          "mapping": "0x0-0x2000@0x0 linux-vdso.1.so()"
        },
        {
          "address": "0xec96c",
          "lines": [
            "__GI___clock_gettime[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13182",
          "lines": [
            "os::javaTimeMillis()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "boolean java.util.regex.Pattern$BmpCharProperty.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean java.util.regex.Pattern$CharPropertyGreedy.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "boolean java.util.regex.Pattern$GroupTail.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.regex.Pattern$BranchConn.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "boolean java.util.regex.Pattern$Begin.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "boolean java.util.regex.Pattern$Branch.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean java.util.regex.Pattern$GroupHead.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.goide.execution.GoConsoleFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "boolean com.intellij.openapi.progress.impl.CoreProgressManager.sleepIfNeededToGivePriorityToAnotherThread()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "boolean com.intellij.openapi.progress.impl.ProgressManagerImpl.runCheckCanceledHooks(com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x53",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.doCheckCanceled()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.checkCanceled()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void java.util.regex.Matcher.\u003cinit\u003e(java.util.regex.Pattern, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x26",
          "lines": [
            "java.util.regex.Matcher java.util.regex.Pattern.matcher(java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean kotlin.text.Regex.matches(java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.flyway.db.HibernateValidationFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "char java.lang.String.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5b",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.doCheckCanceled()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.checkCanceled()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "char com.intellij.openapi.util.text.StringUtil$BombedCharSequence.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5b",
          "lines": [
            "boolean java.util.regex.Pattern$StartS.match(java.util.regex.Matcher, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x79",
          "lines": [
            "boolean java.util.regex.Matcher.search(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "boolean java.util.regex.Matcher.find()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.RegexpFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "com.intellij.execution.filters.Filter$Result org.jetbrains.plugins.groovy.execution.filters.GrCompilationErrorsFilterProvider$getDefaultFilters$1.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5a",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.filters.CompositeFilter.applyFilter(java.lang.String, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "com.intellij.execution.filters.Filter$Result com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeLine(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "com.intellij.execution.impl.AsyncFilterRunner$FilterResult com.intellij.execution.impl.AsyncFilterRunner$HighlighterJob.analyzeNextLine()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner.runTasks()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.AsyncFilterRunner$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.RunnableCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor.callWrapped(java.util.concurrent.Callable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.NonBlockingReadActionImpl$OTelMonitor$MonitoredComputation.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.insideReadAction(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$attemptComputation$4(com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.Ref)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "boolean com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "boolean com.intellij.openapi.application.impl.ApplicationImpl.tryRunReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runInReadActionWithWriteActionPriority$0(java.util.concurrent.atomic.AtomicBoolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtilService.runActionAndCancelBeforeWrite(java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runActionAndCancelBeforeWrite(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.lambda$runWithWriteActionPriority$1(com.intellij.openapi.application.ex.ApplicationEx, java.lang.Runnable, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.util.ProgressIndicatorUtils$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager.lambda$runProcess$0(com.intellij.openapi.util.Ref, com.intellij.openapi.util.Computable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.ProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(com.intellij.openapi.progress.ProgressIndicator, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.lambda$executeProcessUnderProgress$13(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd8",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(com.intellij.openapi.progress.ProgressIndicator, java.lang.Thread, com.intellij.openapi.progress.ProgressIndicator, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computeUnderProgress(com.intellij.openapi.util.ThrowableComputable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.ProgressManager.runProcess(com.intellij.openapi.util.Computable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.progress.util.ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(java.lang.Runnable, com.intellij.openapi.progress.ProgressIndicator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "boolean com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.attemptComputation()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$1()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission.lambda$transferToBgThread$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.NonBlockingReadActionImpl$Submission$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.doRun(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor.access$200(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.executeFirstTaskAndHelpQueue()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.concurrency.BoundedTaskExecutor$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1c1be02",
          "lines": [
            "os/signal.(*signalCtx).Done[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb367",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x51a9d8",
          "lines": [
            "fmt.(*pp).doPrintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fd2",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b96f",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1223234",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x487616",
          "lines": [
            "runtime.madvise[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x41f575",
          "lines": [
            "runtime.sysUnusedOS[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42ca68",
          "lines": [
            "runtime.sysUnused[]@:0",
            "runtime.(*pageAlloc).scavengeOne[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42c62e",
          "lines": [
            "runtime.(*pageAlloc).scavenge.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3bdb",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b998",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42995c",
          "lines": [
            "runtime.(*mspan).base[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b956",
          "lines": [
            "runtime.spanOf[]@:0",
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42995c",
          "lines": [
            "runtime.(*mspan).base[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425409",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x45d473",
          "lines": [
            "__kmalloc[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5075a1",
          "lines": [
            "__d_alloc[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5076a9",
          "lines": [
            "d_alloc[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x50a9e9",
          "lines": [
            "d_alloc_parallel[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4f55c4",
          "lines": [
            "lookup_open.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fba6f",
          "lines": [
            "open_last_lookups[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fbc88",
          "lines": [
            "path_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fc9de",
          "lines": [
            "do_filp_open[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4defb2",
          "lines": [
            "do_sys_openat2[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4df474",
          "lines": [
            "__x64_sys_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7377",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de209",
          "lines": [
            "syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4db18f",
          "lines": [
            "syscall.openat[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50956a",
          "lines": [
            "syscall.Open[]@:0",
            "os.open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50a151",
          "lines": [
            "os.openFileNolog.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x509f6d",
          "lines": [
            "os.ignoringEINTR[]@:0",
            "os.openFileNolog[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x5084fd",
          "lines": [
            "os.OpenFile[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6c9864",
          "lines": [
            "os.Open[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.Open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4169b",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.(*systemProcess).OpenELF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d24ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.(*Reference).GetELF[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42b1c3",
          "lines": [
            "internal/runtime/atomic.(*Uint64).Add[]@:0",
            "runtime.(*gcControllerState).update[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x41e38a",
          "lines": [
            "runtime.(*mcache).refill[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x417fc4",
          "lines": [
            "runtime.(*mcache).nextFree[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x477d2c",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4801d6",
          "lines": [
            "runtime.slicebytetostring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fe5",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x43ebbe",
          "lines": [
            "runtime.wbBufFlush1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x474d9d",
          "lines": [
            "runtime.wbBufFlush.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47f74c",
          "lines": [
            "runtime.growslice[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5a05",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf.(*Trace).AppendFrameFull[]@:0",
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x429907",
          "lines": [
            "runtime.addb[]@:0",
            "runtime.(*gcBits).bytep[]@:0",
            "runtime.(*gcBits).bitp[]@:0",
            "runtime.(*mspan).markBitsForIndex[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b59ba6",
          "lines": [
            "github.com/cilium/ebpf/perf.(*forwardReader).Read[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b59f69",
          "lines": [
            "github.com/cilium/ebpf/perf.(*perfEventRing).Read[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4cdc2f",
          "lines": [
            "io.ReadAtLeast[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b566b8",
          "lines": [
            "io.ReadFull[]@:0",
            "github.com/cilium/ebpf/perf.readRecord[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b58e5e",
          "lines": [
            "github.com/cilium/ebpf/perf.(*Reader).readRecordFromRing[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b582f0",
          "lines": [
            "github.com/cilium/ebpf/perf.(*Reader).ReadInto[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be2f9c",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b38998",
          "lines": [
            "sync/atomic.(*Int32).Add[]@:0",
            "sync.(*RWMutex).RLock[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/xsync.(*RWMutex[go.shape.map[go.opentelemetry.io/ebpf-profiler/libpf.AddressOrLineno]go.opentelemetry.io/ebpf-profiler/reporter/internal/samples.SourceInfo]).RLock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f2e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b935f4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotMethod).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93bd2",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1223234",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de165",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4defed",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x639293",
          "lines": [
            "github.com/cilium/ebpf/internal/unix.Syscall[]@:0",
            "github.com/cilium/ebpf/internal/sys.BPF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b0e45",
          "lines": [
            "github.com/cilium/ebpf/internal/sys.MapLookupElem[]@:0",
            "github.com/cilium/ebpf.(*Map).lookup[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b08dd",
          "lines": [
            "github.com/cilium/ebpf.(*Map).LookupWithFlags[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7d3a",
          "lines": [
            "github.com/cilium/ebpf.(*Map).Lookup[]@:0",
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fa1c",
          "lines": [
            "sync.(*RWMutex).Lock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bdc43e",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.uint64,go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 }]).Get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3d68",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*lruFileIDMapper).Get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5622",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b932",
          "lines": [
            "runtime.arenaIndex[]@:0",
            "runtime.spanOf[]@:0",
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x429408",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x429416",
          "lines": [
            "runtime.typePointers.nextFast[]@:0",
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x429491",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x5172aa",
          "lines": [
            "fmt.(*pp).printArg[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x519e7d",
          "lines": [
            "fmt.(*pp).doPrintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fd2",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b920",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3c40",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fa1c",
          "lines": [
            "sync.(*RWMutex).Lock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4c15",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b4d140",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47a678",
          "lines": [
            "runtime.mapaccess2_fast64[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f87",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7fe4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3bc9",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4298e9",
          "lines": [
            "runtime.(*gcBits).bitp[]@:0",
            "runtime.(*mspan).markBitsForIndex[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x5125f2",
          "lines": [
            "fmt.(*fmt).fmtInteger[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x515288",
          "lines": [
            "fmt.(*pp).fmtInteger[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x517924",
          "lines": [
            "fmt.(*pp).printValue[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x51743a",
          "lines": [
            "fmt.(*pp).printArg[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x519e7d",
          "lines": [
            "fmt.(*pp).doPrintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fd2",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b41696",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.(*systemProcess).OpenELF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d24ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.(*Reference).GetELF[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b989",
          "lines": [
            "runtime.(*mSpanStateBox).get[]@:0",
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4320ff",
          "lines": [
            "runtime.(*mheap).tryAllocMSpan[]@:0",
            "runtime.(*mheap).allocSpan[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x431c5b",
          "lines": [
            "runtime.(*mheap).alloc.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb11",
          "lines": [
            "linux-vdso.1.so 0xb11[]@:0"
          ],
          "mapping": "0x0-0x2000@0x0 linux-vdso.1.so()"
        },
        {
          "address": "0x48782d",
          "lines": [
            "time.now[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x418144",
          "lines": [
            "runtime.deductAssistCredit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4801d6",
          "lines": [
            "runtime.slicebytetostring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fe5",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x5156a5",
          "lines": [
            "fmt.(*pp).fmtString[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x5172c5",
          "lines": [
            "fmt.(*pp).printArg[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x519e7d",
          "lines": [
            "fmt.(*pp).doPrintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fd2",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x487057",
          "lines": [
            "runtime.usleep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x454ff4",
          "lines": [
            "runtime.runqgrab[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x454ff4",
          "lines": [
            "runtime.runqgrab[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x455136",
          "lines": [
            "runtime.runqsteal[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44d8a4",
          "lines": [
            "runtime.stealWork[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44c804",
          "lines": [
            "runtime.findRunnable[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e230",
          "lines": [
            "runtime.schedule[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e64a",
          "lines": [
            "runtime.park_m[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48382d",
          "lines": [
            "runtime.mcall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x416b28",
          "lines": [
            "runtime.lock2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x416a73",
          "lines": [
            "runtime.lockWithRank[]@:0",
            "runtime.lock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42fb37",
          "lines": [
            "runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x48acee",
          "lines": [
            "internal/stringslite.Index[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d2204",
          "lines": [
            "strings.Index[]@:0",
            "strings.Contains[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42995c",
          "lines": [
            "runtime.(*mspan).base[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b8aab8",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.uintptr,go.shape.*uint8]).hashToBucketPos[]@:0",
            "github.com/elastic/go-freelru.(*LRU[go.shape.uintptr,go.shape.*uint8]).hashToPos[]@:0",
            "github.com/elastic/go-freelru.(*LRU[go.shape.uintptr,go.shape.*uint8]).findKey[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b89ec4",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.uintptr,go.shape.*uint8]).get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b8a144",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.uintptr,go.shape.*uint8]).Get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b95864",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).getMethod[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93ba4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x432258",
          "lines": [
            "internal/runtime/atomic.(*Bool).Load[]@:0",
            "runtime.(*gcCPULimiterState).limiting[]@:0",
            "runtime.(*mheap).allocSpan[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x431c5b",
          "lines": [
            "runtime.(*mheap).alloc.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x12435e0",
          "lines": [
            "_raw_spin_unlock_irqrestore[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18d5c8",
          "lines": [
            "__wake_up_sync_key[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4f19db",
          "lines": [
            "pipe_write[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e3fa2",
          "lines": [
            "vfs_write[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e4468",
          "lines": [
            "ksys_write[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e44c8",
          "lines": [
            "__x64_sys_write[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x553d",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de165",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4dc4fa",
          "lines": [
            "syscall.write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4fe1d3",
          "lines": [
            "syscall.Write[]@:0",
            "internal/poll.ignoringEINTRIO[]@:0",
            "internal/poll.(*FD).Write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x507c70",
          "lines": [
            "os.(*File).write[]@:0",
            "os.(*File).Write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513ef6",
          "lines": [
            "fmt.Fprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d308e",
          "lines": [
            "fmt.Printf[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x432877",
          "lines": [
            "runtime.(*mheap).initSpan[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x43243c",
          "lines": [
            "runtime.(*mheap).allocSpan[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x431c5b",
          "lines": [
            "runtime.(*mheap).alloc.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b58664",
          "lines": [
            "sync.(*Mutex).Unlock[]@:0",
            "github.com/cilium/ebpf/perf.(*Reader).ReadInto.deferwrap1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b58487",
          "lines": [
            "github.com/cilium/ebpf/perf.(*Reader).ReadInto[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be2f9c",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b44302",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d83e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcaf18",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x41d049",
          "lines": [
            "runtime.(*mspan).writeHeapBitsSmall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x41d2ea",
          "lines": [
            "runtime.heapSetType[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x477f0e",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x418284",
          "lines": [
            "runtime.newobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd653a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.New[]@:0",
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b994",
          "lines": [
            "runtime.(*mspan).base[]@:0",
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49a6e0",
          "lines": [
            "strconv.formatBits[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x49a36e",
          "lines": [
            "strconv.AppendUint[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3b64",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49a28a",
          "lines": [
            "strconv.AppendUint[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3b64",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb03",
          "lines": [
            "linux-vdso.1.so 0xb03[]@:0"
          ],
          "mapping": "0x0-0x2000@0x0 linux-vdso.1.so()"
        },
        {
          "address": "0x48722c",
          "lines": [
            "runtime.nanotime1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x487642",
          "lines": [
            "runtime.futex[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44002f",
          "lines": [
            "runtime.futexsleep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x416ec6",
          "lines": [
            "runtime.notesleep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44b6eb",
          "lines": [
            "runtime.mPark[]@:0",
            "runtime.stopm[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44d15b",
          "lines": [
            "runtime.findRunnable[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e230",
          "lines": [
            "runtime.schedule[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e64a",
          "lines": [
            "runtime.park_m[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48382d",
          "lines": [
            "runtime.mcall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b989",
          "lines": [
            "runtime.(*mSpanStateBox).get[]@:0",
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47a5f7",
          "lines": [
            "runtime.mapaccess2_fast64[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6837",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).findMappingForTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd56c5",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b4d144",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4294b3",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x524c6b",
          "lines": [
            "simple_lookup[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fba6f",
          "lines": [
            "open_last_lookups[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fbc88",
          "lines": [
            "path_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fc9de",
          "lines": [
            "do_filp_open[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4defb2",
          "lines": [
            "do_sys_openat2[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4df474",
          "lines": [
            "__x64_sys_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7377",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de209",
          "lines": [
            "syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4db18f",
          "lines": [
            "syscall.openat[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50956a",
          "lines": [
            "syscall.Open[]@:0",
            "os.open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50a151",
          "lines": [
            "os.openFileNolog.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x509f6d",
          "lines": [
            "os.ignoringEINTR[]@:0",
            "os.openFileNolog[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x5084fd",
          "lines": [
            "os.OpenFile[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6c9864",
          "lines": [
            "os.Open[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.Open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4169b",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.(*systemProcess).OpenELF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d24ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.(*Reference).GetELF[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42944e",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49a2ee",
          "lines": [
            "strconv.AppendUint[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3b64",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3be6",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x8637df",
          "lines": [
            "_copy_to_user[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x313692",
          "lines": [
            "map_lookup_elem[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31544b",
          "lines": [
            "__sys_bpf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x315da9",
          "lines": [
            "__x64_sys_bpf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6df5",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de165",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4defed",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x639293",
          "lines": [
            "github.com/cilium/ebpf/internal/unix.Syscall[]@:0",
            "github.com/cilium/ebpf/internal/sys.BPF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b0e45",
          "lines": [
            "github.com/cilium/ebpf/internal/sys.MapLookupElem[]@:0",
            "github.com/cilium/ebpf.(*Map).lookup[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b08dd",
          "lines": [
            "github.com/cilium/ebpf.(*Map).LookupWithFlags[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7d3a",
          "lines": [
            "github.com/cilium/ebpf.(*Map).Lookup[]@:0",
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fbee",
          "lines": [
            "sync.(*Mutex).Unlock[]@:0",
            "sync.(*RWMutex).Unlock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bdc476",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.uint64,go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 }]).Get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3d68",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*lruFileIDMapper).Get[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5622",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4382a2",
          "lines": [
            "runtime.(*pallocBits).summarize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x436875",
          "lines": [
            "runtime.(*pageAlloc).free[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x432ea7",
          "lines": [
            "runtime.(*mheap).freeSpanLocked[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42fb48",
          "lines": [
            "runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func3[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3bef",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b44493",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d83e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcaf18",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x6329e2",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/basehash.putUint64AsHex[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x632d96",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/basehash.putUint64AsLowerHex[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/basehash.marshalIdentifierTo[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d223e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/basehash.marshalIdentifier[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128.StringNoQuotes[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb03",
          "lines": [
            "linux-vdso.1.so 0xb03[]@:0"
          ],
          "mapping": "0x0-0x2000@0x0 linux-vdso.1.so()"
        },
        {
          "address": "0x48783f",
          "lines": [
            "time.now[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4298e9",
          "lines": [
            "runtime.(*gcBits).bitp[]@:0",
            "runtime.(*mspan).markBitsForIndex[]@:0",
            "runtime.greyobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4294ad",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x44f212",
          "lines": [
            "runtime.save[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44f2cf",
          "lines": [
            "runtime.reentersyscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x47d69e",
          "lines": [
            "runtime.entersyscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de144",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4dc4fa",
          "lines": [
            "syscall.write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4fe1d3",
          "lines": [
            "syscall.Write[]@:0",
            "internal/poll.ignoringEINTRIO[]@:0",
            "internal/poll.(*FD).Write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x507c70",
          "lines": [
            "os.(*File).write[]@:0",
            "os.(*File).Write[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513ef6",
          "lines": [
            "fmt.Fprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d308e",
          "lines": [
            "fmt.Printf[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x44246a",
          "lines": [
            "runtime.popDefer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4427c7",
          "lines": [
            "runtime.deferreturn[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d2477",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x48a7ce",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de209",
          "lines": [
            "syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4db18f",
          "lines": [
            "syscall.openat[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50956a",
          "lines": [
            "syscall.Open[]@:0",
            "os.open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50a151",
          "lines": [
            "os.openFileNolog.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x509f6d",
          "lines": [
            "os.ignoringEINTR[]@:0",
            "os.openFileNolog[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x5084fd",
          "lines": [
            "os.OpenFile[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6c9864",
          "lines": [
            "os.Open[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.Open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4169b",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.(*systemProcess).OpenELF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d24ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.(*Reference).GetELF[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x477e05",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4801d6",
          "lines": [
            "runtime.slicebytetostring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fe5",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3c28",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xadb1f4",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development.(*Sample).MarshalToSizedBuffer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xad8b38",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development.(*Profile).MarshalToSizedBuffer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xad7def",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development.(*ScopeProfiles).MarshalToSizedBuffer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xad78ef",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/profiles/v1development.(*ResourceProfiles).MarshalToSizedBuffer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xae9d0e",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development.(*ExportProfilesServiceRequest).MarshalToSizedBuffer[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xae9b4c",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development.(*ExportProfilesServiceRequest).Marshal[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x769e51",
          "lines": [
            "google.golang.org/protobuf/internal/impl.legacyMarshal[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x7035e2",
          "lines": [
            "google.golang.org/protobuf/proto.MarshalOptions.size[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x70348b",
          "lines": [
            "google.golang.org/protobuf/proto.MarshalOptions.Size[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xa36a19",
          "lines": [
            "google.golang.org/grpc/encoding/proto.(*codecV2).Marshal[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xa90289",
          "lines": [
            "google.golang.org/grpc.encode[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xaa9ce4",
          "lines": [
            "google.golang.org/grpc.prepareMsg[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xaa3130",
          "lines": [
            "google.golang.org/grpc.(*clientStream).SendMsg[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xa8367e",
          "lines": [
            "google.golang.org/grpc.invoke[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xa8355e",
          "lines": [
            "google.golang.org/grpc.(*ClientConn).Invoke[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0xae9a84",
          "lines": [
            "go.opentelemetry.io/collector/pdata/internal/data/protogen/collector/profiles/v1development.(*profilesServiceClient).Export[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b41c66",
          "lines": [
            "go.opentelemetry.io/collector/pdata/pprofile/pprofileotlp.(*grpcClient).Export[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4673d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).reportOTLPProfile[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b46364",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b479fb",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*runLoop).Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x41b83a",
          "lines": [
            "runtime.mapaccess1_faststr[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7d15",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3bb9",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b98e",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425326",
          "lines": [
            "runtime.gcDrainMarkWorkerIdle[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x43e773",
          "lines": [
            "runtime.(*consistentHeapStats).release[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x41e2f0",
          "lines": [
            "runtime.(*mcache).refill[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x417fc4",
          "lines": [
            "runtime.(*mcache).nextFree[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x477d2c",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4801d6",
          "lines": [
            "runtime.slicebytetostring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fe5",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4bc0b5",
          "lines": [
            "mod_memcg_state[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4bc10c",
          "lines": [
            "memcg_account_kmem[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4c16fd",
          "lines": [
            "obj_cgroup_charge[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x45ef9d",
          "lines": [
            "kmem_cache_alloc[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e599f",
          "lines": [
            "alloc_empty_file[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fbc36",
          "lines": [
            "path_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4fc9de",
          "lines": [
            "do_filp_open[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4defb2",
          "lines": [
            "do_sys_openat2[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4df474",
          "lines": [
            "__x64_sys_openat[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7377",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de209",
          "lines": [
            "syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4db18f",
          "lines": [
            "syscall.openat[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50956a",
          "lines": [
            "syscall.Open[]@:0",
            "os.open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x50a151",
          "lines": [
            "os.openFileNolog.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x509f6d",
          "lines": [
            "os.ignoringEINTR[]@:0",
            "os.openFileNolog[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x5084fd",
          "lines": [
            "os.OpenFile[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6c9864",
          "lines": [
            "os.Open[]@:0",
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.Open[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4169b",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/process.(*systemProcess).OpenELF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d24ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf/pfelf.(*Reference).GetELF[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x533b98",
          "lines": [
            "bytes.(*Reader).ReadByte[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b94734",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*unsigned5Decoder).getUint[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93b16",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b931d5",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotMethod).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b939a5",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b9fd",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x425409",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12422ac",
          "lines": [
            "do_nanosleep[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20667e",
          "lines": [
            "hrtimer_nanosleep[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x206a2f",
          "lines": [
            "__x64_sys_nanosleep[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5d8f",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x487056",
          "lines": [
            "runtime.usleep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x454ff4",
          "lines": [
            "runtime.runqgrab[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x454ff4",
          "lines": [
            "runtime.runqgrab[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x455136",
          "lines": [
            "runtime.runqsteal[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44d8a4",
          "lines": [
            "runtime.stealWork[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44c804",
          "lines": [
            "runtime.findRunnable[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e230",
          "lines": [
            "runtime.schedule[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e64a",
          "lines": [
            "runtime.park_m[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48382d",
          "lines": [
            "runtime.mcall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fa1c",
          "lines": [
            "sync.(*RWMutex).Lock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b391b0",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).GetAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f11",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7fe4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fbae",
          "lines": [
            "sync.(*RWMutex).Unlock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b391f0",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).GetAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f11",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7fe4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x48674e",
          "lines": [
            "runtime.memmove[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x519c64",
          "lines": [
            "fmt.(*buffer).writeString[]@:0",
            "fmt.(*pp).doPrintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fd2",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47a584",
          "lines": [
            "runtime.mapaccess2_fast64[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f87",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7fe4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x40d4c4",
          "lines": [
            "indexbytebody[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48ac4a",
          "lines": [
            "internal/stringslite.IndexByte[]@:0",
            "internal/stringslite.Index[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d2204",
          "lines": [
            "strings.Index[]@:0",
            "strings.Contains[]@:0",
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42e6a2",
          "lines": [
            "internal/runtime/atomic.(*Uint32).CompareAndSwap[]@:0",
            "runtime.(*activeSweep).begin[]@:0",
            "runtime.sweepone[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42e51e",
          "lines": [
            "runtime.bgsweep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x422bc4",
          "lines": [
            "runtime.gcenable.gowrap1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x44d6f9",
          "lines": [
            "runtime.(*randomEnum).next[]@:0",
            "runtime.stealWork[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44c804",
          "lines": [
            "runtime.findRunnable[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e230",
          "lines": [
            "runtime.schedule[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e64a",
          "lines": [
            "runtime.park_m[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48382d",
          "lines": [
            "runtime.mcall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b4449a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d83e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).ReportTraceEvent[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcaf18",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b3a295",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).setHead[]@:0",
            "github.com/elastic/go-freelru.(*LRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).getAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b391dd",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).GetAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f11",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b935f4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotMethod).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93bd2",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x49fbee",
          "lines": [
            "sync.(*Mutex).Unlock[]@:0",
            "sync.(*RWMutex).Unlock[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bdc549",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.uint64,go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 }]).Add[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd3e25",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*lruFileIDMapper).Set[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7f42",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4837c5",
          "lines": [
            "runtime.gogo[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44c3be",
          "lines": [
            "runtime.execute[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e3bb",
          "lines": [
            "runtime.schedule[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x44e64a",
          "lines": [
            "runtime.park_m[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x48382d",
          "lines": [
            "runtime.mcall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3be9",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b4400a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown.deferwrap1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43fa8",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7fe4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x42e6f6",
          "lines": [
            "runtime.sweepone[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42e51e",
          "lines": [
            "runtime.bgsweep[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x422bc4",
          "lines": [
            "runtime.gcenable.gowrap1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x41d083",
          "lines": [
            "runtime.(*mspan).writeHeapBitsSmall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x41d2ea",
          "lines": [
            "runtime.heapSetType[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x477f0e",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x418284",
          "lines": [
            "runtime.newobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93a48",
          "lines": [
            "bytes.NewReader[]@:0",
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x50c171",
          "lines": [
            "os.Stat[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47809b",
          "lines": [
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4801d6",
          "lines": [
            "runtime.slicebytetostring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x513fe5",
          "lines": [
            "fmt.Sprintf[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22ea",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3bec",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47b998",
          "lines": [
            "runtime.findObject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42948b",
          "lines": [
            "runtime.scanobject[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x428d53",
          "lines": [
            "runtime.gcDrain[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x42535d",
          "lines": [
            "runtime.gcDrainMarkWorkerDedicated[]@:0",
            "runtime.gcBgMarkWorker.func2[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4838a9",
          "lines": [
            "runtime.systemstack[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x86393b",
          "lines": [
            "_copy_from_user[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f0831",
          "lines": [
            "vmemdup_user[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3135f8",
          "lines": [
            "map_lookup_elem[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31544b",
          "lines": [
            "__sys_bpf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x315da9",
          "lines": [
            "__x64_sys_bpf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6df5",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x48a7cd",
          "lines": [
            "internal/runtime/syscall.Syscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de10c",
          "lines": [
            "syscall.RawSyscall6[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4de165",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x4defed",
          "lines": [
            "syscall.Syscall[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x639293",
          "lines": [
            "github.com/cilium/ebpf/internal/unix.Syscall[]@:0",
            "github.com/cilium/ebpf/internal/sys.BPF[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b0e45",
          "lines": [
            "github.com/cilium/ebpf/internal/sys.MapLookupElem[]@:0",
            "github.com/cilium/ebpf.(*Map).lookup[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6b08dd",
          "lines": [
            "github.com/cilium/ebpf.(*Map).LookupWithFlags[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be7d3a",
          "lines": [
            "github.com/cilium/ebpf.(*Map).Lookup[]@:0",
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).insertKernelFrames[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be8e0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).loadBpfTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be9753",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.(*Tracer).StartMapMonitors.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1be302a",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracer.startPollingPerfEventMonitor.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x47fc60",
          "lines": [
            "runtime.growslice[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5b0e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/libpf.(*Trace).AppendFrameFull[]@:0",
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bcc875",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.uint64,go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 }]).addWithLifetime[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcc624",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.uint64,go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 }]).Add[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcad84",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x477cc2",
          "lines": [
            "runtime.nextFreeFast[]@:0",
            "runtime.mallocgc[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x477544",
          "lines": [
            "runtime.convTstring[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x6d22b2",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter/symb/cache.(*FSCache).Convert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6684",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbConvert[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd580e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4857de",
          "lines": [
            "runtime.memhash64[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x47a5c3",
          "lines": [
            "runtime.mapaccess2_fast64[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6837",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).findMappingForTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd56c5",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1bd3c3a",
          "lines": [
            "hash/fnv.(*sum128a).Write[]@:0",
            "go.opentelemetry.io/ebpf-profiler/traceutil.HashTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd6479",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1b3b0eb",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).findKeyNoExpire[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b3a204",
          "lines": [
            "github.com/elastic/go-freelru.(*LRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).getAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b391dd",
          "lines": [
            "github.com/elastic/go-freelru.(*SyncedLRU[go.shape.struct { go.opentelemetry.io/ebpf-profiler/libpf/basehash.Hash128 },go.shape.*uint8]).GetAndRefresh[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b43f11",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*baseReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b4d15e",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/reporter.(*OTLPReporter).FrameKnown[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b935f4",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotMethod).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b93bd2",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotJITInfo).symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1b9926d",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/interpreter/hotspot.(*hotspotInstance).Symbolize[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd4dda",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).symbolizeFrame[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bd5fcf",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/processmanager.(*ProcessManager).ConvertTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcacae",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.(*traceHandler).HandleTrace[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x1bcb3f3",
          "lines": [
            "go.opentelemetry.io/ebpf-profiler/tracehandler.Start.func1[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        },
        {
          "address": "0x485860",
          "lines": [
            "runtime.goexit[]@:0"
          ],
          "mapping": "0x403000-0x1d74000@0x3000 ___2go_build_go_opentelemetry_io_ebpf_profiler(25dd4a2df85a27ee9aa6f8eac003de7d9fec555e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xbc81",
          "lines": [
            "libxcb.so.1.1.0 0xbc81[]@:0"
          ],
          "mapping": "0xb000-0x1e000@0xb000 libxcb.so.1.1.0(16796503bce879b4d9697eb4fada10eeb6af4040)"
        },
        {
          "address": "0xccbc",
          "lines": [
            "libxcb.so.1.1.0 0xccbc[]@:0"
          ],
          "mapping": "0xb000-0x1e000@0xb000 libxcb.so.1.1.0(16796503bce879b4d9697eb4fada10eeb6af4040)"
        },
        {
          "address": "0xdd7e",
          "lines": [
            "xcb_writev[]@:0"
          ],
          "mapping": "0xb000-0x1e000@0xb000 libxcb.so.1.1.0(16796503bce879b4d9697eb4fada10eeb6af4040)"
        },
        {
          "address": "0x410b8",
          "lines": [
            "_XSend[]@:0"
          ],
          "mapping": "0x19000-0xa9000@0x19000 libX11.so.6.4.0(4cb55b1a3e1fcb63bde78cbab338d576fc43e330)"
        },
        {
          "address": "0x44ae8",
          "lines": [
            "_XFlush[]@:0"
          ],
          "mapping": "0x19000-0xa9000@0x19000 libX11.so.6.4.0(4cb55b1a3e1fcb63bde78cbab338d576fc43e330)"
        },
        {
          "address": "0x1f885",
          "lines": [
            "XFlush[]@:0"
          ],
          "mapping": "0x19000-0xa9000@0x19000 libX11.so.6.4.0(4cb55b1a3e1fcb63bde78cbab338d576fc43e330)"
        },
        {
          "address": "0x0",
          "lines": [
            "void sun.awt.X11.XlibWrapper.XFlush(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void sun.awt.X11.XComponentPeer.pSetCursor(java.awt.Cursor, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x84",
          "lines": [
            "void sun.awt.X11.XGlobalCursorManager.setCursor(java.awt.Component, java.awt.Cursor, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9c",
          "lines": [
            "void sun.awt.GlobalCursorManager._updateCursor(boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void sun.awt.GlobalCursorManager.updateCursorImmediately()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void sun.awt.X11.XComponentPeer.updateCursorImmediately()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "void java.awt.Component.updateCursorImmediately()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x65",
          "lines": [
            "void java.awt.Container.validate()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$3.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$3.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "void javax.swing.RepaintManager.validateInvalidComponents()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x46",
          "lines": [
            "com.intellij.util.text.ImmutableText$InnerLeaf com.intellij.util.text.ImmutableText.findLeaf(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "char com.intellij.util.text.ImmutableText.charAt(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void com.intellij.openapi.util.text.LineTokenizer.advance()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4f",
          "lines": [
            "com.intellij.openapi.editor.impl.LineSet com.intellij.openapi.editor.impl.LineSet.createLineSet(java.lang.CharSequence, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "com.intellij.openapi.editor.impl.LineSet com.intellij.openapi.editor.impl.LineSet.genericUpdate(int, int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc5",
          "lines": [
            "com.intellij.openapi.editor.impl.LineSet com.intellij.openapi.editor.impl.LineSet.update(java.lang.CharSequence, int, int, java.lang.CharSequence, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void com.intellij.openapi.editor.impl.DocumentImpl.changedUpdate(com.intellij.openapi.editor.event.DocumentEvent, long, java.lang.CharSequence, com.intellij.openapi.editor.impl.DocumentImpl$DelayedExceptions)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe6",
          "lines": [
            "void com.intellij.openapi.editor.impl.DocumentImpl.updateText(com.intellij.util.text.ImmutableCharSequence, int, java.lang.CharSequence, java.lang.CharSequence, boolean, long, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xad",
          "lines": [
            "void com.intellij.openapi.editor.impl.DocumentImpl.insertString(int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x162",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.flushDeferredText()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext.runAsCoroutine(boolean, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext.runAsCoroutine(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.QueueProcessor.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.util.Alarm$Request.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void com.intellij.util.Alarm$Request.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.util.concurrency.Propagation.contextAwareCallable$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.Propagation$$Lambda+\u003chidden\u003e.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread$lambda$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.doRun(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.runNextEvent(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.flushNow()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4",
          "lines": [
            "javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(sun.awt.AppContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "javax.swing.RepaintManager javax.swing.RepaintManager.currentManager(javax.swing.JComponent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xdf",
          "lines": [
            "java.lang.CharSequence com.intellij.util.text.ImmutableText.concatNodes(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcc",
          "lines": [
            "java.lang.CharSequence com.intellij.util.text.ImmutableText.concatNodes(java.lang.CharSequence, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "com.intellij.util.text.ImmutableText com.intellij.util.text.ImmutableText.concat(com.intellij.util.text.ImmutableText)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "com.intellij.util.text.ImmutableText com.intellij.util.text.ImmutableText.insert(int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "com.intellij.util.text.ImmutableCharSequence com.intellij.util.text.ImmutableText.insert(int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x88",
          "lines": [
            "void com.intellij.openapi.editor.impl.DocumentImpl.insertString(int, java.lang.CharSequence)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x162",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.flushDeferredText()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext.runAsCoroutine(boolean, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext.runAsCoroutine(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.QueueProcessor.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.util.Alarm$Request.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void com.intellij.util.Alarm$Request.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.util.concurrency.Propagation.contextAwareCallable$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.Propagation$$Lambda+\u003chidden\u003e.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread$lambda$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.doRun(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.runNextEvent(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.flushNow()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x24",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.lambda$containsAny$0(java.util.List, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings$$Lambda+\u003chidden\u003e.value(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.containsAny(java.lang.String, java.util.List)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.shouldFoldLine(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "boolean com.intellij.execution.console.SubstringConsoleFolding.shouldFoldLine(com.intellij.openapi.project.Project, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b3c8bab09f51eab",
          "lines": [
            "_new_array_nozero_Java[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x59",
          "lines": [
            "com.intellij.execution.ConsoleFolding com.intellij.execution.impl.ConsoleViewImpl.foldingForLine(java.util.List, int, com.intellij.openapi.editor.Document)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xac",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.lambda$updateFoldings$18(com.intellij.openapi.editor.Editor, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.FoldingModelImpl.runBatchFoldingOperation(java.lang.Runnable, boolean, boolean, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "void com.intellij.openapi.editor.impl.FoldingModelImpl.runBatchFoldingOperation(java.lang.Runnable, boolean, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.FoldingModel.runBatchFoldingOperation(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.updateFoldings(int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.highlightHyperlinksAndFoldings(int, com.intellij.openapi.util.Expirable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x282",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.flushDeferredText()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext.runAsCoroutine(boolean, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext.runAsCoroutine(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.QueueProcessor.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.util.Alarm$Request.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void com.intellij.util.Alarm$Request.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.util.concurrency.Propagation.contextAwareCallable$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.Propagation$$Lambda+\u003chidden\u003e.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread$lambda$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.doRun(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.runNextEvent(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.flushNow()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9b7dc",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_wait[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13f46",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.park()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode.block()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.ForkJoinPool.unmanagedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "void java.util.concurrent.ForkJoinPool.managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6b",
          "lines": [
            "void java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3e",
          "lines": [
            "java.awt.AWTEvent java.awt.EventQueue.getNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "java.awt.AWTEvent com.intellij.ide.IdeEventQueue.getNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x9f6e09",
          "lines": [
            "JVM_GetStackAccessControlContext[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "java.security.AccessControlContext java.security.AccessController.getStackAccessControlContext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x0",
          "lines": [
            "java.security.AccessControlContext java.security.AccessController.getContext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.AWTEvent.\u003cinit\u003e(java.lang.Object, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.event.AdjustmentEvent.\u003cinit\u003e(java.awt.Adjustable, int, int, int, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void javax.swing.JScrollBar.fireAdjustmentValueChanged(int, int, int, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x36",
          "lines": [
            "void javax.swing.JScrollBar$ModelListener.stateChanged(javax.swing.event.ChangeEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void javax.swing.DefaultBoundedRangeModel.fireStateChanged()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x68",
          "lines": [
            "void com.intellij.ui.components.JBScrollBar$Model.fireStateChanged()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x82",
          "lines": [
            "void javax.swing.DefaultBoundedRangeModel.setRangeProperties(int, int, int, int, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3e",
          "lines": [
            "void javax.swing.DefaultBoundedRangeModel.setValue(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void javax.swing.JScrollBar.setValue(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e",
          "lines": [
            "void com.intellij.ui.components.JBScrollBar.setValue(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.openapi.editor.impl.ScrollingModelImpl._scrollVertically(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "void com.intellij.openapi.editor.impl.ScrollingModelImpl$AnimatedScrollingRunnable.lambda$new$0(double)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.editor.impl.ScrollingModelImpl$AnimatedScrollingRunnable$$Lambda+\u003chidden\u003e.accept(double)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.util.animation.Animation.update(double)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11c",
          "lines": [
            "void com.intellij.util.animation.JBAnimator$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ContextCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread$lambda$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.doRun(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.runNextEvent(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.flushNow()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x324",
          "lines": [
            "void sun.font.XRTextRenderer.drawGlyphList(sun.java2d.SunGraphics2D, sun.font.GlyphList)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xae",
          "lines": [
            "void sun.java2d.pipe.GlyphListPipe.drawChars(sun.java2d.SunGraphics2D, char[], int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71",
          "lines": [
            "void sun.java2d.SunGraphics2D.drawChars(char[], int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.SimpleTextFragment.lambda$draw$0(float, float, int, int, java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.SimpleTextFragment$$Lambda+\u003chidden\u003e.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.lambda$paintTextWithEffects$4(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session$$Lambda+\u003chidden\u003e.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.util.ArrayList.forEach(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintTextWithEffects()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "int com.intellij.openapi.editor.impl.view.VisualLinesIterator$Location.getNextVisualLineStartOffset(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.VisualLinesIterator$Location.advance()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.VisualLinesIterator.advance()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "com.intellij.util.IntPair com.intellij.openapi.editor.impl.view.EditorSizeManager.calculateTextPreferredWidth(int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xad",
          "lines": [
            "int com.intellij.openapi.editor.impl.view.EditorSizeManager.getTextPreferredWidth()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.view.EditorSizeManager.getPreferredSize()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.view.EditorView.lambda$getPreferredSize$0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.editor.impl.view.EditorView$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.ReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.view.EditorView.getPreferredSize()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x33",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.EditorImpl.lambda$getPreferredSize$53()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.ReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.EditorImpl.getPreferredSize()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.awt.Dimension com.intellij.openapi.editor.impl.EditorComponentImpl.getPreferredSize()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1cb",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane$Layout.layoutContainer(java.awt.Container)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.Container.layout()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$MyScrollPane.lambda$layout$0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$MyScrollPane$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.ReadAction.lambda$run$1(com.intellij.util.ThrowableRunnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.ReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.ReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.ReadAction.run(com.intellij.util.ThrowableRunnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$MyScrollPane.layout()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void java.awt.Container.doLayout()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.Container.validateTree()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3c",
          "lines": [
            "void java.awt.Container.validate()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$3.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$3.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "void javax.swing.RepaintManager.validateInvalidComponents()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean sun.awt.SunToolkit.isInstanceOf(java.lang.Class, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "boolean sun.awt.SunToolkit.isInstanceOf(java.lang.Object, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "java.awt.Container javax.swing.BufferStrategyPaintManager.fetchRoot(javax.swing.JComponent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.SimpleTextFragment.\u003cinit\u003e(char[], int, int, com.intellij.openapi.editor.impl.FontInfo)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe5",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.TextFragmentFactory.createTextFragments(java.util.List, char[], int, int, boolean, com.intellij.openapi.editor.impl.FontInfo)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addTextFragmentIfNeeded(com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.FontInfo, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragmentsNoTabs(com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragments(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.view.TabFragment, boolean, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x169",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout$Chunk.ensureLayout(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6a",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.LineLayout$VisualOrderIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.VisualLineFragmentsIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x58",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintLineFragments(com.intellij.openapi.editor.impl.view.VisualLinesIterator, int, com.intellij.openapi.editor.impl.view.EditorPainter$LineFragmentPainter, com.intellij.openapi.editor.impl.view.EditorPainter$Session$MarginWidthConsumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintBackground()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x65",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "java.lang.String com.jetbrains.rdserver.lux.services.LuxFontLayoutService.a(int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean java.awt.Color.equals(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean java.util.Objects.equals(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x67",
          "lines": [
            "boolean com.intellij.openapi.editor.markup.AttributesFlyweight$FlyweightKey.equals(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe5",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.TextFragmentFactory.createTextFragments(java.util.List, char[], int, int, boolean, com.intellij.openapi.editor.impl.FontInfo)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addTextFragmentIfNeeded(com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.FontInfo, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragmentsNoTabs(com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragments(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.view.TabFragment, boolean, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x169",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout$Chunk.ensureLayout(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6a",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.LineLayout$VisualOrderIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.VisualLineFragmentsIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x58",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintLineFragments(com.intellij.openapi.editor.impl.view.VisualLinesIterator, int, com.intellij.openapi.editor.impl.view.EditorPainter$LineFragmentPainter, com.intellij.openapi.editor.impl.view.EditorPainter$Session$MarginWidthConsumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintBackground()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x65",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x29",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.IntervalTreeImpl$1.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "boolean com.intellij.openapi.editor.ex.MarkupIterator$2.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.MarkupModelImpl.processRangeHighlightersOverlappingWith(int, int, com.intellij.util.Processor)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintHighlightersAfterEndOfLine(com.intellij.openapi.editor.ex.MarkupModelEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x95",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.JLayeredPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.JLayeredPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.openapi.fileEditor.impl.EditorTabs.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.JLayeredPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.JLayeredPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4",
          "lines": [
            "int sun.java2d.loops.SurfaceType.hashCode()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.util.Objects.hashCode(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "int java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "int java.lang.invoke.LambdaForm$MH+0x00000008002a8800.invoke(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "int java.lang.invoke.LambdaForm$MH+0x00000008004a4c00.invoke(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.lang.invoke.LambdaForm$MH+0x00000008004a8000.linkToTargetMethod(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "int sun.java2d.loops.RenderCache$Key.hashCode()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "int java.util.HashMap.hash(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.util.HashMap$Node java.util.HashMap.getNode(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object java.util.LinkedHashMap.get(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.lang.Object sun.java2d.loops.RenderCache.get(sun.java2d.loops.SurfaceType, sun.java2d.loops.CompositeType, sun.java2d.loops.SurfaceType)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "sun.java2d.loops.Blit sun.java2d.loops.Blit.getFromCache(sun.java2d.loops.SurfaceType, sun.java2d.loops.CompositeType, sun.java2d.loops.SurfaceType)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa1",
          "lines": [
            "void sun.java2d.pipe.DrawImage.blitSurfaceData(sun.java2d.SunGraphics2D, sun.java2d.pipe.Region, sun.java2d.SurfaceData, sun.java2d.SurfaceData, int, int, int, int, int, int, java.awt.Color)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "boolean sun.java2d.pipe.DrawImage.renderImageCopy(sun.java2d.SunGraphics2D, java.awt.Image, java.awt.Color, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "boolean sun.java2d.pipe.DrawImage.copyImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, java.awt.Color)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "boolean sun.java2d.pipe.DrawImage.copyImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "boolean sun.java2d.pipe.ValidatePipe.copyImage(sun.java2d.SunGraphics2D, java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x47",
          "lines": [
            "boolean sun.java2d.SunGraphics2D.drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "boolean sun.java2d.SunGraphics2D.drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf2",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x48",
          "lines": [
            "com.intellij.openapi.editor.impl.FontInfo com.intellij.openapi.editor.impl.ComplementaryFontsRegistry.doGetFontAbleToDisplay(int, float, int, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.font.FontRenderContext, boolean, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x62",
          "lines": [
            "com.intellij.openapi.editor.impl.FontInfo com.intellij.openapi.editor.impl.ComplementaryFontsRegistry.getFontAbleToDisplay(int, int, com.intellij.openapi.editor.colors.FontPreferences, java.awt.font.FontRenderContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x47",
          "lines": [
            "com.intellij.openapi.editor.impl.FontInfo com.intellij.openapi.editor.impl.ComplementaryFontsRegistry.getFontAbleToDisplay(char[], int, int, int, com.intellij.openapi.editor.colors.FontPreferences, java.awt.font.FontRenderContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "com.intellij.openapi.editor.impl.FontInfo com.intellij.openapi.editor.impl.FontFallbackIterator.getFontAbleToDisplay(int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4d",
          "lines": [
            "void com.intellij.openapi.editor.impl.FontFallbackIterator.advance()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x65",
          "lines": [
            "void com.intellij.openapi.editor.impl.FontFallbackIterator.doStart(java.lang.CharSequence, char[], java.text.CharacterIterator, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.openapi.editor.impl.FontFallbackIterator.start(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragmentsNoTabs(com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x92",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout.addFragments(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, com.intellij.openapi.editor.impl.view.LineLayout$Chunk, char[], int, int, com.intellij.openapi.editor.impl.view.TabFragment, boolean, com.intellij.openapi.editor.impl.FontFallbackIterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x169",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.LineLayout$Chunk.ensureLayout(com.intellij.openapi.editor.impl.view.EditorView, com.intellij.openapi.editor.impl.view.LineLayout$BidiRun, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6a",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.LineLayout$VisualOrderIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "boolean com.intellij.openapi.editor.impl.view.VisualLineFragmentsIterator.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x58",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintLineFragments(com.intellij.openapi.editor.impl.view.VisualLinesIterator, int, com.intellij.openapi.editor.impl.view.EditorPainter$LineFragmentPainter, com.intellij.openapi.editor.impl.view.EditorPainter$Session$MarginWidthConsumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintBackground()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x65",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x9b",
          "lines": [
            "io.opentelemetry.sdk.metrics.internal.aggregator.AggregatorHandle io.opentelemetry.sdk.metrics.internal.state.DefaultSynchronousMetricStorage.getAggregatorHandle(java.util.concurrent.ConcurrentHashMap, io.opentelemetry.api.common.Attributes, io.opentelemetry.context.Context)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void io.opentelemetry.sdk.metrics.internal.state.DefaultSynchronousMetricStorage.recordLong(long, io.opentelemetry.api.common.Attributes, io.opentelemetry.context.Context)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void io.opentelemetry.sdk.metrics.internal.state.MultiWritableMetricStorage.recordLong(long, io.opentelemetry.api.common.Attributes, io.opentelemetry.context.Context)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x37",
          "lines": [
            "void io.opentelemetry.sdk.metrics.SdkLongCounter.add(long, io.opentelemetry.api.common.Attributes, io.opentelemetry.context.Context)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "void io.opentelemetry.sdk.metrics.SdkLongCounter.add(long, io.opentelemetry.api.common.Attributes)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void io.opentelemetry.sdk.metrics.SdkLongCounter.add(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x39",
          "lines": [
            "void com.intellij.diagnostic.OtelReportingEventWatcher.edtEventFinished(java.awt.AWTEvent, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.diagnostic.CompositeEventWatcher.edtEventFinished(java.awt.AWTEvent, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b4",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x25",
          "lines": [
            "boolean com.intellij.ide.IdeEventQueue.dispatchByCustomDispatchers(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe3",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.stream.ForEachOps$ForEachOp$OfRef.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.util.stream.DistinctOps$1$2.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.util.stream.ReferencePipeline$2$1.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void java.util.stream.ReferencePipeline$3$1.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x50",
          "lines": [
            "void java.util.IdentityHashMap$KeySpliterator.forEachRemaining(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "void java.util.stream.AbstractPipeline.copyInto(java.util.stream.Sink, java.util.Spliterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.util.stream.Sink java.util.stream.AbstractPipeline.wrapAndCopyInto(java.util.stream.Sink, java.util.Spliterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Void java.util.stream.ForEachOps$ForEachOp.evaluateSequential(java.util.stream.PipelineHelper, java.util.Spliterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "java.lang.Object java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(java.util.stream.PipelineHelper, java.util.Spliterator)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x58",
          "lines": [
            "java.lang.Object java.util.stream.AbstractPipeline.evaluate(java.util.stream.TerminalOp)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "void java.util.stream.ReferencePipeline.forEach(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.RepaintManager.updateWindows(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xba",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x24",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.lambda$containsAny$0(java.util.List, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings$$Lambda+\u003chidden\u003e.value(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5e",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.containsAny(java.lang.String, java.util.List)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "boolean com.intellij.execution.console.ConsoleFoldingSettings.shouldFoldLine(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "boolean com.intellij.execution.console.SubstringConsoleFolding.shouldFoldLine(com.intellij.openapi.project.Project, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x59",
          "lines": [
            "com.intellij.execution.ConsoleFolding com.intellij.execution.impl.ConsoleViewImpl.foldingForLine(java.util.List, int, com.intellij.openapi.editor.Document)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xac",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.lambda$updateFoldings$18(com.intellij.openapi.editor.Editor, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.FoldingModelImpl.runBatchFoldingOperation(java.lang.Runnable, boolean, boolean, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "void com.intellij.openapi.editor.impl.FoldingModelImpl.runBatchFoldingOperation(java.lang.Runnable, boolean, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.FoldingModel.runBatchFoldingOperation(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.updateFoldings(int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.highlightHyperlinksAndFoldings(int, com.intellij.openapi.util.Expirable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x282",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.flushDeferredText()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl$FlushRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext$runAsCoroutine$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ChildContext.runAsCoroutine(boolean, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void com.intellij.util.concurrency.ChildContext.runAsCoroutine(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void com.intellij.util.Alarm$Request.lambda$runSafely$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.Alarm$Request$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.util.concurrency.QueueProcessor.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.util.Alarm$Request.runSafely(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void com.intellij.util.Alarm$Request.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.util.concurrency.Propagation.contextAwareCallable$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.Propagation$$Lambda+\u003chidden\u003e.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x28",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread$lambda$1(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runIntendedWriteActionOnCurrentThread(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runWithImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.doRun(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.runNextEvent(com.intellij.openapi.application.impl.FlushQueue$RunnableInfo, com.intellij.openapi.application.ex.ApplicationEx)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue.flushNow()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.openapi.application.impl.FlushQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean sun.font.TrueTypeGlyphMapper.charsToGlyphsNS(int, char[], int[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "boolean sun.font.GlyphList.mapChars(sun.java2d.loops.FontInfo, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x59",
          "lines": [
            "boolean sun.font.GlyphList.setFromChars(sun.java2d.loops.FontInfo, char[], int, int, float, float)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa4",
          "lines": [
            "void sun.java2d.pipe.GlyphListPipe.drawChars(sun.java2d.SunGraphics2D, char[], int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71",
          "lines": [
            "void sun.java2d.SunGraphics2D.drawChars(char[], int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.SimpleTextFragment.lambda$draw$0(float, float, int, int, java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.SimpleTextFragment$$Lambda+\u003chidden\u003e.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.lambda$paintTextWithEffects$4(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session$$Lambda+\u003chidden\u003e.accept(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.util.ArrayList.forEach(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paintTextWithEffects()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter$Session.paint()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorPainter.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void com.intellij.openapi.editor.impl.view.EditorView.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.lambda$paint$47(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "kotlin.Unit com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction$lambda$2(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Class, com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void com.intellij.openapi.application.impl.ApplicationImpl.runReadAction(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorImpl.paint(java.awt.Graphics2D)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paintComponent(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x100",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x21",
          "lines": [
            "void com.intellij.openapi.editor.impl.EditorComponentImpl.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xcd",
          "lines": [
            "void javax.swing.JViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.ui.components.JBViewport.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x204",
          "lines": [
            "void javax.swing.JComponent.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paintChildren(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x120",
          "lines": [
            "void javax.swing.JComponent.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void com.intellij.ui.components.JBScrollPane.paint(java.awt.Graphics)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBufferedImpl(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(javax.swing.JComponent, java.awt.Image, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x80",
          "lines": [
            "boolean javax.swing.RepaintManager$PaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19a",
          "lines": [
            "boolean javax.swing.BufferStrategyPaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "void javax.swing.RepaintManager.paint(javax.swing.JComponent, javax.swing.JComponent, java.awt.Graphics, int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2ab",
          "lines": [
            "void javax.swing.JComponent._paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8a",
          "lines": [
            "void javax.swing.JComponent.paintImmediately(int, int, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "java.lang.Void javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object javax.swing.RepaintManager$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9a",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions(java.util.Map)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void javax.swing.RepaintManager.paintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void javax.swing.RepaintManager.prePaintDirtyRegions()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x25",
          "lines": [
            "void javax.swing.RepaintManager$ProcessingRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x250",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "boolean java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "boolean java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(java.util.function.Consumer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "boolean java.util.Spliterators$1Adapter.hasNext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x54",
          "lines": [
            "sun.awt.X11GraphicsDevice sun.awt.X11.XInputMethod.findClosestScreenToPoint(java.awt.Rectangle, java.awt.Point, sun.awt.X11GraphicsDevice[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17b",
          "lines": [
            "void sun.awt.X11.XInputMethod.updateCandidatesNativeWindowPosition(boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "void sun.awt.X11.XInputMethod$ClientComponentCaretPositionTracker.updateImCandidatesNativeWindowPosition(boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void sun.awt.X11.XInputMethod$ClientComponentCaretPositionTracker.lambda$onDispatchEvent$0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void sun.awt.X11.XInputMethod$ClientComponentCaretPositionTracker$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2f",
          "lines": [
            "void java.awt.event.InvocationEvent.dispatch()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "void java.awt.EventQueue.dispatchEventImpl(java.awt.AWTEvent, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "java.lang.Void java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.awt.EventQueue$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "java.lang.Object java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(java.security.PrivilegedAction, java.security.AccessControlContext, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void java.awt.EventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xab",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.defaultDispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent$lambda$16(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWithoutImplicitRead(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x197",
          "lines": [
            "void com.intellij.ide.IdeEventQueue._dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.access$_dispatchEvent(com.intellij.ide.IdeEventQueue, java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "java.lang.Void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1$1.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "java.lang.Object com.intellij.openapi.progress.impl.CoreProgressManager.computePrioritized(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueue$dispatchEvent$processEventRunnable$1$1$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke$lambda$0(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.lambda$run$0(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction$$Lambda+\u003chidden\u003e.compute()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.AnyThreadWriteThreadingSupport.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.impl.ApplicationImpl.runWriteIntentReadAction(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "java.lang.Object com.intellij.openapi.application.WriteIntentReadAction.compute(com.intellij.openapi.util.ThrowableComputable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void com.intellij.openapi.application.WriteIntentReadAction.run(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object com.intellij.ide.IdeEventQueueKt$performActivity$runnableWithWIL$1.invoke()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity$lambda$1(kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "void com.intellij.openapi.application.TransactionGuardImpl.performActivity(boolean, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "void com.intellij.ide.IdeEventQueueKt.performActivity(java.awt.AWTEvent, kotlin.jvm.functions.Function0)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x61",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent$lambda$10(com.intellij.ide.IdeEventQueue, kotlin.jvm.internal.Ref$ObjectRef, java.awt.AWTEvent, boolean, java.awt.AWTEvent, com.intellij.diagnostic.EventWatcher, java.lang.Runnable, java.lang.Class, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void com.intellij.ide.IdeEventQueue$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x289",
          "lines": [
            "void com.intellij.ide.IdeEventQueue.dispatchEvent(java.awt.AWTEvent)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x51",
          "lines": [
            "void java.awt.EventDispatchThread.pumpOneEventForFilters(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForFilter(int, java.awt.Conditional, java.awt.EventFilter)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, java.awt.Conditional, java.awt.Component)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(int, java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void java.awt.EventDispatchThread.pumpEvents(java.awt.Conditional)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "void java.awt.EventDispatchThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xfb39c9",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc8",
          "lines": [
            "java.lang.Object java.util.concurrent.LinkedTransferQueue$DualNode.await(java.lang.Object, long, java.lang.Object, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xdf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue$Transferer.xferLifo(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.xfer(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.poll(long, java.util.concurrent.TimeUnit)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x84",
          "lines": [
            "java.lang.Runnable java.util.concurrent.ThreadPoolExecutor.getTask()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x9bcc2",
          "lines": [
            "__condvar_dec_grefs[]@:0",
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc9",
          "lines": [
            "int java.util.concurrent.FutureTask.awaitDone(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "java.lang.Object java.util.concurrent.FutureTask.get(long, java.util.concurrent.TimeUnit)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x23",
          "lines": [
            "void com.intellij.indexing.shared.platform.impl.AttrBasedFileContentHashForwardIndex$Companion.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.indexing.shared.platform.impl.AttrBasedFileContentHashForwardIndex$Companion.access$flush(com.intellij.indexing.shared.platform.impl.AttrBasedFileContentHashForwardIndex$Companion)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.indexing.shared.platform.impl.AttrBasedFileContentHashForwardIndex.force()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void com.intellij.util.indexing.impl.MapReduceIndex.doFlush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.indexing.impl.storage.VfsAwareMapReduceIndex.doFlush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void com.intellij.util.indexing.impl.MapReduceIndex.lambda$flush$5()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.indexing.impl.MapReduceIndex$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.withLock(java.util.concurrent.locks.Lock, com.intellij.util.ThrowableRunnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void com.intellij.util.indexing.impl.MapReduceIndex.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.indexing.shared.platform.impl.CompositeInvertedIndex.flushSecondaryIndex()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void com.intellij.indexing.composite.CompositeInvertedIndexBase.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "com.intellij.openapi.util.io.GentleFlusherBase$FlushResult com.intellij.util.indexing.FileBasedIndexImpl$GentleIndexFlusher$IndexFlushingState.tryFlushIfNeeded(com.intellij.util.indexing.IndexConfiguration, com.intellij.openapi.util.IntRef, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e",
          "lines": [
            "com.intellij.openapi.util.io.GentleFlusherBase$FlushResult com.intellij.util.indexing.FileBasedIndexImpl$GentleIndexFlusher.flushAsMuchAsPossibleWithinQuota(com.intellij.openapi.util.IntRef)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x38",
          "lines": [
            "void com.intellij.openapi.util.io.GentleFlusherBase.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "java.lang.Object com.intellij.util.concurrency.ContextCallable.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.concurrency.SchedulingWrapper$MyScheduledFutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "java.lang.CharSequence com.intellij.openapi.util.text.StringUtilRt.unifyLineSeparators(java.lang.CharSequence, java.lang.String, int[], boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "java.lang.String com.intellij.openapi.util.text.StringUtilRt.convertLineSeparators(java.lang.String, java.lang.String, int[], boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.String com.intellij.openapi.util.text.StringUtilRt.convertLineSeparators(java.lang.String, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "java.lang.String com.intellij.openapi.util.text.Strings.convertLineSeparators(java.lang.String, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.print(java.lang.String, com.intellij.execution.ui.ConsoleViewContentType, com.intellij.execution.filters.HyperlinkInfo)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x26",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewImpl.print(java.lang.String, com.intellij.execution.ui.ConsoleViewContentType)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x19",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewRunningState.print(java.lang.String, com.intellij.openapi.util.Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewRunningState$1.lambda$onTextAvailable$0(com.intellij.execution.process.ProcessEvent, com.intellij.openapi.util.Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewRunningState$1$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9f",
          "lines": [
            "void com.intellij.execution.impl.ProcessStreamsSynchronizer.doWhenStreamsSynchronized(java.lang.String, com.intellij.execution.process.ProcessOutputType, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void com.intellij.execution.impl.ConsoleViewRunningState$1.onTextAvailable(com.intellij.execution.process.ProcessEvent, com.intellij.openapi.util.Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x35",
          "lines": [
            "void com.intellij.execution.process.ProcessHandler$2.onTextAvailable(com.intellij.execution.process.ProcessEvent, com.intellij.openapi.util.Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x20",
          "lines": [
            "void com.intellij.execution.process.ProcessHandler.notifyTextAvailable(java.lang.String, com.intellij.openapi.util.Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x11",
          "lines": [
            "void com.intellij.execution.process.BaseOSProcessHandler$SimpleOutputReader.onTextAvailable(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb1",
          "lines": [
            "void com.intellij.util.io.BaseOutputReader.processInput(char[], java.lang.StringBuilder, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb933f9da77f680a",
          "lines": [
            "vtable chunks[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner kotlinx.coroutines.debug.internal.DebugProbesImpl.owner(kotlin.coroutines.jvm.internal.CoroutineStackFrame)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x29",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateRunningState(kotlin.coroutines.jvm.internal.CoroutineStackFrame, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3e",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateState(kotlin.coroutines.Continuation, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.probeCoroutineResumed$kotlinx_coroutines_core(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void kotlin.coroutines.jvm.internal.DebugProbesKt.probeCoroutineResumed(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc6",
          "lines": [
            "long kotlinx.coroutines.EventLoopImplBase.processNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4b",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "java.lang.Object kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core.putImpl(java.lang.Object, java.lang.Object, kotlinx.coroutines.debug.internal.HashedWeakRef)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core.putImpl$default(kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core, java.lang.Object, java.lang.Object, kotlinx.coroutines.debug.internal.HashedWeakRef, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "java.lang.Object kotlinx.coroutines.debug.internal.ConcurrentWeakMap.remove(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateRunningState(kotlin.coroutines.jvm.internal.CoroutineStackFrame, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3e",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateState(kotlin.coroutines.Continuation, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.probeCoroutineResumed$kotlinx_coroutines_core(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void kotlin.coroutines.jvm.internal.DebugProbesKt.probeCoroutineResumed(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc6",
          "lines": [
            "long kotlinx.coroutines.EventLoopImplBase.processNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4b",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "boolean kotlinx.coroutines.EventLoopImplBase.enqueueImpl(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.EventLoopImplBase.enqueue(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "void kotlinx.coroutines.EventLoopImplBase.dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3b",
          "lines": [
            "void kotlinx.coroutines.internal.DispatchedContinuationKt.resumeCancellableWith(kotlin.coroutines.Continuation, java.lang.Object, kotlin.jvm.functions.Function1)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation, kotlin.jvm.functions.Function1)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation, kotlin.jvm.functions.Function1, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e",
          "lines": [
            "void kotlinx.coroutines.CoroutineStart.invoke(kotlin.jvm.functions.Function2, java.lang.Object, kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "void kotlinx.coroutines.AbstractCoroutine.start(kotlinx.coroutines.CoroutineStart, java.lang.Object, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "kotlin.coroutines.CoroutineContext$Element kotlinx.coroutines.CoroutineDispatcher.get(kotlin.coroutines.CoroutineContext$Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "kotlin.coroutines.CoroutineContext$Element kotlin.coroutines.CombinedContext.get(kotlin.coroutines.CoroutineContext$Key)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb7",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc6",
          "lines": [
            "long kotlinx.coroutines.EventLoopImplBase.processNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4b",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122b024",
          "lines": [
            "irqentry_exit_to_user_mode[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122b0b2",
          "lines": [
            "irqentry_exit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1229578",
          "lines": [
            "sysvec_reschedule_ipi[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1400f8a",
          "lines": [
            "asm_sysvec_reschedule_ipi[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x0",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.available()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x64",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x2e6253",
          "lines": [
            "AccessInternal::PostRuntimeDispatch::oop_access_barrier(void*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3980",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x23",
          "lines": [
            "java.lang.Object kotlinx.coroutines.debug.internal.ConcurrentWeakMap.remove(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateRunningState(kotlin.coroutines.jvm.internal.CoroutineStackFrame, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3e",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.updateState(kotlin.coroutines.Continuation, java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void kotlinx.coroutines.debug.internal.DebugProbesImpl.probeCoroutineResumed$kotlinx_coroutines_core(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void kotlin.coroutines.jvm.internal.DebugProbesKt.probeCoroutineResumed(kotlin.coroutines.Continuation)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc6",
          "lines": [
            "long kotlinx.coroutines.EventLoopImplBase.processNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4b",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "java.lang.Object com.intellij.execution.process.mediator.client.util.ChannelInputStream$read$1$1.invokeSuspend(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x154",
          "lines": [
            "void kotlinx.coroutines.DispatchedTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc6",
          "lines": [
            "long kotlinx.coroutines.EventLoopImplBase.processNextEvent()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4b",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BlockingCoroutine.joinBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa3",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$BuildersKt__BuildersKt(kotlin.coroutines.CoroutineContext, boolean, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object kotlinx.coroutines.BuildersKt.runBlocking$default(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x44",
          "lines": [
            "int com.intellij.execution.process.mediator.client.util.ChannelInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "int java.io.BufferedInputStream.read1(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x30",
          "lines": [
            "int java.io.BufferedInputStream.implRead(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12",
          "lines": [
            "int java.io.BufferedInputStream.read(byte[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x75",
          "lines": [
            "int sun.nio.cs.StreamDecoder.readBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70",
          "lines": [
            "int sun.nio.cs.StreamDecoder.implRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9e",
          "lines": [
            "int sun.nio.cs.StreamDecoder.lockedRead(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3f",
          "lines": [
            "int sun.nio.cs.StreamDecoder.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7",
          "lines": [
            "int java.io.InputStreamReader.read(char[], int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "int java.io.Reader.read(char[])[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "boolean com.intellij.util.io.BaseOutputReader.readAvailableBlocking()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "boolean com.intellij.util.io.BaseDataReader.readAvailable()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.doRun()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x32",
          "lines": [
            "void com.intellij.util.ConcurrencyUtil.runUnderThreadName(java.lang.String, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void com.intellij.util.io.BaseDataReader.lambda$start$0(java.lang.String)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void com.intellij.util.io.BaseDataReader$$Lambda+\u003chidden\u003e.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$RunnableAdapter.call()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x27",
          "lines": [
            "void java.util.concurrent.FutureTask.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void com.intellij.util.concurrency.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "java.lang.Void java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "java.lang.Object java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "java.lang.Object java.security.AccessController.executePrivileged(java.security.PrivilegedAction, java.security.AccessControlContext, java.lang.Class)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "java.lang.Object java.security.AccessController.doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x20",
          "lines": [
            "void io.grpc.internal.StatsTraceContext.inboundMessage(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x84",
          "lines": [
            "void io.grpc.internal.MessageDeframer.processHeader()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x49",
          "lines": [
            "void io.grpc.internal.MessageDeframer.deliver()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "void io.grpc.internal.MessageDeframer.request(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void io.grpc.internal.AbstractStream$TransportState$1RequestRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.runTask(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.safeExecute(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x194",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x100524e",
          "lines": [
            "tcp_rate_gen[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfe78ad",
          "lines": [
            "tcp_ack[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfe96f7",
          "lines": [
            "tcp_rcv_established[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xffc358",
          "lines": [
            "tcp_v4_do_rcv[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xffe7b9",
          "lines": [
            "tcp_v4_rcv[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfbe4ab",
          "lines": [
            "ip_protocol_deliver_rcu[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfbe706",
          "lines": [
            "ip_local_deliver_finish[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfbe7ad",
          "lines": [
            "ip_local_deliver[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfbedb9",
          "lines": [
            "ip_rcv[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf01d60",
          "lines": [
            "__netif_receive_skb_one_core[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf01de4",
          "lines": [
            "__netif_receive_skb[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf0205d",
          "lines": [
            "process_backlog[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf02c1f",
          "lines": [
            "__napi_poll[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf03200",
          "lines": [
            "net_rx_action[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x109f37",
          "lines": [
            "handle_softirqs[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1244acf",
          "lines": [
            "__do_softirq[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x109c30",
          "lines": [
            "do_softirq.part.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10a331",
          "lines": [
            "__local_bh_enable_ip[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xeffb47",
          "lines": [
            "__dev_queue_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc2352",
          "lines": [
            "neigh_hh_output[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc2ba3",
          "lines": [
            "ip_finish_output2[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc3ae5",
          "lines": [
            "__ip_finish_output[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc3be8",
          "lines": [
            "ip_finish_output[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc3d4e",
          "lines": [
            "ip_output[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc53a0",
          "lines": [
            "ip_local_out[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc554d",
          "lines": [
            "__ip_queue_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc58c4",
          "lines": [
            "ip_queue_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfefc15",
          "lines": [
            "__tcp_transmit_skb[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xff0a07",
          "lines": [
            "__tcp_send_ack.part.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xff3ecb",
          "lines": [
            "tcp_send_ack[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd78b7",
          "lines": [
            "__tcp_cleanup_rbuf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd7955",
          "lines": [
            "tcp_cleanup_rbuf[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd8520",
          "lines": [
            "tcp_recvmsg_locked[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd9be3",
          "lines": [
            "tcp_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1085983",
          "lines": [
            "inet6_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec4852",
          "lines": [
            "sock_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec742a",
          "lines": [
            "__sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec7503",
          "lines": [
            "__x64_sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6fb7",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12bc19",
          "lines": [
            "__libc_recv[]@:0",
            "__libc_recv[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xb58e",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0xb58e[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(int, long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollChannel.doReadBytes(io.grpc.netty.shaded.io.netty.buffer.ByteBuf)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xad",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x87",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.processReady(io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x174",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12421a9",
          "lines": [
            "schedule_hrtimeout_range_clock[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12421e2",
          "lines": [
            "schedule_hrtimeout_range[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x555441",
          "lines": [
            "ep_poll[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55557a",
          "lines": [
            "do_epoll_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55623e",
          "lines": [
            "__x64_sys_epoll_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6d6e",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12a041",
          "lines": [
            "epoll_wait[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4c5f",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0x4c5f[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.Native.epollWait(int, long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.Native.epollWait(io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor, io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.Native.epollWait(io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor, io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.epollWaitNoTimerChange()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb9",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x511e01",
          "lines": [
            "__fdget[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec2d46",
          "lines": [
            "sockfd_lookup_light[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec73fa",
          "lines": [
            "__sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec7503",
          "lines": [
            "__x64_sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6fb7",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12bc19",
          "lines": [
            "__libc_recv[]@:0",
            "__libc_recv[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xb58e",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0xb58e[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(int, long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollChannel.doReadBytes(io.grpc.netty.shaded.io.netty.buffer.ByteBuf)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xad",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x87",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.processReady(io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x174",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xfd85bf",
          "lines": [
            "tcp_recvmsg_locked[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd9be3",
          "lines": [
            "tcp_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1085983",
          "lines": [
            "inet6_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec4852",
          "lines": [
            "sock_recvmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec742a",
          "lines": [
            "__sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec7503",
          "lines": [
            "__x64_sys_recvfrom[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6fb7",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12bc19",
          "lines": [
            "__libc_recv[]@:0",
            "__libc_recv[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xb58e",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0xb58e[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(int, long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.unix.Socket.recvAddress(long, int, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2b",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollChannel.doReadBytes(io.grpc.netty.shaded.io.netty.buffer.ByteBuf)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xad",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x87",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.processReady(io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x174",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x124212b",
          "lines": [
            "schedule_hrtimeout_range_clock[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12421e2",
          "lines": [
            "schedule_hrtimeout_range[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x555441",
          "lines": [
            "ep_poll[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x55557a",
          "lines": [
            "do_epoll_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5555be",
          "lines": [
            "do_epoll_pwait.part.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x555a77",
          "lines": [
            "__x64_sys_epoll_pwait2[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x72d2",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x129fa0",
          "lines": [
            "epoll_pwait2[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x5f83",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0x5f83[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "long io.grpc.netty.shaded.io.netty.channel.epoll.Native.epollWait0(int, long, int, int, int, int, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x34",
          "lines": [
            "long io.grpc.netty.shaded.io.netty.channel.epoll.Native.epollWait(io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor, io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventArray, io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor, int, int, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x57",
          "lines": [
            "long io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.epollWait(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc3",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x105b",
          "lines": [
            "__nf_ct_refresh_acct[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13c3",
          "lines": [
            "nf_conntrack_handle_packet[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x42c2",
          "lines": [
            "nf_conntrack_in[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8e77",
          "lines": [
            "ipv4_conntrack_local[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfb0be2",
          "lines": [
            "nf_hook_slow[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc52a8",
          "lines": [
            "__ip_local_out[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc535b",
          "lines": [
            "ip_local_out[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc554d",
          "lines": [
            "__ip_queue_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfc58c4",
          "lines": [
            "ip_queue_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfefc15",
          "lines": [
            "__tcp_transmit_skb[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xff167e",
          "lines": [
            "tcp_write_xmit[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xff1cd6",
          "lines": [
            "__tcp_push_pending_frames[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd6222",
          "lines": [
            "tcp_push[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd73f3",
          "lines": [
            "tcp_sendmsg_locked[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xfd77db",
          "lines": [
            "tcp_sendmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x10858e1",
          "lines": [
            "inet6_sendmsg[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xec5294",
          "lines": [
            "sock_write_iter[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e00e8",
          "lines": [
            "do_iter_readv_writev[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e1820",
          "lines": [
            "vfs_writev[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e1ae7",
          "lines": [
            "do_writev[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4e1b7b",
          "lines": [
            "__x64_sys_writev[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x70b6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x12989a",
          "lines": [
            "__GI___writev[]@:0",
            "__GI___writev[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x91b4",
          "lines": [
            "libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so 0x91b4[]@:0"
          ],
          "mapping": "0x0-0x12000@0x0 libio_grpc_netty_shaded_netty_transport_native_epoll_x86_6416171931862568438954.so(09eef3261d9b39d8a7cbdd47420c7c290e4e7410)"
        },
        {
          "address": "0x0",
          "lines": [
            "long io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor.writevAddresses(int, long, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6",
          "lines": [
            "long io.grpc.netty.shaded.io.netty.channel.unix.FileDescriptor.writevAddresses(long, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3d",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel.writeBytesMultiple(io.grpc.netty.shaded.io.netty.channel.ChannelOutboundBuffer, io.grpc.netty.shaded.io.netty.channel.unix.IovArray)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2d",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel.doWriteMultiple(io.grpc.netty.shaded.io.netty.channel.ChannelOutboundBuffer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollStreamChannel.doWrite(io.grpc.netty.shaded.io.netty.channel.ChannelOutboundBuffer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannel$AbstractUnsafe.flush0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xe",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.flush0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannel$AbstractUnsafe.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.DefaultChannelPipeline$HeadContext.flush(io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.flush(io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelPipeline io.grpc.netty.shaded.io.netty.channel.DefaultChannelPipeline.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.Channel io.grpc.netty.shaded.io.netty.channel.AbstractChannel.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue.access$000(io.grpc.netty.shaded.io.grpc.netty.WriteQueue)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.runTask(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.safeExecute(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x194",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelPromise io.grpc.netty.shaded.io.netty.channel.DefaultChannelPromise.addListener(io.grpc.netty.shaded.io.netty.util.concurrent.GenericFutureListener)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5f",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData.write(io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x6a",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState.writeAllocatedBytes(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor.write(io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2Stream, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State.write(int, io.grpc.netty.shaded.io.netty.handler.codec.http2.StreamByteDistributor$Writer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x15",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distribute(int, io.grpc.netty.shaded.io.netty.handler.codec.http2.StreamByteDistributor$Writer, io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb2",
          "lines": [
            "int io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distributeToChildren(int, io.grpc.netty.shaded.io.netty.handler.codec.http2.StreamByteDistributor$Writer, io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1c",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.handler.codec.http2.WeightedFairQueueByteDistributor.distribute(int, io.grpc.netty.shaded.io.netty.handler.codec.http2.StreamByteDistributor$Writer)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1e",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor.writePendingBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController.writePendingBytes()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.flush(io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x31",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x17",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.ChannelPipeline io.grpc.netty.shaded.io.netty.channel.DefaultChannelPipeline.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "io.grpc.netty.shaded.io.netty.channel.Channel io.grpc.netty.shaded.io.netty.channel.AbstractChannel.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x85",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue.flush()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue.access$000(io.grpc.netty.shaded.io.grpc.netty.WriteQueue)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.grpc.netty.WriteQueue$1.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.runTask(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.safeExecute(java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2a",
          "lines": [
            "boolean io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x194",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2c",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$4.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.internal.ThreadExecutorMap$2.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x4d4d38",
          "lines": [
            "PhaseOutput::BuildOopMaps()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd2113b",
          "lines": [
            "PhaseOutput::Output()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x672522",
          "lines": [
            "Compile::Code_Gen()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x676469",
          "lines": [
            "Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59b69e",
          "lines": [
            "C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67c173",
          "lines": [
            "CompileBroker::invoke_compiler_on_method(CompileTask*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67f0e3",
          "lines": [
            "CompileBroker::compiler_thread_loop()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xca2906",
          "lines": [
            "MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xca2aae",
          "lines": [
            "MethodLiveness::get_liveness_at(int)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x5dfc66",
          "lines": [
            "ciMethod::liveness_at_bci(int)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x88e7f5",
          "lines": [
            "GraphKit::kill_dead_locals()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x893c3f",
          "lines": [
            "GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x89da6d",
          "lines": [
            "GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59dfb1",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x765c87",
          "lines": [
            "Parse::do_call()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd34074",
          "lines": [
            "Parse::do_one_block()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd344b4",
          "lines": [
            "Parse::do_all_blocks()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd36c34",
          "lines": [
            "Parse::Parse(JVMState*, ciMethod*, float)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59c7ea",
          "lines": [
            "ParseGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59e1b8",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x765c87",
          "lines": [
            "Parse::do_call()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd34074",
          "lines": [
            "Parse::do_one_block()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd344b4",
          "lines": [
            "Parse::do_all_blocks()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd36c34",
          "lines": [
            "Parse::Parse(JVMState*, ciMethod*, float)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59c7ea",
          "lines": [
            "ParseGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59e1b8",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x765c87",
          "lines": [
            "Parse::do_call()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd34074",
          "lines": [
            "Parse::do_one_block()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd344b4",
          "lines": [
            "Parse::do_all_blocks()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd36c34",
          "lines": [
            "Parse::Parse(JVMState*, ciMethod*, float)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59c7ea",
          "lines": [
            "ParseGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59e1b8",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59e1b8",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x765c87",
          "lines": [
            "Parse::do_call()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd34074",
          "lines": [
            "Parse::do_one_block()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd344b4",
          "lines": [
            "Parse::do_all_blocks()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd36c34",
          "lines": [
            "Parse::Parse(JVMState*, ciMethod*, float)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59c7ea",
          "lines": [
            "ParseGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59e1b8",
          "lines": [
            "PredictedCallGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x765c87",
          "lines": [
            "Parse::do_call()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd34074",
          "lines": [
            "Parse::do_one_block()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd344b4",
          "lines": [
            "Parse::do_all_blocks()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd36c34",
          "lines": [
            "Parse::Parse(JVMState*, ciMethod*, float)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59c7ea",
          "lines": [
            "ParseGenerator::generate(JVMState*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x675c85",
          "lines": [
            "Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59b69e",
          "lines": [
            "C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67c173",
          "lines": [
            "CompileBroker::invoke_compiler_on_method(CompileTask*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67f0e3",
          "lines": [
            "CompileBroker::compiler_thread_loop()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb92de7",
          "lines": [
            "PhaseLive::compute(unsigned int)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x5c9bd2",
          "lines": [
            "PhaseChaitin::Register_Allocate()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x672278",
          "lines": [
            "Compile::Code_Gen()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x676469",
          "lines": [
            "Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59b69e",
          "lines": [
            "C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67c173",
          "lines": [
            "CompileBroker::invoke_compiler_on_method(CompileTask*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67f0e3",
          "lines": [
            "CompileBroker::compiler_thread_loop()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xd51e08",
          "lines": [
            "PhaseIterGVN::add_users_to_worklist0(Node*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd5205e",
          "lines": [
            "PhaseIterGVN::add_users_to_worklist(Node*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd55d40",
          "lines": [
            "PhaseIterGVN::PhaseIterGVN(PhaseGVN*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67382c",
          "lines": [
            "Compile::Optimize()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x675e41",
          "lines": [
            "Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59b69e",
          "lines": [
            "C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67c173",
          "lines": [
            "CompileBroker::invoke_compiler_on_method(CompileTask*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67f0e3",
          "lines": [
            "CompileBroker::compiler_thread_loop()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xd99fe4",
          "lines": [
            "RegMask::is_misaligned_pair() const[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x5c3f28",
          "lines": [
            "PhaseChaitin::gather_lrg_masks(bool)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x5c9bc3",
          "lines": [
            "PhaseChaitin::Register_Allocate()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x672278",
          "lines": [
            "Compile::Code_Gen()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x676469",
          "lines": [
            "Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x59b69e",
          "lines": [
            "C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67c173",
          "lines": [
            "CompileBroker::invoke_compiler_on_method(CompileTask*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x67f0e3",
          "lines": [
            "CompileBroker::compiler_thread_loop()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc8",
          "lines": [
            "java.lang.Object java.util.concurrent.LinkedTransferQueue$DualNode.await(java.lang.Object, long, java.lang.Object, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xdf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue$Transferer.xferLifo(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.xfer(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.poll(long, java.util.concurrent.TimeUnit)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x84",
          "lines": [
            "java.lang.Runnable java.util.concurrent.ThreadPoolExecutor.getTask()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x17834",
          "lines": [
            "__tls_get_addr[]@:0"
          ],
          "mapping": "0x1000-0x2c000@0x1000 ld-linux-x86-64.so.2(353e1b6cb0eebc08cf3ff812eae8a51b4efd684e)"
        },
        {
          "address": "0xf8035e",
          "lines": [
            "FastThreadsListHandle::FastThreadsListHandle(oopDesc*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb1d24",
          "lines": [
            "Unsafe_Unpark[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.unpark(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x16",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1d",
          "lines": [
            "boolean kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xb3",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x18",
          "lines": [
            "void kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler, java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean, int, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x69",
          "lines": [
            "void kotlinx.coroutines.DispatchedTaskKt.dispatch(kotlinx.coroutines.DispatchedTask, int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xd",
          "lines": [
            "void kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(int)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x24",
          "lines": [
            "void kotlinx.coroutines.CancellableContinuationImpl.completeResume(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "boolean kotlinx.coroutines.channels.BufferedChannelKt.tryResume0(kotlinx.coroutines.CancellableContinuation, java.lang.Object, kotlin.jvm.functions.Function1)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x3",
          "lines": [
            "boolean kotlinx.coroutines.channels.BufferedChannelKt.access$tryResume0(kotlinx.coroutines.CancellableContinuation, java.lang.Object, kotlin.jvm.functions.Function1)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x33",
          "lines": [
            "boolean kotlinx.coroutines.channels.BufferedChannel$BufferedChannelIterator.tryResumeHasNext(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77",
          "lines": [
            "boolean kotlinx.coroutines.channels.BufferedChannel.tryResumeReceiver(java.lang.Object, java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x62",
          "lines": [
            "int kotlinx.coroutines.channels.BufferedChannel.updateCellSend(kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, java.lang.Object, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xa",
          "lines": [
            "int kotlinx.coroutines.channels.BufferedChannel.access$updateCellSend(kotlinx.coroutines.channels.BufferedChannel, kotlinx.coroutines.channels.ChannelSegment, int, java.lang.Object, long, java.lang.Object, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98",
          "lines": [
            "java.lang.Object kotlinx.coroutines.channels.BufferedChannel.trySend-JP2dKIU(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void io.grpc.kotlin.ClientCalls$rpcImpl$1$1$1.onMessage(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void io.grpc.ForwardingClientCallListener.onMessage(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x8c",
          "lines": [
            "void com.intellij.execution.process.mediator.client.grpc.LoggingClientInterceptor$interceptCall$1$start$listener$1.onMessage(java.lang.Object)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x35",
          "lines": [
            "void io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1MessagesAvailable.runInternal()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1MessagesAvailable.runInContext()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x9",
          "lines": [
            "void io.grpc.internal.ContextRunnable.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1f",
          "lines": [
            "void io.grpc.internal.SerializingExecutor.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x985df",
          "lines": [
            "__GI___pthread_disable_asynccancel[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x98d6b",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xc8",
          "lines": [
            "java.lang.Object java.util.concurrent.LinkedTransferQueue$DualNode.await(java.lang.Object, long, java.lang.Object, boolean)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xdf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue$Transferer.xferLifo(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1b",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.xfer(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xf",
          "lines": [
            "java.lang.Object java.util.concurrent.SynchronousQueue.poll(long, java.util.concurrent.TimeUnit)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x84",
          "lines": [
            "java.lang.Runnable java.util.concurrent.ThreadPoolExecutor.getTask()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x1a",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x0",
          "lines": [
            "void io.grpc.internal.SerializingExecutor.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5c",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.util.concurrent.ThreadPoolExecutor$Worker.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xb03",
          "lines": [
            "linux-vdso.1.so 0xb03[]@:0"
          ],
          "mapping": "0x0-0x2000@0x0 linux-vdso.1.so()"
        },
        {
          "address": "0xec96c",
          "lines": [
            "__GI___clock_gettime[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13205",
          "lines": [
            "os::javaTimeNanos()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x1a",
          "lines": [
            "boolean java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.canReacquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x41",
          "lines": [
            "long java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x86",
          "lines": [
            "java.util.concurrent.Delayed java.util.concurrent.DelayQueue.take()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x14",
          "lines": [
            "void javax.swing.TimerQueue.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x5",
          "lines": [
            "void java.lang.Thread.runWith(java.lang.Object, java.lang.Runnable)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x13",
          "lines": [
            "void java.lang.Thread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x14fc68",
          "lines": [
            "finish_task_switch.isra.0[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123a9f3",
          "lines": [
            "__schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x123ae62",
          "lines": [
            "schedule[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2256d3",
          "lines": [
            "futex_wait_queue[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225eb4",
          "lines": [
            "__futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x225fb3",
          "lines": [
            "futex_wait[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x221c84",
          "lines": [
            "do_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x222549",
          "lines": [
            "__x64_sys_futex[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x71a6",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x98d60",
          "lines": [
            "__futex_abstimed_wait_common64[]@:0",
            "__futex_abstimed_wait_common[]@:0",
            "__GI___futex_abstimed_wait_cancelable64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x9bc7d",
          "lines": [
            "__pthread_cond_wait_common[]@:0",
            "___pthread_cond_timedwait64[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xd13ed3",
          "lines": [
            "Parker::park(bool, long)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xfb3a20",
          "lines": [
            "Unsafe_Park[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x0",
          "lines": [
            "void jdk.internal.misc.Unsafe.park(boolean, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x22",
          "lines": [
            "void java.util.concurrent.locks.LockSupport.parkNanos(java.lang.Object, long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x7c",
          "lines": [
            "long java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(long)[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x86",
          "lines": [
            "java.util.concurrent.Delayed java.util.concurrent.DelayQueue.take()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x4",
          "lines": [
            "void com.intellij.util.concurrency.AppDelayQueue$TransferThread.run()[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x2e6a730ee9809163",
          "lines": [
            "StubRoutines (initial stubs) [call_stub_return_address][]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x914ac4",
          "lines": [
            "JavaCalls::call_helper(JavaValue*, methodHandle const\u0026, JavaCallArguments*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x91640a",
          "lines": [
            "JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9e6349",
          "lines": [
            "thread_entry(JavaThread*, JavaThread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x92b43e",
          "lines": [
            "JavaThread::thread_main_inner()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xf7b3b7",
          "lines": [
            "Thread::call_run()[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0xd072c9",
          "lines": [
            "thread_native_entry(Thread*)[]@:0"
          ],
          "mapping": "0x2a3000-0x1117000@0x2a3000 libjvm.so(fc8db56dfc04ddf9c6df46d36024c336b73608bf)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x107faf8",
          "lines": [
            "iris_dri.so 0x107faf8[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x10802b2",
          "lines": [
            "iris_dri.so 0x10802b2[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x1091273",
          "lines": [
            "iris_dri.so 0x1091273[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x149f43d",
          "lines": [
            "iris_dri.so 0x149f43d[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x691126",
          "lines": [
            "iris_dri.so 0x691126[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x68a2fd",
          "lines": [
            "iris_dri.so 0x68a2fd[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0xfcb60",
          "lines": [
            "iris_dri.so 0xfcb60[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x11d6db",
          "lines": [
            "iris_dri.so 0x11d6db[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1094724",
          "lines": [
            "iris_dri.so 0x1094724[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x149f43d",
          "lines": [
            "iris_dri.so 0x149f43d[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x691126",
          "lines": [
            "iris_dri.so 0x691126[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x68a2fd",
          "lines": [
            "iris_dri.so 0x68a2fd[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0xfcb60",
          "lines": [
            "iris_dri.so 0xfcb60[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x11d6db",
          "lines": [
            "iris_dri.so 0x11d6db[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129c3b",
          "lines": [
            "__clone3[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x114c8b",
          "lines": [
            "XaceHook[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x8c36e",
          "lines": [
            "dixLookupResourceByType[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x140e37",
          "lines": [
            "Xorg 0x140e37[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x689350",
          "lines": [
            "iris_dri.so 0x689350[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x19c41a",
          "lines": [
            "iris_dri.so 0x19c41a[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x16818",
          "lines": [
            "libglamoregl.so 0x16818[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x16bc2",
          "lines": [
            "libglamoregl.so 0x16bc2[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x173a2",
          "lines": [
            "libglamoregl.so 0x173a2[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x18bf8",
          "lines": [
            "libglamoregl.so 0x18bf8[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x14b73c",
          "lines": [
            "Xorg 0x14b73c[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x141792",
          "lines": [
            "Xorg 0x141792[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x13c6a2",
          "lines": [
            "CompositePicture[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x141792",
          "lines": [
            "Xorg 0x141792[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x15ac7",
          "lines": [
            "libglamoregl.so 0x15ac7[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x17315",
          "lines": [
            "libglamoregl.so 0x17315[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x18bf8",
          "lines": [
            "libglamoregl.so 0x18bf8[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x14b73c",
          "lines": [
            "Xorg 0x14b73c[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x141792",
          "lines": [
            "Xorg 0x141792[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x75991",
          "lines": [
            "eb_validate_vmas[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x77bb0",
          "lines": [
            "i915_gem_do_execbuffer[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x78b59",
          "lines": [
            "i915_gem_execbuffer2_ioctl[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xca3798",
          "lines": [
            "drm_ioctl_kernel[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0xca3ae3",
          "lines": [
            "drm_ioctl[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x501d4f",
          "lines": [
            "__x64_sys_ioctl[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x68fa",
          "lines": [
            "x64_sys_call[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x122326e",
          "lines": [
            "do_syscall_64[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x140012f",
          "lines": [
            "entry_SYSCALL_64_after_hwframe[]@:0"
          ],
          "mapping": "0x0-0x0@0x0 ()"
        },
        {
          "address": "0x124dec",
          "lines": [
            "__GI___ioctl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x1002d80",
          "lines": [
            "iris_dri.so 0x1002d80[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x10059e9",
          "lines": [
            "iris_dri.so 0x10059e9[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0xff1f96",
          "lines": [
            "iris_dri.so 0xff1f96[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x69309d",
          "lines": [
            "iris_dri.so 0x69309d[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x16f156",
          "lines": [
            "iris_dri.so 0x16f156[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0xa65c",
          "lines": [
            "libglamoregl.so 0xa65c[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0xd23a",
          "lines": [
            "modesetting_drv.so 0xd23a[]@:0"
          ],
          "mapping": "0x6000-0x18000@0x6000 modesetting_drv.so(94d376610512d9e97ca903e7eb7370777399d5e1)"
        },
        {
          "address": "0x678cc",
          "lines": [
            "BlockHandler[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x1db1bf",
          "lines": [
            "WaitForSomething[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x627e9",
          "lines": [
            "Xorg 0x627e9[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1e9017",
          "lines": [
            "Xorg 0x1e9017[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x1e08d7",
          "lines": [
            "ReadRequestFromClient[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x629ba",
          "lines": [
            "Xorg 0x629ba[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0xad79f",
          "lines": [
            "tcache_get_n[]@:0",
            "tcache_get[]@:0",
            "__GI___libc_malloc[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x87f40",
          "lines": [
            "RegionCreate[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x8a005",
          "lines": [
            "RegionFromRects[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x13bf3c",
          "lines": [
            "SetPictureClipRects[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x13efb7",
          "lines": [
            "Xorg 0x13efb7[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x136362",
          "lines": [
            "iris_dri.so 0x136362[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x13687c",
          "lines": [
            "iris_dri.so 0x13687c[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x313125",
          "lines": [
            "iris_dri.so 0x313125[]@:0"
          ],
          "mapping": "0x97000-0x14ad000@0x97000 iris_dri.so(c8d5f77d3463c08ca05e78e1e4ab4eb4132711f5)"
        },
        {
          "address": "0x100ef",
          "lines": [
            "libglamoregl.so 0x100ef[]@:0"
          ],
          "mapping": "0x7000-0x29000@0x7000 libglamoregl.so(88b3a3aedfc6ce3999590188e8b56aca4660d3d5)"
        },
        {
          "address": "0x14bb06",
          "lines": [
            "Xorg 0x14bb06[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x13f976",
          "lines": [
            "Xorg 0x13f976[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x62ab3",
          "lines": [
            "Xorg 0x62ab3[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x66e51",
          "lines": [
            "Xorg 0x66e51[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        },
        {
          "address": "0x2a1c9",
          "lines": [
            "__libc_start_call_main[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x2a28a",
          "lines": [
            "__libc_start_main_impl[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x4f394",
          "lines": [
            "_start[]@:0"
          ],
          "mapping": "0x40000-0x1f2000@0x40000 Xorg(d24be32ee2cbc01f6455c8e4ef8a4eb09e85ff4e)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x484cb",
          "lines": [
            "libGLdispatch.so.0.0.0 0x484cb[]@:0"
          ],
          "mapping": "0x41000-0x80000@0x41000 libGLdispatch.so.0.0.0(4ee95626201c900afa8af1cb3e983f1405d85d3c)"
        }
      ],
      "values": "50000000"
    },
    {
      "locations": [
        {
          "address": "0x1aac76",
          "lines": [
            "_mm_cmpistri[]@:0",
            "__strspn_sse42[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0xb5c2c",
          "lines": [
            "__GI___strtok_r[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x3246730",
          "lines": [
            "libxul.so 0x3246730[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x3246290",
          "lines": [
            "libxul.so 0x3246290[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x322696b",
          "lines": [
            "libxul.so 0x322696b[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x2af6785",
          "lines": [
            "libxul.so 0x2af6785[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x2a5ecf8",
          "lines": [
            "libxul.so 0x2a5ecf8[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x2a5d620",
          "lines": [
            "libxul.so 0x2a5d620[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x2a83c8d",
          "lines": [
            "libxul.so 0x2a83c8d[]@:0"
          ],
          "mapping": "0x2995000-0x8ddb000@0x2994000 libxul.so(ed82595fe72c9215b49e7e2cb2f85ea9269c1a61)"
        },
        {
          "address": "0x197a1",
          "lines": [
            "libnspr4.so 0x197a1[]@:0"
          ],
          "mapping": "0x12000-0x35000@0x11000 libnspr4.so(caa869f624148b1ec093de72d7992781a5411334)"
        },
        {
          "address": "0x5dd1f",
          "lines": [
            "firefox-bin 0x5dd1f[]@:0"
          ],
          "mapping": "0x23000-0xdc000@0x22000 firefox-bin(97e2d250255a9735edaa1ab1a4a1d125ec2f7d26)"
        },
        {
          "address": "0x9ca93",
          "lines": [
            "start_thread[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        },
        {
          "address": "0x129a33",
          "lines": [
            "__clone[]@:0"
          ],
          "mapping": "0x28000-0x1b0000@0x28000 libc.so.6(6d64b17fbac799e68da7ebd9985ddf9b5cb375e6)"
        }
      ],
      "values": "50000000"
    }
  ],
  "period": "1000000000"
}