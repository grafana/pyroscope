// Code generated by mockery. DO NOT EDIT.

package mockdistributor

import (
	placement "github.com/grafana/pyroscope/pkg/experiment/distributor/placement"
	mock "github.com/stretchr/testify/mock"
)

// MockLimits is an autogenerated mock type for the Limits type
type MockLimits struct {
	mock.Mock
}

type MockLimits_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLimits) EXPECT() *MockLimits_Expecter {
	return &MockLimits_Expecter{mock: &_m.Mock}
}

// PlacementPolicy provides a mock function with given fields: _a0
func (_m *MockLimits) PlacementPolicy(_a0 placement.Key) placement.Policy {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PlacementPolicy")
	}

	var r0 placement.Policy
	if rf, ok := ret.Get(0).(func(placement.Key) placement.Policy); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(placement.Policy)
	}

	return r0
}

// MockLimits_PlacementPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlacementPolicy'
type MockLimits_PlacementPolicy_Call struct {
	*mock.Call
}

// PlacementPolicy is a helper method to define mock.On call
//   - _a0 placement.Key
func (_e *MockLimits_Expecter) PlacementPolicy(_a0 interface{}) *MockLimits_PlacementPolicy_Call {
	return &MockLimits_PlacementPolicy_Call{Call: _e.mock.On("PlacementPolicy", _a0)}
}

func (_c *MockLimits_PlacementPolicy_Call) Run(run func(_a0 placement.Key)) *MockLimits_PlacementPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(placement.Key))
	})
	return _c
}

func (_c *MockLimits_PlacementPolicy_Call) Return(_a0 placement.Policy) *MockLimits_PlacementPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimits_PlacementPolicy_Call) RunAndReturn(run func(placement.Key) placement.Policy) *MockLimits_PlacementPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLimits creates a new instance of MockLimits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLimits(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLimits {
	mock := &MockLimits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
