// Code generated by mockery. DO NOT EDIT.

package mockadaptive_placement

import (
	context "context"

	adaptive_placementpb "github.com/grafana/pyroscope/pkg/experiment/distributor/placement/adaptive_placement/adaptive_placementpb"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// LoadRules provides a mock function with given fields: _a0
func (_m *MockStore) LoadRules(_a0 context.Context) (*adaptive_placementpb.PlacementRules, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadRules")
	}

	var r0 *adaptive_placementpb.PlacementRules
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*adaptive_placementpb.PlacementRules, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *adaptive_placementpb.PlacementRules); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adaptive_placementpb.PlacementRules)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_LoadRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRules'
type MockStore_LoadRules_Call struct {
	*mock.Call
}

// LoadRules is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockStore_Expecter) LoadRules(_a0 interface{}) *MockStore_LoadRules_Call {
	return &MockStore_LoadRules_Call{Call: _e.mock.On("LoadRules", _a0)}
}

func (_c *MockStore_LoadRules_Call) Run(run func(_a0 context.Context)) *MockStore_LoadRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_LoadRules_Call) Return(_a0 *adaptive_placementpb.PlacementRules, _a1 error) *MockStore_LoadRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_LoadRules_Call) RunAndReturn(run func(context.Context) (*adaptive_placementpb.PlacementRules, error)) *MockStore_LoadRules_Call {
	_c.Call.Return(run)
	return _c
}

// LoadStats provides a mock function with given fields: _a0
func (_m *MockStore) LoadStats(_a0 context.Context) (*adaptive_placementpb.DistributionStats, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadStats")
	}

	var r0 *adaptive_placementpb.DistributionStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*adaptive_placementpb.DistributionStats, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *adaptive_placementpb.DistributionStats); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*adaptive_placementpb.DistributionStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_LoadStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadStats'
type MockStore_LoadStats_Call struct {
	*mock.Call
}

// LoadStats is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockStore_Expecter) LoadStats(_a0 interface{}) *MockStore_LoadStats_Call {
	return &MockStore_LoadStats_Call{Call: _e.mock.On("LoadStats", _a0)}
}

func (_c *MockStore_LoadStats_Call) Run(run func(_a0 context.Context)) *MockStore_LoadStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStore_LoadStats_Call) Return(_a0 *adaptive_placementpb.DistributionStats, _a1 error) *MockStore_LoadStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_LoadStats_Call) RunAndReturn(run func(context.Context) (*adaptive_placementpb.DistributionStats, error)) *MockStore_LoadStats_Call {
	_c.Call.Return(run)
	return _c
}

// StoreRules provides a mock function with given fields: _a0, _a1
func (_m *MockStore) StoreRules(_a0 context.Context, _a1 *adaptive_placementpb.PlacementRules) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StoreRules")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *adaptive_placementpb.PlacementRules) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_StoreRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreRules'
type MockStore_StoreRules_Call struct {
	*mock.Call
}

// StoreRules is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *adaptive_placementpb.PlacementRules
func (_e *MockStore_Expecter) StoreRules(_a0 interface{}, _a1 interface{}) *MockStore_StoreRules_Call {
	return &MockStore_StoreRules_Call{Call: _e.mock.On("StoreRules", _a0, _a1)}
}

func (_c *MockStore_StoreRules_Call) Run(run func(_a0 context.Context, _a1 *adaptive_placementpb.PlacementRules)) *MockStore_StoreRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*adaptive_placementpb.PlacementRules))
	})
	return _c
}

func (_c *MockStore_StoreRules_Call) Return(_a0 error) *MockStore_StoreRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_StoreRules_Call) RunAndReturn(run func(context.Context, *adaptive_placementpb.PlacementRules) error) *MockStore_StoreRules_Call {
	_c.Call.Return(run)
	return _c
}

// StoreStats provides a mock function with given fields: _a0, _a1
func (_m *MockStore) StoreStats(_a0 context.Context, _a1 *adaptive_placementpb.DistributionStats) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StoreStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *adaptive_placementpb.DistributionStats) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_StoreStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreStats'
type MockStore_StoreStats_Call struct {
	*mock.Call
}

// StoreStats is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *adaptive_placementpb.DistributionStats
func (_e *MockStore_Expecter) StoreStats(_a0 interface{}, _a1 interface{}) *MockStore_StoreStats_Call {
	return &MockStore_StoreStats_Call{Call: _e.mock.On("StoreStats", _a0, _a1)}
}

func (_c *MockStore_StoreStats_Call) Run(run func(_a0 context.Context, _a1 *adaptive_placementpb.DistributionStats)) *MockStore_StoreStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*adaptive_placementpb.DistributionStats))
	})
	return _c
}

func (_c *MockStore_StoreStats_Call) Return(_a0 error) *MockStore_StoreStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_StoreStats_Call) RunAndReturn(run func(context.Context, *adaptive_placementpb.DistributionStats) error) *MockStore_StoreStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
