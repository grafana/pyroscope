// Code generated by mockery. DO NOT EDIT.

package mockdlq

import (
	context "context"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockLocalServer is an autogenerated mock type for the LocalServer type
type MockLocalServer struct {
	mock.Mock
}

type MockLocalServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalServer) EXPECT() *MockLocalServer_Expecter {
	return &MockLocalServer_Expecter{mock: &_m.Mock}
}

// AddRecoveredBlock provides a mock function with given fields: _a0, _a1
func (_m *MockLocalServer) AddRecoveredBlock(_a0 context.Context, _a1 *metastorev1.AddBlockRequest) (*metastorev1.AddBlockResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddRecoveredBlock")
	}

	var r0 *metastorev1.AddBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.AddBlockRequest) (*metastorev1.AddBlockResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.AddBlockRequest) *metastorev1.AddBlockResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.AddBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.AddBlockRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalServer_AddRecoveredBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecoveredBlock'
type MockLocalServer_AddRecoveredBlock_Call struct {
	*mock.Call
}

// AddRecoveredBlock is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metastorev1.AddBlockRequest
func (_e *MockLocalServer_Expecter) AddRecoveredBlock(_a0 interface{}, _a1 interface{}) *MockLocalServer_AddRecoveredBlock_Call {
	return &MockLocalServer_AddRecoveredBlock_Call{Call: _e.mock.On("AddRecoveredBlock", _a0, _a1)}
}

func (_c *MockLocalServer_AddRecoveredBlock_Call) Run(run func(_a0 context.Context, _a1 *metastorev1.AddBlockRequest)) *MockLocalServer_AddRecoveredBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metastorev1.AddBlockRequest))
	})
	return _c
}

func (_c *MockLocalServer_AddRecoveredBlock_Call) Return(_a0 *metastorev1.AddBlockResponse, _a1 error) *MockLocalServer_AddRecoveredBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalServer_AddRecoveredBlock_Call) RunAndReturn(run func(context.Context, *metastorev1.AddBlockRequest) (*metastorev1.AddBlockResponse, error)) *MockLocalServer_AddRecoveredBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocalServer creates a new instance of MockLocalServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalServer {
	mock := &MockLocalServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
