// Code generated by mockery. DO NOT EDIT.

package mockobjstore

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	objstore "github.com/thanos-io/objstore"

	pkgobjstore "github.com/grafana/pyroscope/pkg/objstore"
)

// MockBucket is an autogenerated mock type for the Bucket type
type MockBucket struct {
	mock.Mock
}

type MockBucket_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBucket) EXPECT() *MockBucket_Expecter {
	return &MockBucket_Expecter{mock: &_m.Mock}
}

// Attributes provides a mock function with given fields: ctx, name
func (_m *MockBucket) Attributes(ctx context.Context, name string) (objstore.ObjectAttributes, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Attributes")
	}

	var r0 objstore.ObjectAttributes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (objstore.ObjectAttributes, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) objstore.ObjectAttributes); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(objstore.ObjectAttributes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_Attributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attributes'
type MockBucket_Attributes_Call struct {
	*mock.Call
}

// Attributes is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBucket_Expecter) Attributes(ctx interface{}, name interface{}) *MockBucket_Attributes_Call {
	return &MockBucket_Attributes_Call{Call: _e.mock.On("Attributes", ctx, name)}
}

func (_c *MockBucket_Attributes_Call) Run(run func(ctx context.Context, name string)) *MockBucket_Attributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_Attributes_Call) Return(_a0 objstore.ObjectAttributes, _a1 error) *MockBucket_Attributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_Attributes_Call) RunAndReturn(run func(context.Context, string) (objstore.ObjectAttributes, error)) *MockBucket_Attributes_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockBucket) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBucket_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBucket_Expecter) Close() *MockBucket_Close_Call {
	return &MockBucket_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBucket_Close_Call) Run(run func()) *MockBucket_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBucket_Close_Call) Return(_a0 error) *MockBucket_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Close_Call) RunAndReturn(run func() error) *MockBucket_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name
func (_m *MockBucket) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBucket_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBucket_Expecter) Delete(ctx interface{}, name interface{}) *MockBucket_Delete_Call {
	return &MockBucket_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockBucket_Delete_Call) Run(run func(ctx context.Context, name string)) *MockBucket_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_Delete_Call) Return(_a0 error) *MockBucket_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockBucket_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, name
func (_m *MockBucket) Exists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockBucket_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBucket_Expecter) Exists(ctx interface{}, name interface{}) *MockBucket_Exists_Call {
	return &MockBucket_Exists_Call{Call: _e.mock.On("Exists", ctx, name)}
}

func (_c *MockBucket_Exists_Call) Run(run func(ctx context.Context, name string)) *MockBucket_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_Exists_Call) Return(_a0 bool, _a1 error) *MockBucket_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_Exists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockBucket_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockBucket) Get(ctx context.Context, name string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBucket_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockBucket_Expecter) Get(ctx interface{}, name interface{}) *MockBucket_Get_Call {
	return &MockBucket_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockBucket_Get_Call) Run(run func(ctx context.Context, name string)) *MockBucket_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_Get_Call) Return(_a0 io.ReadCloser, _a1 error) *MockBucket_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_Get_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *MockBucket_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRange provides a mock function with given fields: ctx, name, off, length
func (_m *MockBucket) GetRange(ctx context.Context, name string, off int64, length int64) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name, off, length)

	if len(ret) == 0 {
		panic("no return value specified for GetRange")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) (io.ReadCloser, error)); ok {
		return rf(ctx, name, off, length)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) io.ReadCloser); ok {
		r0 = rf(ctx, name, off, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, name, off, length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_GetRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRange'
type MockBucket_GetRange_Call struct {
	*mock.Call
}

// GetRange is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - off int64
//   - length int64
func (_e *MockBucket_Expecter) GetRange(ctx interface{}, name interface{}, off interface{}, length interface{}) *MockBucket_GetRange_Call {
	return &MockBucket_GetRange_Call{Call: _e.mock.On("GetRange", ctx, name, off, length)}
}

func (_c *MockBucket_GetRange_Call) Run(run func(ctx context.Context, name string, off int64, length int64)) *MockBucket_GetRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockBucket_GetRange_Call) Return(_a0 io.ReadCloser, _a1 error) *MockBucket_GetRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_GetRange_Call) RunAndReturn(run func(context.Context, string, int64, int64) (io.ReadCloser, error)) *MockBucket_GetRange_Call {
	_c.Call.Return(run)
	return _c
}

// IsAccessDeniedErr provides a mock function with given fields: err
func (_m *MockBucket) IsAccessDeniedErr(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsAccessDeniedErr")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBucket_IsAccessDeniedErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAccessDeniedErr'
type MockBucket_IsAccessDeniedErr_Call struct {
	*mock.Call
}

// IsAccessDeniedErr is a helper method to define mock.On call
//   - err error
func (_e *MockBucket_Expecter) IsAccessDeniedErr(err interface{}) *MockBucket_IsAccessDeniedErr_Call {
	return &MockBucket_IsAccessDeniedErr_Call{Call: _e.mock.On("IsAccessDeniedErr", err)}
}

func (_c *MockBucket_IsAccessDeniedErr_Call) Run(run func(err error)) *MockBucket_IsAccessDeniedErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockBucket_IsAccessDeniedErr_Call) Return(_a0 bool) *MockBucket_IsAccessDeniedErr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_IsAccessDeniedErr_Call) RunAndReturn(run func(error) bool) *MockBucket_IsAccessDeniedErr_Call {
	_c.Call.Return(run)
	return _c
}

// IsObjNotFoundErr provides a mock function with given fields: err
func (_m *MockBucket) IsObjNotFoundErr(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsObjNotFoundErr")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockBucket_IsObjNotFoundErr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsObjNotFoundErr'
type MockBucket_IsObjNotFoundErr_Call struct {
	*mock.Call
}

// IsObjNotFoundErr is a helper method to define mock.On call
//   - err error
func (_e *MockBucket_Expecter) IsObjNotFoundErr(err interface{}) *MockBucket_IsObjNotFoundErr_Call {
	return &MockBucket_IsObjNotFoundErr_Call{Call: _e.mock.On("IsObjNotFoundErr", err)}
}

func (_c *MockBucket_IsObjNotFoundErr_Call) Run(run func(err error)) *MockBucket_IsObjNotFoundErr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockBucket_IsObjNotFoundErr_Call) Return(_a0 bool) *MockBucket_IsObjNotFoundErr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_IsObjNotFoundErr_Call) RunAndReturn(run func(error) bool) *MockBucket_IsObjNotFoundErr_Call {
	_c.Call.Return(run)
	return _c
}

// Iter provides a mock function with given fields: ctx, dir, f, options
func (_m *MockBucket) Iter(ctx context.Context, dir string, f func(string) error, options ...objstore.IterOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dir, f)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Iter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string) error, ...objstore.IterOption) error); ok {
		r0 = rf(ctx, dir, f, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_Iter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Iter'
type MockBucket_Iter_Call struct {
	*mock.Call
}

// Iter is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
//   - f func(string) error
//   - options ...objstore.IterOption
func (_e *MockBucket_Expecter) Iter(ctx interface{}, dir interface{}, f interface{}, options ...interface{}) *MockBucket_Iter_Call {
	return &MockBucket_Iter_Call{Call: _e.mock.On("Iter",
		append([]interface{}{ctx, dir, f}, options...)...)}
}

func (_c *MockBucket_Iter_Call) Run(run func(ctx context.Context, dir string, f func(string) error, options ...objstore.IterOption)) *MockBucket_Iter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]objstore.IterOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(objstore.IterOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(func(string) error), variadicArgs...)
	})
	return _c
}

func (_c *MockBucket_Iter_Call) Return(_a0 error) *MockBucket_Iter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Iter_Call) RunAndReturn(run func(context.Context, string, func(string) error, ...objstore.IterOption) error) *MockBucket_Iter_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockBucket) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBucket_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockBucket_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockBucket_Expecter) Name() *MockBucket_Name_Call {
	return &MockBucket_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockBucket_Name_Call) Run(run func()) *MockBucket_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBucket_Name_Call) Return(_a0 string) *MockBucket_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Name_Call) RunAndReturn(run func() string) *MockBucket_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReaderAt provides a mock function with given fields: ctx, filename
func (_m *MockBucket) ReaderAt(ctx context.Context, filename string) (pkgobjstore.ReaderAtCloser, error) {
	ret := _m.Called(ctx, filename)

	if len(ret) == 0 {
		panic("no return value specified for ReaderAt")
	}

	var r0 pkgobjstore.ReaderAtCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pkgobjstore.ReaderAtCloser, error)); ok {
		return rf(ctx, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pkgobjstore.ReaderAtCloser); ok {
		r0 = rf(ctx, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pkgobjstore.ReaderAtCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_ReaderAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReaderAt'
type MockBucket_ReaderAt_Call struct {
	*mock.Call
}

// ReaderAt is a helper method to define mock.On call
//   - ctx context.Context
//   - filename string
func (_e *MockBucket_Expecter) ReaderAt(ctx interface{}, filename interface{}) *MockBucket_ReaderAt_Call {
	return &MockBucket_ReaderAt_Call{Call: _e.mock.On("ReaderAt", ctx, filename)}
}

func (_c *MockBucket_ReaderAt_Call) Run(run func(ctx context.Context, filename string)) *MockBucket_ReaderAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_ReaderAt_Call) Return(_a0 pkgobjstore.ReaderAtCloser, _a1 error) *MockBucket_ReaderAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_ReaderAt_Call) RunAndReturn(run func(context.Context, string) (pkgobjstore.ReaderAtCloser, error)) *MockBucket_ReaderAt_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, name, r
func (_m *MockBucket) Upload(ctx context.Context, name string, r io.Reader) error {
	ret := _m.Called(ctx, name, r)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader) error); ok {
		r0 = rf(ctx, name, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockBucket_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - r io.Reader
func (_e *MockBucket_Expecter) Upload(ctx interface{}, name interface{}, r interface{}) *MockBucket_Upload_Call {
	return &MockBucket_Upload_Call{Call: _e.mock.On("Upload", ctx, name, r)}
}

func (_c *MockBucket_Upload_Call) Run(run func(ctx context.Context, name string, r io.Reader)) *MockBucket_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *MockBucket_Upload_Call) Return(_a0 error) *MockBucket_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Upload_Call) RunAndReturn(run func(context.Context, string, io.Reader) error) *MockBucket_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBucket creates a new instance of MockBucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBucket {
	mock := &MockBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
