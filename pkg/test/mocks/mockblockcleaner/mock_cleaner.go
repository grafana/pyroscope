// Code generated by mockery. DO NOT EDIT.

package mockblockcleaner

import mock "github.com/stretchr/testify/mock"

// MockCleaner is an autogenerated mock type for the Cleaner type
type MockCleaner struct {
	mock.Mock
}

type MockCleaner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleaner) EXPECT() *MockCleaner_Expecter {
	return &MockCleaner_Expecter{mock: &_m.Mock}
}

// AddBlock provides a mock function with given fields: shard, tenant, blockId, deletedTs
func (_m *MockCleaner) AddBlock(shard uint32, tenant string, blockId string, deletedTs int64) error {
	ret := _m.Called(shard, tenant, blockId, deletedTs)

	if len(ret) == 0 {
		panic("no return value specified for AddBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, string, string, int64) error); ok {
		r0 = rf(shard, tenant, blockId, deletedTs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCleaner_AddBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlock'
type MockCleaner_AddBlock_Call struct {
	*mock.Call
}

// AddBlock is a helper method to define mock.On call
//   - shard uint32
//   - tenant string
//   - blockId string
//   - deletedTs int64
func (_e *MockCleaner_Expecter) AddBlock(shard interface{}, tenant interface{}, blockId interface{}, deletedTs interface{}) *MockCleaner_AddBlock_Call {
	return &MockCleaner_AddBlock_Call{Call: _e.mock.On("AddBlock", shard, tenant, blockId, deletedTs)}
}

func (_c *MockCleaner_AddBlock_Call) Run(run func(shard uint32, tenant string, blockId string, deletedTs int64)) *MockCleaner_AddBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockCleaner_AddBlock_Call) Return(_a0 error) *MockCleaner_AddBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleaner_AddBlock_Call) RunAndReturn(run func(uint32, string, string, int64) error) *MockCleaner_AddBlock_Call {
	_c.Call.Return(run)
	return _c
}

// IsRemoved provides a mock function with given fields: blockId
func (_m *MockCleaner) IsRemoved(blockId string) bool {
	ret := _m.Called(blockId)

	if len(ret) == 0 {
		panic("no return value specified for IsRemoved")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(blockId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCleaner_IsRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRemoved'
type MockCleaner_IsRemoved_Call struct {
	*mock.Call
}

// IsRemoved is a helper method to define mock.On call
//   - blockId string
func (_e *MockCleaner_Expecter) IsRemoved(blockId interface{}) *MockCleaner_IsRemoved_Call {
	return &MockCleaner_IsRemoved_Call{Call: _e.mock.On("IsRemoved", blockId)}
}

func (_c *MockCleaner_IsRemoved_Call) Run(run func(blockId string)) *MockCleaner_IsRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCleaner_IsRemoved_Call) Return(_a0 bool) *MockCleaner_IsRemoved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCleaner_IsRemoved_Call) RunAndReturn(run func(string) bool) *MockCleaner_IsRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleaner creates a new instance of MockCleaner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleaner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleaner {
	mock := &MockCleaner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
