// Code generated by mockery. DO NOT EDIT.

package mockmetastorev1

import (
	context "context"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockTenantServiceServer is an autogenerated mock type for the TenantServiceServer type
type MockTenantServiceServer struct {
	mock.Mock
}

type MockTenantServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceServer) EXPECT() *MockTenantServiceServer_Expecter {
	return &MockTenantServiceServer_Expecter{mock: &_m.Mock}
}

// DeleteTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) DeleteTenant(_a0 context.Context, _a1 *metastorev1.DeleteTenantRequest) (*metastorev1.DeleteTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenant")
	}

	var r0 *metastorev1.DeleteTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.DeleteTenantRequest) (*metastorev1.DeleteTenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.DeleteTenantRequest) *metastorev1.DeleteTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.DeleteTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.DeleteTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantServiceServer_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantServiceServer_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metastorev1.DeleteTenantRequest
func (_e *MockTenantServiceServer_Expecter) DeleteTenant(_a0 interface{}, _a1 interface{}) *MockTenantServiceServer_DeleteTenant_Call {
	return &MockTenantServiceServer_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant", _a0, _a1)}
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) Run(run func(_a0 context.Context, _a1 *metastorev1.DeleteTenantRequest)) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metastorev1.DeleteTenantRequest))
	})
	return _c
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) Return(_a0 *metastorev1.DeleteTenantResponse, _a1 error) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) RunAndReturn(run func(context.Context, *metastorev1.DeleteTenantRequest) (*metastorev1.DeleteTenantResponse, error)) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenant(_a0 context.Context, _a1 *metastorev1.GetTenantRequest) (*metastorev1.GetTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *metastorev1.GetTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetTenantRequest) (*metastorev1.GetTenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetTenantRequest) *metastorev1.GetTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.GetTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.GetTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantServiceServer_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantServiceServer_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metastorev1.GetTenantRequest
func (_e *MockTenantServiceServer_Expecter) GetTenant(_a0 interface{}, _a1 interface{}) *MockTenantServiceServer_GetTenant_Call {
	return &MockTenantServiceServer_GetTenant_Call{Call: _e.mock.On("GetTenant", _a0, _a1)}
}

func (_c *MockTenantServiceServer_GetTenant_Call) Run(run func(_a0 context.Context, _a1 *metastorev1.GetTenantRequest)) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metastorev1.GetTenantRequest))
	})
	return _c
}

func (_c *MockTenantServiceServer_GetTenant_Call) Return(_a0 *metastorev1.GetTenantResponse, _a1 error) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantServiceServer_GetTenant_Call) RunAndReturn(run func(context.Context, *metastorev1.GetTenantRequest) (*metastorev1.GetTenantResponse, error)) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTenantServiceServer provides a mock function with given fields:
func (_m *MockTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {
	_m.Called()
}

// MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTenantServiceServer'
type MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTenantServiceServer is a helper method to define mock.On call
func (_e *MockTenantServiceServer_Expecter) mustEmbedUnimplementedTenantServiceServer() *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call {
	return &MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTenantServiceServer")}
}

func (_c *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call) Run(run func()) *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call) Return() *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call) RunAndReturn(run func()) *MockTenantServiceServer_mustEmbedUnimplementedTenantServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTenantServiceServer creates a new instance of MockTenantServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceServer {
	mock := &MockTenantServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
