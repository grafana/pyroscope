// Code generated by mockery. DO NOT EDIT.

package mockmetastorev1

import (
	context "context"

	grpc "google.golang.org/grpc"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type MockTenantServiceClient struct {
	mock.Mock
}

type MockTenantServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceClient) EXPECT() *MockTenantServiceClient_Expecter {
	return &MockTenantServiceClient_Expecter{mock: &_m.Mock}
}

// DeleteTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) DeleteTenant(ctx context.Context, in *metastorev1.DeleteTenantRequest, opts ...grpc.CallOption) (*metastorev1.DeleteTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenant")
	}

	var r0 *metastorev1.DeleteTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.DeleteTenantRequest, ...grpc.CallOption) (*metastorev1.DeleteTenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.DeleteTenantRequest, ...grpc.CallOption) *metastorev1.DeleteTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.DeleteTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.DeleteTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantServiceClient_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantServiceClient_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metastorev1.DeleteTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) DeleteTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_DeleteTenant_Call {
	return &MockTenantServiceClient_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) Run(run func(ctx context.Context, in *metastorev1.DeleteTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metastorev1.DeleteTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) Return(_a0 *metastorev1.DeleteTenantResponse, _a1 error) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) RunAndReturn(run func(context.Context, *metastorev1.DeleteTenantRequest, ...grpc.CallOption) (*metastorev1.DeleteTenantResponse, error)) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenant(ctx context.Context, in *metastorev1.GetTenantRequest, opts ...grpc.CallOption) (*metastorev1.GetTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *metastorev1.GetTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetTenantRequest, ...grpc.CallOption) (*metastorev1.GetTenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetTenantRequest, ...grpc.CallOption) *metastorev1.GetTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.GetTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.GetTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantServiceClient_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantServiceClient_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metastorev1.GetTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) GetTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_GetTenant_Call {
	return &MockTenantServiceClient_GetTenant_Call{Call: _e.mock.On("GetTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_GetTenant_Call) Run(run func(ctx context.Context, in *metastorev1.GetTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metastorev1.GetTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantServiceClient_GetTenant_Call) Return(_a0 *metastorev1.GetTenantResponse, _a1 error) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTenantServiceClient_GetTenant_Call) RunAndReturn(run func(context.Context, *metastorev1.GetTenantRequest, ...grpc.CallOption) (*metastorev1.GetTenantResponse, error)) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTenantServiceClient creates a new instance of MockTenantServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceClient {
	mock := &MockTenantServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
