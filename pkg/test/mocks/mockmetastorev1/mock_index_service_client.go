// Code generated by mockery. DO NOT EDIT.

package mockmetastorev1

import (
	context "context"

	grpc "google.golang.org/grpc"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockIndexServiceClient is an autogenerated mock type for the IndexServiceClient type
type MockIndexServiceClient struct {
	mock.Mock
}

type MockIndexServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexServiceClient) EXPECT() *MockIndexServiceClient_Expecter {
	return &MockIndexServiceClient_Expecter{mock: &_m.Mock}
}

// AddBlock provides a mock function with given fields: ctx, in, opts
func (_m *MockIndexServiceClient) AddBlock(ctx context.Context, in *metastorev1.AddBlockRequest, opts ...grpc.CallOption) (*metastorev1.AddBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddBlock")
	}

	var r0 *metastorev1.AddBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.AddBlockRequest, ...grpc.CallOption) (*metastorev1.AddBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.AddBlockRequest, ...grpc.CallOption) *metastorev1.AddBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.AddBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.AddBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexServiceClient_AddBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlock'
type MockIndexServiceClient_AddBlock_Call struct {
	*mock.Call
}

// AddBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metastorev1.AddBlockRequest
//   - opts ...grpc.CallOption
func (_e *MockIndexServiceClient_Expecter) AddBlock(ctx interface{}, in interface{}, opts ...interface{}) *MockIndexServiceClient_AddBlock_Call {
	return &MockIndexServiceClient_AddBlock_Call{Call: _e.mock.On("AddBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockIndexServiceClient_AddBlock_Call) Run(run func(ctx context.Context, in *metastorev1.AddBlockRequest, opts ...grpc.CallOption)) *MockIndexServiceClient_AddBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metastorev1.AddBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockIndexServiceClient_AddBlock_Call) Return(_a0 *metastorev1.AddBlockResponse, _a1 error) *MockIndexServiceClient_AddBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexServiceClient_AddBlock_Call) RunAndReturn(run func(context.Context, *metastorev1.AddBlockRequest, ...grpc.CallOption) (*metastorev1.AddBlockResponse, error)) *MockIndexServiceClient_AddBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockMetadata provides a mock function with given fields: ctx, in, opts
func (_m *MockIndexServiceClient) GetBlockMetadata(ctx context.Context, in *metastorev1.GetBlockMetadataRequest, opts ...grpc.CallOption) (*metastorev1.GetBlockMetadataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockMetadata")
	}

	var r0 *metastorev1.GetBlockMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetBlockMetadataRequest, ...grpc.CallOption) (*metastorev1.GetBlockMetadataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.GetBlockMetadataRequest, ...grpc.CallOption) *metastorev1.GetBlockMetadataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.GetBlockMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.GetBlockMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexServiceClient_GetBlockMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockMetadata'
type MockIndexServiceClient_GetBlockMetadata_Call struct {
	*mock.Call
}

// GetBlockMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - in *metastorev1.GetBlockMetadataRequest
//   - opts ...grpc.CallOption
func (_e *MockIndexServiceClient_Expecter) GetBlockMetadata(ctx interface{}, in interface{}, opts ...interface{}) *MockIndexServiceClient_GetBlockMetadata_Call {
	return &MockIndexServiceClient_GetBlockMetadata_Call{Call: _e.mock.On("GetBlockMetadata",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockIndexServiceClient_GetBlockMetadata_Call) Run(run func(ctx context.Context, in *metastorev1.GetBlockMetadataRequest, opts ...grpc.CallOption)) *MockIndexServiceClient_GetBlockMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*metastorev1.GetBlockMetadataRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockIndexServiceClient_GetBlockMetadata_Call) Return(_a0 *metastorev1.GetBlockMetadataResponse, _a1 error) *MockIndexServiceClient_GetBlockMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexServiceClient_GetBlockMetadata_Call) RunAndReturn(run func(context.Context, *metastorev1.GetBlockMetadataRequest, ...grpc.CallOption) (*metastorev1.GetBlockMetadataResponse, error)) *MockIndexServiceClient_GetBlockMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexServiceClient creates a new instance of MockIndexServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexServiceClient {
	mock := &MockIndexServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
