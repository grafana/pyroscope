// Code generated by mockery. DO NOT EDIT.

package mockmetastorev1

import (
	context "context"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockMetadataQueryServiceServer is an autogenerated mock type for the MetadataQueryServiceServer type
type MockMetadataQueryServiceServer struct {
	mock.Mock
}

type MockMetadataQueryServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataQueryServiceServer) EXPECT() *MockMetadataQueryServiceServer_Expecter {
	return &MockMetadataQueryServiceServer_Expecter{mock: &_m.Mock}
}

// QueryMetadata provides a mock function with given fields: _a0, _a1
func (_m *MockMetadataQueryServiceServer) QueryMetadata(_a0 context.Context, _a1 *metastorev1.QueryMetadataRequest) (*metastorev1.QueryMetadataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for QueryMetadata")
	}

	var r0 *metastorev1.QueryMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.QueryMetadataRequest) (*metastorev1.QueryMetadataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.QueryMetadataRequest) *metastorev1.QueryMetadataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.QueryMetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.QueryMetadataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetadataQueryServiceServer_QueryMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMetadata'
type MockMetadataQueryServiceServer_QueryMetadata_Call struct {
	*mock.Call
}

// QueryMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metastorev1.QueryMetadataRequest
func (_e *MockMetadataQueryServiceServer_Expecter) QueryMetadata(_a0 interface{}, _a1 interface{}) *MockMetadataQueryServiceServer_QueryMetadata_Call {
	return &MockMetadataQueryServiceServer_QueryMetadata_Call{Call: _e.mock.On("QueryMetadata", _a0, _a1)}
}

func (_c *MockMetadataQueryServiceServer_QueryMetadata_Call) Run(run func(_a0 context.Context, _a1 *metastorev1.QueryMetadataRequest)) *MockMetadataQueryServiceServer_QueryMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metastorev1.QueryMetadataRequest))
	})
	return _c
}

func (_c *MockMetadataQueryServiceServer_QueryMetadata_Call) Return(_a0 *metastorev1.QueryMetadataResponse, _a1 error) *MockMetadataQueryServiceServer_QueryMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetadataQueryServiceServer_QueryMetadata_Call) RunAndReturn(run func(context.Context, *metastorev1.QueryMetadataRequest) (*metastorev1.QueryMetadataResponse, error)) *MockMetadataQueryServiceServer_QueryMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMetadataLabels provides a mock function with given fields: _a0, _a1
func (_m *MockMetadataQueryServiceServer) QueryMetadataLabels(_a0 context.Context, _a1 *metastorev1.QueryMetadataLabelsRequest) (*metastorev1.QueryMetadataLabelsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for QueryMetadataLabels")
	}

	var r0 *metastorev1.QueryMetadataLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.QueryMetadataLabelsRequest) (*metastorev1.QueryMetadataLabelsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metastorev1.QueryMetadataLabelsRequest) *metastorev1.QueryMetadataLabelsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metastorev1.QueryMetadataLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metastorev1.QueryMetadataLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetadataQueryServiceServer_QueryMetadataLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMetadataLabels'
type MockMetadataQueryServiceServer_QueryMetadataLabels_Call struct {
	*mock.Call
}

// QueryMetadataLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metastorev1.QueryMetadataLabelsRequest
func (_e *MockMetadataQueryServiceServer_Expecter) QueryMetadataLabels(_a0 interface{}, _a1 interface{}) *MockMetadataQueryServiceServer_QueryMetadataLabels_Call {
	return &MockMetadataQueryServiceServer_QueryMetadataLabels_Call{Call: _e.mock.On("QueryMetadataLabels", _a0, _a1)}
}

func (_c *MockMetadataQueryServiceServer_QueryMetadataLabels_Call) Run(run func(_a0 context.Context, _a1 *metastorev1.QueryMetadataLabelsRequest)) *MockMetadataQueryServiceServer_QueryMetadataLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metastorev1.QueryMetadataLabelsRequest))
	})
	return _c
}

func (_c *MockMetadataQueryServiceServer_QueryMetadataLabels_Call) Return(_a0 *metastorev1.QueryMetadataLabelsResponse, _a1 error) *MockMetadataQueryServiceServer_QueryMetadataLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetadataQueryServiceServer_QueryMetadataLabels_Call) RunAndReturn(run func(context.Context, *metastorev1.QueryMetadataLabelsRequest) (*metastorev1.QueryMetadataLabelsResponse, error)) *MockMetadataQueryServiceServer_QueryMetadataLabels_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedMetadataQueryServiceServer provides a mock function with given fields:
func (_m *MockMetadataQueryServiceServer) mustEmbedUnimplementedMetadataQueryServiceServer() {
	_m.Called()
}

// MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedMetadataQueryServiceServer'
type MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedMetadataQueryServiceServer is a helper method to define mock.On call
func (_e *MockMetadataQueryServiceServer_Expecter) mustEmbedUnimplementedMetadataQueryServiceServer() *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call {
	return &MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedMetadataQueryServiceServer")}
}

func (_c *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call) Run(run func()) *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call) Return() *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call) RunAndReturn(run func()) *MockMetadataQueryServiceServer_mustEmbedUnimplementedMetadataQueryServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetadataQueryServiceServer creates a new instance of MockMetadataQueryServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataQueryServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataQueryServiceServer {
	mock := &MockMetadataQueryServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
