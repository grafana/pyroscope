// Code generated by mockery. DO NOT EDIT.

package mocksymbolizer

import mock "github.com/stretchr/testify/mock"

// MockLimits is an autogenerated mock type for the Limits type
type MockLimits struct {
	mock.Mock
}

type MockLimits_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLimits) EXPECT() *MockLimits_Expecter {
	return &MockLimits_Expecter{mock: &_m.Mock}
}

// SymbolizerEnabled provides a mock function with given fields: _a0
func (_m *MockLimits) SymbolizerEnabled(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SymbolizerEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLimits_SymbolizerEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SymbolizerEnabled'
type MockLimits_SymbolizerEnabled_Call struct {
	*mock.Call
}

// SymbolizerEnabled is a helper method to define mock.On call
//   - _a0 string
func (_e *MockLimits_Expecter) SymbolizerEnabled(_a0 interface{}) *MockLimits_SymbolizerEnabled_Call {
	return &MockLimits_SymbolizerEnabled_Call{Call: _e.mock.On("SymbolizerEnabled", _a0)}
}

func (_c *MockLimits_SymbolizerEnabled_Call) Run(run func(_a0 string)) *MockLimits_SymbolizerEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLimits_SymbolizerEnabled_Call) Return(_a0 bool) *MockLimits_SymbolizerEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLimits_SymbolizerEnabled_Call) RunAndReturn(run func(string) bool) *MockLimits_SymbolizerEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLimits creates a new instance of MockLimits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLimits(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLimits {
	mock := &MockLimits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
