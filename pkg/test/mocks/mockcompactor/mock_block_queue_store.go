// Code generated by mockery. DO NOT EDIT.

package mockcompactor

import (
	"go.etcd.io/bbolt"

	"github.com/grafana/pyroscope/pkg/experiment/metastore/compaction"
	"github.com/grafana/pyroscope/pkg/iter"

	"github.com/stretchr/testify/mock"
)

// MockBlockQueueStore is an autogenerated mock type for the BlockQueueStore type
type MockBlockQueueStore struct {
	mock.Mock
}

type MockBlockQueueStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockQueueStore) EXPECT() *MockBlockQueueStore_Expecter {
	return &MockBlockQueueStore_Expecter{mock: &_m.Mock}
}

// CreateBuckets provides a mock function with given fields: _a0
func (_m *MockBlockQueueStore) CreateBuckets(_a0 *bbolt.Tx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuckets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockQueueStore_CreateBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuckets'
type MockBlockQueueStore_CreateBuckets_Call struct {
	*mock.Call
}

// CreateBuckets is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
func (_e *MockBlockQueueStore_Expecter) CreateBuckets(_a0 interface{}) *MockBlockQueueStore_CreateBuckets_Call {
	return &MockBlockQueueStore_CreateBuckets_Call{Call: _e.mock.On("CreateBuckets", _a0)}
}

func (_c *MockBlockQueueStore_CreateBuckets_Call) Run(run func(_a0 *bbolt.Tx)) *MockBlockQueueStore_CreateBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockBlockQueueStore_CreateBuckets_Call) Return(_a0 error) *MockBlockQueueStore_CreateBuckets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockQueueStore_CreateBuckets_Call) RunAndReturn(run func(*bbolt.Tx) error) *MockBlockQueueStore_CreateBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntry provides a mock function with given fields: tx, index, id
func (_m *MockBlockQueueStore) DeleteEntry(tx *bbolt.Tx, index uint64, id string) error {
	ret := _m.Called(tx, index, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, uint64, string) error); ok {
		r0 = rf(tx, index, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockQueueStore_DeleteEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntry'
type MockBlockQueueStore_DeleteEntry_Call struct {
	*mock.Call
}

// DeleteEntry is a helper method to define mock.On call
//   - tx *bbolt.Tx
//   - index uint64
//   - id string
func (_e *MockBlockQueueStore_Expecter) DeleteEntry(tx interface{}, index interface{}, id interface{}) *MockBlockQueueStore_DeleteEntry_Call {
	return &MockBlockQueueStore_DeleteEntry_Call{Call: _e.mock.On("DeleteEntry", tx, index, id)}
}

func (_c *MockBlockQueueStore_DeleteEntry_Call) Run(run func(tx *bbolt.Tx, index uint64, id string)) *MockBlockQueueStore_DeleteEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *MockBlockQueueStore_DeleteEntry_Call) Return(_a0 error) *MockBlockQueueStore_DeleteEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockQueueStore_DeleteEntry_Call) RunAndReturn(run func(*bbolt.Tx, uint64, string) error) *MockBlockQueueStore_DeleteEntry_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntries provides a mock function with given fields: _a0
func (_m *MockBlockQueueStore) ListEntries(_a0 *bbolt.Tx) iter.Iterator[compaction.BlockEntry] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListEntries")
	}

	var r0 iter.Iterator[compaction.BlockEntry]
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) iter.Iterator[compaction.BlockEntry]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Iterator[compaction.BlockEntry])
		}
	}

	return r0
}

// MockBlockQueueStore_ListEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntries'
type MockBlockQueueStore_ListEntries_Call struct {
	*mock.Call
}

// ListEntries is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
func (_e *MockBlockQueueStore_Expecter) ListEntries(_a0 interface{}) *MockBlockQueueStore_ListEntries_Call {
	return &MockBlockQueueStore_ListEntries_Call{Call: _e.mock.On("ListEntries", _a0)}
}

func (_c *MockBlockQueueStore_ListEntries_Call) Run(run func(_a0 *bbolt.Tx)) *MockBlockQueueStore_ListEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockBlockQueueStore_ListEntries_Call) Return(_a0 iter.Iterator[compaction.BlockEntry]) *MockBlockQueueStore_ListEntries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockQueueStore_ListEntries_Call) RunAndReturn(run func(*bbolt.Tx) iter.Iterator[compaction.BlockEntry]) *MockBlockQueueStore_ListEntries_Call {
	_c.Call.Return(run)
	return _c
}

// StoreEntry provides a mock function with given fields: _a0, _a1
func (_m *MockBlockQueueStore) StoreEntry(_a0 *bbolt.Tx, _a1 compaction.BlockEntry) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StoreEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, compaction.BlockEntry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlockQueueStore_StoreEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreEntry'
type MockBlockQueueStore_StoreEntry_Call struct {
	*mock.Call
}

// StoreEntry is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
//   - _a1 store.BlockEntry
func (_e *MockBlockQueueStore_Expecter) StoreEntry(_a0 interface{}, _a1 interface{}) *MockBlockQueueStore_StoreEntry_Call {
	return &MockBlockQueueStore_StoreEntry_Call{Call: _e.mock.On("StoreEntry", _a0, _a1)}
}

func (_c *MockBlockQueueStore_StoreEntry_Call) Run(run func(_a0 *bbolt.Tx, _a1 compaction.BlockEntry)) *MockBlockQueueStore_StoreEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(compaction.BlockEntry))
	})
	return _c
}

func (_c *MockBlockQueueStore_StoreEntry_Call) Return(_a0 error) *MockBlockQueueStore_StoreEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlockQueueStore_StoreEntry_Call) RunAndReturn(run func(*bbolt.Tx, compaction.BlockEntry) error) *MockBlockQueueStore_StoreEntry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockQueueStore creates a new instance of MockBlockQueueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockQueueStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockQueueStore {
	mock := &MockBlockQueueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
