// Code generated by mockery. DO NOT EDIT.

package mockwritepath

import (
	context "context"

	connect "connectrpc.com/connect"

	mock "github.com/stretchr/testify/mock"

	model "github.com/grafana/pyroscope/pkg/distributor/model"

	pushv1 "github.com/grafana/pyroscope/api/gen/proto/go/push/v1"
)

// MockIngesterClient is an autogenerated mock type for the IngesterClient type
type MockIngesterClient struct {
	mock.Mock
}

type MockIngesterClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIngesterClient) EXPECT() *MockIngesterClient_Expecter {
	return &MockIngesterClient_Expecter{mock: &_m.Mock}
}

// Push provides a mock function with given fields: _a0, _a1
func (_m *MockIngesterClient) Push(_a0 context.Context, _a1 *model.PushRequest) (*connect.Response[pushv1.PushResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 *connect.Response[pushv1.PushResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PushRequest) (*connect.Response[pushv1.PushResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.PushRequest) *connect.Response[pushv1.PushResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[pushv1.PushResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.PushRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIngesterClient_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockIngesterClient_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.PushRequest
func (_e *MockIngesterClient_Expecter) Push(_a0 interface{}, _a1 interface{}) *MockIngesterClient_Push_Call {
	return &MockIngesterClient_Push_Call{Call: _e.mock.On("Push", _a0, _a1)}
}

func (_c *MockIngesterClient_Push_Call) Run(run func(_a0 context.Context, _a1 *model.PushRequest)) *MockIngesterClient_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PushRequest))
	})
	return _c
}

func (_c *MockIngesterClient_Push_Call) Return(_a0 *connect.Response[pushv1.PushResponse], _a1 error) *MockIngesterClient_Push_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIngesterClient_Push_Call) RunAndReturn(run func(context.Context, *model.PushRequest) (*connect.Response[pushv1.PushResponse], error)) *MockIngesterClient_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIngesterClient creates a new instance of MockIngesterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngesterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngesterClient {
	mock := &MockIngesterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
