// Code generated by mockery. DO NOT EDIT.

package mockwritepath

import (
	context "context"

	segmentwriterv1 "github.com/grafana/pyroscope/api/gen/proto/go/segmentwriter/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockSegmentWriterClient is an autogenerated mock type for the SegmentWriterClient type
type MockSegmentWriterClient struct {
	mock.Mock
}

type MockSegmentWriterClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSegmentWriterClient) EXPECT() *MockSegmentWriterClient_Expecter {
	return &MockSegmentWriterClient_Expecter{mock: &_m.Mock}
}

// Push provides a mock function with given fields: _a0, _a1
func (_m *MockSegmentWriterClient) Push(_a0 context.Context, _a1 *segmentwriterv1.PushRequest) (*segmentwriterv1.PushResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 *segmentwriterv1.PushResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *segmentwriterv1.PushRequest) (*segmentwriterv1.PushResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *segmentwriterv1.PushRequest) *segmentwriterv1.PushResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*segmentwriterv1.PushResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *segmentwriterv1.PushRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSegmentWriterClient_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockSegmentWriterClient_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *segmentwriterv1.PushRequest
func (_e *MockSegmentWriterClient_Expecter) Push(_a0 interface{}, _a1 interface{}) *MockSegmentWriterClient_Push_Call {
	return &MockSegmentWriterClient_Push_Call{Call: _e.mock.On("Push", _a0, _a1)}
}

func (_c *MockSegmentWriterClient_Push_Call) Run(run func(_a0 context.Context, _a1 *segmentwriterv1.PushRequest)) *MockSegmentWriterClient_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*segmentwriterv1.PushRequest))
	})
	return _c
}

func (_c *MockSegmentWriterClient_Push_Call) Return(_a0 *segmentwriterv1.PushResponse, _a1 error) *MockSegmentWriterClient_Push_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSegmentWriterClient_Push_Call) RunAndReturn(run func(context.Context, *segmentwriterv1.PushRequest) (*segmentwriterv1.PushResponse, error)) *MockSegmentWriterClient_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSegmentWriterClient creates a new instance of MockSegmentWriterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSegmentWriterClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSegmentWriterClient {
	mock := &MockSegmentWriterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
