// Code generated by mockery. DO NOT EDIT.

package mockcompactorv1

import (
	context "context"

	compactorv1 "github.com/grafana/pyroscope/api/gen/proto/go/compactor/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockCompactionPlannerServer is an autogenerated mock type for the CompactionPlannerServer type
type MockCompactionPlannerServer struct {
	mock.Mock
}

type MockCompactionPlannerServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompactionPlannerServer) EXPECT() *MockCompactionPlannerServer_Expecter {
	return &MockCompactionPlannerServer_Expecter{mock: &_m.Mock}
}

// GetCompactionJobs provides a mock function with given fields: _a0, _a1
func (_m *MockCompactionPlannerServer) GetCompactionJobs(_a0 context.Context, _a1 *compactorv1.GetCompactionRequest) (*compactorv1.GetCompactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCompactionJobs")
	}

	var r0 *compactorv1.GetCompactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compactorv1.GetCompactionRequest) (*compactorv1.GetCompactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compactorv1.GetCompactionRequest) *compactorv1.GetCompactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compactorv1.GetCompactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compactorv1.GetCompactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompactionPlannerServer_GetCompactionJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompactionJobs'
type MockCompactionPlannerServer_GetCompactionJobs_Call struct {
	*mock.Call
}

// GetCompactionJobs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compactorv1.GetCompactionRequest
func (_e *MockCompactionPlannerServer_Expecter) GetCompactionJobs(_a0 interface{}, _a1 interface{}) *MockCompactionPlannerServer_GetCompactionJobs_Call {
	return &MockCompactionPlannerServer_GetCompactionJobs_Call{Call: _e.mock.On("GetCompactionJobs", _a0, _a1)}
}

func (_c *MockCompactionPlannerServer_GetCompactionJobs_Call) Run(run func(_a0 context.Context, _a1 *compactorv1.GetCompactionRequest)) *MockCompactionPlannerServer_GetCompactionJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compactorv1.GetCompactionRequest))
	})
	return _c
}

func (_c *MockCompactionPlannerServer_GetCompactionJobs_Call) Return(_a0 *compactorv1.GetCompactionResponse, _a1 error) *MockCompactionPlannerServer_GetCompactionJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompactionPlannerServer_GetCompactionJobs_Call) RunAndReturn(run func(context.Context, *compactorv1.GetCompactionRequest) (*compactorv1.GetCompactionResponse, error)) *MockCompactionPlannerServer_GetCompactionJobs_Call {
	_c.Call.Return(run)
	return _c
}

// PollCompactionJobs provides a mock function with given fields: _a0, _a1
func (_m *MockCompactionPlannerServer) PollCompactionJobs(_a0 context.Context, _a1 *compactorv1.PollCompactionJobsRequest) (*compactorv1.PollCompactionJobsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PollCompactionJobs")
	}

	var r0 *compactorv1.PollCompactionJobsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compactorv1.PollCompactionJobsRequest) (*compactorv1.PollCompactionJobsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compactorv1.PollCompactionJobsRequest) *compactorv1.PollCompactionJobsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compactorv1.PollCompactionJobsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compactorv1.PollCompactionJobsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompactionPlannerServer_PollCompactionJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollCompactionJobs'
type MockCompactionPlannerServer_PollCompactionJobs_Call struct {
	*mock.Call
}

// PollCompactionJobs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compactorv1.PollCompactionJobsRequest
func (_e *MockCompactionPlannerServer_Expecter) PollCompactionJobs(_a0 interface{}, _a1 interface{}) *MockCompactionPlannerServer_PollCompactionJobs_Call {
	return &MockCompactionPlannerServer_PollCompactionJobs_Call{Call: _e.mock.On("PollCompactionJobs", _a0, _a1)}
}

func (_c *MockCompactionPlannerServer_PollCompactionJobs_Call) Run(run func(_a0 context.Context, _a1 *compactorv1.PollCompactionJobsRequest)) *MockCompactionPlannerServer_PollCompactionJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compactorv1.PollCompactionJobsRequest))
	})
	return _c
}

func (_c *MockCompactionPlannerServer_PollCompactionJobs_Call) Return(_a0 *compactorv1.PollCompactionJobsResponse, _a1 error) *MockCompactionPlannerServer_PollCompactionJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompactionPlannerServer_PollCompactionJobs_Call) RunAndReturn(run func(context.Context, *compactorv1.PollCompactionJobsRequest) (*compactorv1.PollCompactionJobsResponse, error)) *MockCompactionPlannerServer_PollCompactionJobs_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCompactionPlannerServer provides a mock function with given fields:
func (_m *MockCompactionPlannerServer) mustEmbedUnimplementedCompactionPlannerServer() {
	_m.Called()
}

// MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCompactionPlannerServer'
type MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCompactionPlannerServer is a helper method to define mock.On call
func (_e *MockCompactionPlannerServer_Expecter) mustEmbedUnimplementedCompactionPlannerServer() *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call {
	return &MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCompactionPlannerServer")}
}

func (_c *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call) Run(run func()) *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call) Return() *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call) RunAndReturn(run func()) *MockCompactionPlannerServer_mustEmbedUnimplementedCompactionPlannerServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCompactionPlannerServer creates a new instance of MockCompactionPlannerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompactionPlannerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompactionPlannerServer {
	mock := &MockCompactionPlannerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
