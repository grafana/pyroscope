// Code generated by mockery. DO NOT EDIT.

package mockmetrics

import (
	prompb "github.com/prometheus/prometheus/prompb"
	mock "github.com/stretchr/testify/mock"
)

// MockExporter is an autogenerated mock type for the Exporter type
type MockExporter struct {
	mock.Mock
}

type MockExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExporter) EXPECT() *MockExporter_Expecter {
	return &MockExporter_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with given fields:
func (_m *MockExporter) Flush() {
	_m.Called()
}

// MockExporter_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockExporter_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockExporter_Expecter) Flush() *MockExporter_Flush_Call {
	return &MockExporter_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockExporter_Flush_Call) Run(run func()) *MockExporter_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExporter_Flush_Call) Return() *MockExporter_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExporter_Flush_Call) RunAndReturn(run func()) *MockExporter_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: tenant, series
func (_m *MockExporter) Send(tenant string, series []prompb.TimeSeries) error {
	ret := _m.Called(tenant, series)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []prompb.TimeSeries) error); ok {
		r0 = rf(tenant, series)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExporter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockExporter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - tenant string
//   - series []prompb.TimeSeries
func (_e *MockExporter_Expecter) Send(tenant interface{}, series interface{}) *MockExporter_Send_Call {
	return &MockExporter_Send_Call{Call: _e.mock.On("Send", tenant, series)}
}

func (_c *MockExporter_Send_Call) Run(run func(tenant string, series []prompb.TimeSeries)) *MockExporter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]prompb.TimeSeries))
	})
	return _c
}

func (_c *MockExporter_Send_Call) Return(_a0 error) *MockExporter_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExporter_Send_Call) RunAndReturn(run func(string, []prompb.TimeSeries) error) *MockExporter_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExporter creates a new instance of MockExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExporter {
	mock := &MockExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
