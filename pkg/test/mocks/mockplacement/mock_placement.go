// Code generated by mockery. DO NOT EDIT.

package mockplacement

import (
	placement "github.com/grafana/pyroscope/pkg/experiment/distributor/placement"
	mock "github.com/stretchr/testify/mock"
)

// MockPlacement is an autogenerated mock type for the Placement type
type MockPlacement struct {
	mock.Mock
}

type MockPlacement_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlacement) EXPECT() *MockPlacement_Expecter {
	return &MockPlacement_Expecter{mock: &_m.Mock}
}

// Policy provides a mock function with given fields: _a0
func (_m *MockPlacement) Policy(_a0 placement.Key) placement.Policy {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Policy")
	}

	var r0 placement.Policy
	if rf, ok := ret.Get(0).(func(placement.Key) placement.Policy); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(placement.Policy)
	}

	return r0
}

// MockPlacement_Policy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Policy'
type MockPlacement_Policy_Call struct {
	*mock.Call
}

// Policy is a helper method to define mock.On call
//   - _a0 placement.Key
func (_e *MockPlacement_Expecter) Policy(_a0 interface{}) *MockPlacement_Policy_Call {
	return &MockPlacement_Policy_Call{Call: _e.mock.On("Policy", _a0)}
}

func (_c *MockPlacement_Policy_Call) Run(run func(_a0 placement.Key)) *MockPlacement_Policy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(placement.Key))
	})
	return _c
}

func (_c *MockPlacement_Policy_Call) Return(_a0 placement.Policy) *MockPlacement_Policy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlacement_Policy_Call) RunAndReturn(run func(placement.Key) placement.Policy) *MockPlacement_Policy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlacement creates a new instance of MockPlacement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlacement(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlacement {
	mock := &MockPlacement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
