// Code generated by mockery. DO NOT EDIT.

package mockotlp

import (
	context "context"

	model "github.com/grafana/pyroscope/pkg/distributor/model"
	mock "github.com/stretchr/testify/mock"
)

// MockPushService is an autogenerated mock type for the PushService type
type MockPushService struct {
	mock.Mock
}

type MockPushService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPushService) EXPECT() *MockPushService_Expecter {
	return &MockPushService_Expecter{mock: &_m.Mock}
}

// PushBatch provides a mock function with given fields: ctx, req
func (_m *MockPushService) PushBatch(ctx context.Context, req *model.PushRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PushBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.PushRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPushService_PushBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushBatch'
type MockPushService_PushBatch_Call struct {
	*mock.Call
}

// PushBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - req *model.PushRequest
func (_e *MockPushService_Expecter) PushBatch(ctx interface{}, req interface{}) *MockPushService_PushBatch_Call {
	return &MockPushService_PushBatch_Call{Call: _e.mock.On("PushBatch", ctx, req)}
}

func (_c *MockPushService_PushBatch_Call) Run(run func(ctx context.Context, req *model.PushRequest)) *MockPushService_PushBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.PushRequest))
	})
	return _c
}

func (_c *MockPushService_PushBatch_Call) Return(_a0 error) *MockPushService_PushBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPushService_PushBatch_Call) RunAndReturn(run func(context.Context, *model.PushRequest) error) *MockPushService_PushBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPushService creates a new instance of MockPushService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPushService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPushService {
	mock := &MockPushService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
