// Code generated by mockery. DO NOT EDIT.

package mockindex

import (
	bbolt "go.etcd.io/bbolt"

	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"

	mock "github.com/stretchr/testify/mock"

	store "github.com/grafana/pyroscope/pkg/experiment/metastore/index/store"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CreateBuckets provides a mock function with given fields: _a0
func (_m *MockStore) CreateBuckets(_a0 *bbolt.Tx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuckets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuckets'
type MockStore_CreateBuckets_Call struct {
	*mock.Call
}

// CreateBuckets is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
func (_e *MockStore_Expecter) CreateBuckets(_a0 interface{}) *MockStore_CreateBuckets_Call {
	return &MockStore_CreateBuckets_Call{Call: _e.mock.On("CreateBuckets", _a0)}
}

func (_c *MockStore_CreateBuckets_Call) Run(run func(_a0 *bbolt.Tx)) *MockStore_CreateBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockStore_CreateBuckets_Call) Return(_a0 error) *MockStore_CreateBuckets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateBuckets_Call) RunAndReturn(run func(*bbolt.Tx) error) *MockStore_CreateBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlockList provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStore) DeleteBlockList(_a0 *bbolt.Tx, _a1 store.PartitionKey, _a2 *metastorev1.BlockList) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlockList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.PartitionKey, *metastorev1.BlockList) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteBlockList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlockList'
type MockStore_DeleteBlockList_Call struct {
	*mock.Call
}

// DeleteBlockList is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
//   - _a1 store.PartitionKey
//   - _a2 *metastorev1.BlockList
func (_e *MockStore_Expecter) DeleteBlockList(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStore_DeleteBlockList_Call {
	return &MockStore_DeleteBlockList_Call{Call: _e.mock.On("DeleteBlockList", _a0, _a1, _a2)}
}

func (_c *MockStore_DeleteBlockList_Call) Run(run func(_a0 *bbolt.Tx, _a1 store.PartitionKey, _a2 *metastorev1.BlockList)) *MockStore_DeleteBlockList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.PartitionKey), args[2].(*metastorev1.BlockList))
	})
	return _c
}

func (_c *MockStore_DeleteBlockList_Call) Return(_a0 error) *MockStore_DeleteBlockList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteBlockList_Call) RunAndReturn(run func(*bbolt.Tx, store.PartitionKey, *metastorev1.BlockList) error) *MockStore_DeleteBlockList_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlocks provides a mock function with given fields: tx, p, shard, tenant
func (_m *MockStore) ListBlocks(tx *bbolt.Tx, p store.PartitionKey, shard uint32, tenant string) []*metastorev1.BlockMeta {
	ret := _m.Called(tx, p, shard, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ListBlocks")
	}

	var r0 []*metastorev1.BlockMeta
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.PartitionKey, uint32, string) []*metastorev1.BlockMeta); ok {
		r0 = rf(tx, p, shard, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metastorev1.BlockMeta)
		}
	}

	return r0
}

// MockStore_ListBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlocks'
type MockStore_ListBlocks_Call struct {
	*mock.Call
}

// ListBlocks is a helper method to define mock.On call
//   - tx *bbolt.Tx
//   - p store.PartitionKey
//   - shard uint32
//   - tenant string
func (_e *MockStore_Expecter) ListBlocks(tx interface{}, p interface{}, shard interface{}, tenant interface{}) *MockStore_ListBlocks_Call {
	return &MockStore_ListBlocks_Call{Call: _e.mock.On("ListBlocks", tx, p, shard, tenant)}
}

func (_c *MockStore_ListBlocks_Call) Run(run func(tx *bbolt.Tx, p store.PartitionKey, shard uint32, tenant string)) *MockStore_ListBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.PartitionKey), args[2].(uint32), args[3].(string))
	})
	return _c
}

func (_c *MockStore_ListBlocks_Call) Return(_a0 []*metastorev1.BlockMeta) *MockStore_ListBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListBlocks_Call) RunAndReturn(run func(*bbolt.Tx, store.PartitionKey, uint32, string) []*metastorev1.BlockMeta) *MockStore_ListBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// ListPartitions provides a mock function with given fields: _a0
func (_m *MockStore) ListPartitions(_a0 *bbolt.Tx) []store.PartitionKey {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListPartitions")
	}

	var r0 []store.PartitionKey
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) []store.PartitionKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]store.PartitionKey)
		}
	}

	return r0
}

// MockStore_ListPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPartitions'
type MockStore_ListPartitions_Call struct {
	*mock.Call
}

// ListPartitions is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
func (_e *MockStore_Expecter) ListPartitions(_a0 interface{}) *MockStore_ListPartitions_Call {
	return &MockStore_ListPartitions_Call{Call: _e.mock.On("ListPartitions", _a0)}
}

func (_c *MockStore_ListPartitions_Call) Run(run func(_a0 *bbolt.Tx)) *MockStore_ListPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockStore_ListPartitions_Call) Return(_a0 []store.PartitionKey) *MockStore_ListPartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListPartitions_Call) RunAndReturn(run func(*bbolt.Tx) []store.PartitionKey) *MockStore_ListPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// ListShards provides a mock function with given fields: _a0, _a1
func (_m *MockStore) ListShards(_a0 *bbolt.Tx, _a1 store.PartitionKey) []uint32 {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListShards")
	}

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.PartitionKey) []uint32); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	return r0
}

// MockStore_ListShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListShards'
type MockStore_ListShards_Call struct {
	*mock.Call
}

// ListShards is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
//   - _a1 store.PartitionKey
func (_e *MockStore_Expecter) ListShards(_a0 interface{}, _a1 interface{}) *MockStore_ListShards_Call {
	return &MockStore_ListShards_Call{Call: _e.mock.On("ListShards", _a0, _a1)}
}

func (_c *MockStore_ListShards_Call) Run(run func(_a0 *bbolt.Tx, _a1 store.PartitionKey)) *MockStore_ListShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.PartitionKey))
	})
	return _c
}

func (_c *MockStore_ListShards_Call) Return(_a0 []uint32) *MockStore_ListShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListShards_Call) RunAndReturn(run func(*bbolt.Tx, store.PartitionKey) []uint32) *MockStore_ListShards_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenants provides a mock function with given fields: tx, p, shard
func (_m *MockStore) ListTenants(tx *bbolt.Tx, p store.PartitionKey, shard uint32) []string {
	ret := _m.Called(tx, p, shard)

	if len(ret) == 0 {
		panic("no return value specified for ListTenants")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.PartitionKey, uint32) []string); ok {
		r0 = rf(tx, p, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockStore_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockStore_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//   - tx *bbolt.Tx
//   - p store.PartitionKey
//   - shard uint32
func (_e *MockStore_Expecter) ListTenants(tx interface{}, p interface{}, shard interface{}) *MockStore_ListTenants_Call {
	return &MockStore_ListTenants_Call{Call: _e.mock.On("ListTenants", tx, p, shard)}
}

func (_c *MockStore_ListTenants_Call) Run(run func(tx *bbolt.Tx, p store.PartitionKey, shard uint32)) *MockStore_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.PartitionKey), args[2].(uint32))
	})
	return _c
}

func (_c *MockStore_ListTenants_Call) Return(_a0 []string) *MockStore_ListTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListTenants_Call) RunAndReturn(run func(*bbolt.Tx, store.PartitionKey, uint32) []string) *MockStore_ListTenants_Call {
	_c.Call.Return(run)
	return _c
}

// StoreBlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStore) StoreBlock(_a0 *bbolt.Tx, _a1 store.PartitionKey, _a2 *metastorev1.BlockMeta) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for StoreBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.PartitionKey, *metastorev1.BlockMeta) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_StoreBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreBlock'
type MockStore_StoreBlock_Call struct {
	*mock.Call
}

// StoreBlock is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
//   - _a1 store.PartitionKey
//   - _a2 *metastorev1.BlockMeta
func (_e *MockStore_Expecter) StoreBlock(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStore_StoreBlock_Call {
	return &MockStore_StoreBlock_Call{Call: _e.mock.On("StoreBlock", _a0, _a1, _a2)}
}

func (_c *MockStore_StoreBlock_Call) Run(run func(_a0 *bbolt.Tx, _a1 store.PartitionKey, _a2 *metastorev1.BlockMeta)) *MockStore_StoreBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.PartitionKey), args[2].(*metastorev1.BlockMeta))
	})
	return _c
}

func (_c *MockStore_StoreBlock_Call) Return(_a0 error) *MockStore_StoreBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_StoreBlock_Call) RunAndReturn(run func(*bbolt.Tx, store.PartitionKey, *metastorev1.BlockMeta) error) *MockStore_StoreBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
