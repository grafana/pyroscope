// Code generated by mockery. DO NOT EDIT.

package mockindex

import (
	metastorev1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	index "github.com/grafana/pyroscope/pkg/experiment/metastore/index"

	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// ListBlocks provides a mock function with given fields: p, shard, tenant
func (_m *MockStore) ListBlocks(p index.PartitionKey, shard uint32, tenant string) []*metastorev1.BlockMeta {
	ret := _m.Called(p, shard, tenant)

	if len(ret) == 0 {
		panic("no return value specified for ListBlocks")
	}

	var r0 []*metastorev1.BlockMeta
	if rf, ok := ret.Get(0).(func(index.PartitionKey, uint32, string) []*metastorev1.BlockMeta); ok {
		r0 = rf(p, shard, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*metastorev1.BlockMeta)
		}
	}

	return r0
}

// MockStore_ListBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlocks'
type MockStore_ListBlocks_Call struct {
	*mock.Call
}

// ListBlocks is a helper method to define mock.On call
//   - p index.PartitionKey
//   - shard uint32
//   - tenant string
func (_e *MockStore_Expecter) ListBlocks(p interface{}, shard interface{}, tenant interface{}) *MockStore_ListBlocks_Call {
	return &MockStore_ListBlocks_Call{Call: _e.mock.On("ListBlocks", p, shard, tenant)}
}

func (_c *MockStore_ListBlocks_Call) Run(run func(p index.PartitionKey, shard uint32, tenant string)) *MockStore_ListBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(index.PartitionKey), args[1].(uint32), args[2].(string))
	})
	return _c
}

func (_c *MockStore_ListBlocks_Call) Return(_a0 []*metastorev1.BlockMeta) *MockStore_ListBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListBlocks_Call) RunAndReturn(run func(index.PartitionKey, uint32, string) []*metastorev1.BlockMeta) *MockStore_ListBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// ListPartitions provides a mock function with given fields:
func (_m *MockStore) ListPartitions() []index.PartitionKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPartitions")
	}

	var r0 []index.PartitionKey
	if rf, ok := ret.Get(0).(func() []index.PartitionKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]index.PartitionKey)
		}
	}

	return r0
}

// MockStore_ListPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPartitions'
type MockStore_ListPartitions_Call struct {
	*mock.Call
}

// ListPartitions is a helper method to define mock.On call
func (_e *MockStore_Expecter) ListPartitions() *MockStore_ListPartitions_Call {
	return &MockStore_ListPartitions_Call{Call: _e.mock.On("ListPartitions")}
}

func (_c *MockStore_ListPartitions_Call) Run(run func()) *MockStore_ListPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ListPartitions_Call) Return(_a0 []index.PartitionKey) *MockStore_ListPartitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListPartitions_Call) RunAndReturn(run func() []index.PartitionKey) *MockStore_ListPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// ListShards provides a mock function with given fields: p
func (_m *MockStore) ListShards(p index.PartitionKey) []uint32 {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for ListShards")
	}

	var r0 []uint32
	if rf, ok := ret.Get(0).(func(index.PartitionKey) []uint32); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	return r0
}

// MockStore_ListShards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListShards'
type MockStore_ListShards_Call struct {
	*mock.Call
}

// ListShards is a helper method to define mock.On call
//   - p index.PartitionKey
func (_e *MockStore_Expecter) ListShards(p interface{}) *MockStore_ListShards_Call {
	return &MockStore_ListShards_Call{Call: _e.mock.On("ListShards", p)}
}

func (_c *MockStore_ListShards_Call) Run(run func(p index.PartitionKey)) *MockStore_ListShards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(index.PartitionKey))
	})
	return _c
}

func (_c *MockStore_ListShards_Call) Return(_a0 []uint32) *MockStore_ListShards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListShards_Call) RunAndReturn(run func(index.PartitionKey) []uint32) *MockStore_ListShards_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenants provides a mock function with given fields: p, shard
func (_m *MockStore) ListTenants(p index.PartitionKey, shard uint32) []string {
	ret := _m.Called(p, shard)

	if len(ret) == 0 {
		panic("no return value specified for ListTenants")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(index.PartitionKey, uint32) []string); ok {
		r0 = rf(p, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockStore_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockStore_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//   - p index.PartitionKey
//   - shard uint32
func (_e *MockStore_Expecter) ListTenants(p interface{}, shard interface{}) *MockStore_ListTenants_Call {
	return &MockStore_ListTenants_Call{Call: _e.mock.On("ListTenants", p, shard)}
}

func (_c *MockStore_ListTenants_Call) Run(run func(p index.PartitionKey, shard uint32)) *MockStore_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(index.PartitionKey), args[1].(uint32))
	})
	return _c
}

func (_c *MockStore_ListTenants_Call) Return(_a0 []string) *MockStore_ListTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_ListTenants_Call) RunAndReturn(run func(index.PartitionKey, uint32) []string) *MockStore_ListTenants_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
