// Code generated by mockery. DO NOT EDIT.

package mockindex

import (
	bbolt "go.etcd.io/bbolt"

	iter "iter"

	mock "github.com/stretchr/testify/mock"

	store "github.com/grafana/pyroscope/pkg/experiment/metastore/index/store"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CreateBuckets provides a mock function with given fields: _a0
func (_m *MockStore) CreateBuckets(_a0 *bbolt.Tx) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuckets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_CreateBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuckets'
type MockStore_CreateBuckets_Call struct {
	*mock.Call
}

// CreateBuckets is a helper method to define mock.On call
//   - _a0 *bbolt.Tx
func (_e *MockStore_Expecter) CreateBuckets(_a0 interface{}) *MockStore_CreateBuckets_Call {
	return &MockStore_CreateBuckets_Call{Call: _e.mock.On("CreateBuckets", _a0)}
}

func (_c *MockStore_CreateBuckets_Call) Run(run func(_a0 *bbolt.Tx)) *MockStore_CreateBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockStore_CreateBuckets_Call) Return(_a0 error) *MockStore_CreateBuckets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_CreateBuckets_Call) RunAndReturn(run func(*bbolt.Tx) error) *MockStore_CreateBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteShard provides a mock function with given fields: tx, p, tenant, shard
func (_m *MockStore) DeleteShard(tx *bbolt.Tx, p store.Partition, tenant string, shard uint32) error {
	ret := _m.Called(tx, p, tenant, shard)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.Partition, string, uint32) error); ok {
		r0 = rf(tx, p, tenant, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_DeleteShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteShard'
type MockStore_DeleteShard_Call struct {
	*mock.Call
}

// DeleteShard is a helper method to define mock.On call
//   - tx *bbolt.Tx
//   - p store.Partition
//   - tenant string
//   - shard uint32
func (_e *MockStore_Expecter) DeleteShard(tx interface{}, p interface{}, tenant interface{}, shard interface{}) *MockStore_DeleteShard_Call {
	return &MockStore_DeleteShard_Call{Call: _e.mock.On("DeleteShard", tx, p, tenant, shard)}
}

func (_c *MockStore_DeleteShard_Call) Run(run func(tx *bbolt.Tx, p store.Partition, tenant string, shard uint32)) *MockStore_DeleteShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.Partition), args[2].(string), args[3].(uint32))
	})
	return _c
}

func (_c *MockStore_DeleteShard_Call) Return(_a0 error) *MockStore_DeleteShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_DeleteShard_Call) RunAndReturn(run func(*bbolt.Tx, store.Partition, string, uint32) error) *MockStore_DeleteShard_Call {
	_c.Call.Return(run)
	return _c
}

// LoadShard provides a mock function with given fields: tx, p, tenant, shard
func (_m *MockStore) LoadShard(tx *bbolt.Tx, p store.Partition, tenant string, shard uint32) (*store.Shard, error) {
	ret := _m.Called(tx, p, tenant, shard)

	if len(ret) == 0 {
		panic("no return value specified for LoadShard")
	}

	var r0 *store.Shard
	var r1 error
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.Partition, string, uint32) (*store.Shard, error)); ok {
		return rf(tx, p, tenant, shard)
	}
	if rf, ok := ret.Get(0).(func(*bbolt.Tx, store.Partition, string, uint32) *store.Shard); ok {
		r0 = rf(tx, p, tenant, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Shard)
		}
	}

	if rf, ok := ret.Get(1).(func(*bbolt.Tx, store.Partition, string, uint32) error); ok {
		r1 = rf(tx, p, tenant, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_LoadShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadShard'
type MockStore_LoadShard_Call struct {
	*mock.Call
}

// LoadShard is a helper method to define mock.On call
//   - tx *bbolt.Tx
//   - p store.Partition
//   - tenant string
//   - shard uint32
func (_e *MockStore_Expecter) LoadShard(tx interface{}, p interface{}, tenant interface{}, shard interface{}) *MockStore_LoadShard_Call {
	return &MockStore_LoadShard_Call{Call: _e.mock.On("LoadShard", tx, p, tenant, shard)}
}

func (_c *MockStore_LoadShard_Call) Run(run func(tx *bbolt.Tx, p store.Partition, tenant string, shard uint32)) *MockStore_LoadShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx), args[1].(store.Partition), args[2].(string), args[3].(uint32))
	})
	return _c
}

func (_c *MockStore_LoadShard_Call) Return(_a0 *store.Shard, _a1 error) *MockStore_LoadShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_LoadShard_Call) RunAndReturn(run func(*bbolt.Tx, store.Partition, string, uint32) (*store.Shard, error)) *MockStore_LoadShard_Call {
	_c.Call.Return(run)
	return _c
}

// Partitions provides a mock function with given fields: tx
func (_m *MockStore) Partitions(tx *bbolt.Tx) iter.Seq[store.Partition] {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for Partitions")
	}

	var r0 iter.Seq[store.Partition]
	if rf, ok := ret.Get(0).(func(*bbolt.Tx) iter.Seq[store.Partition]); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq[store.Partition])
		}
	}

	return r0
}

// MockStore_Partitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Partitions'
type MockStore_Partitions_Call struct {
	*mock.Call
}

// Partitions is a helper method to define mock.On call
//   - tx *bbolt.Tx
func (_e *MockStore_Expecter) Partitions(tx interface{}) *MockStore_Partitions_Call {
	return &MockStore_Partitions_Call{Call: _e.mock.On("Partitions", tx)}
}

func (_c *MockStore_Partitions_Call) Run(run func(tx *bbolt.Tx)) *MockStore_Partitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bbolt.Tx))
	})
	return _c
}

func (_c *MockStore_Partitions_Call) Return(_a0 iter.Seq[store.Partition]) *MockStore_Partitions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Partitions_Call) RunAndReturn(run func(*bbolt.Tx) iter.Seq[store.Partition]) *MockStore_Partitions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
