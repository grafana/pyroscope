// Code generated by mockery. DO NOT EDIT.

package mockquery_frontend

import (
	context "context"

	googlev1 "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockSymbolizer is an autogenerated mock type for the Symbolizer type
type MockSymbolizer struct {
	mock.Mock
}

type MockSymbolizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSymbolizer) EXPECT() *MockSymbolizer_Expecter {
	return &MockSymbolizer_Expecter{mock: &_m.Mock}
}

// SymbolizePprof provides a mock function with given fields: ctx, profile
func (_m *MockSymbolizer) SymbolizePprof(ctx context.Context, profile *googlev1.Profile) error {
	ret := _m.Called(ctx, profile)

	if len(ret) == 0 {
		panic("no return value specified for SymbolizePprof")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *googlev1.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSymbolizer_SymbolizePprof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SymbolizePprof'
type MockSymbolizer_SymbolizePprof_Call struct {
	*mock.Call
}

// SymbolizePprof is a helper method to define mock.On call
//   - ctx context.Context
//   - profile *googlev1.Profile
func (_e *MockSymbolizer_Expecter) SymbolizePprof(ctx interface{}, profile interface{}) *MockSymbolizer_SymbolizePprof_Call {
	return &MockSymbolizer_SymbolizePprof_Call{Call: _e.mock.On("SymbolizePprof", ctx, profile)}
}

func (_c *MockSymbolizer_SymbolizePprof_Call) Run(run func(ctx context.Context, profile *googlev1.Profile)) *MockSymbolizer_SymbolizePprof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*googlev1.Profile))
	})
	return _c
}

func (_c *MockSymbolizer_SymbolizePprof_Call) Return(_a0 error) *MockSymbolizer_SymbolizePprof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSymbolizer_SymbolizePprof_Call) RunAndReturn(run func(context.Context, *googlev1.Profile) error) *MockSymbolizer_SymbolizePprof_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSymbolizer creates a new instance of MockSymbolizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSymbolizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSymbolizer {
	mock := &MockSymbolizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
