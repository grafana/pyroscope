// Code generated by protoc-gen-connect-go-mux. DO NOT EDIT.
//
// Source: scheduler/schedulerpb/scheduler.proto

package schedulerpbconnect

import (
	connect "connectrpc.com/connect"
	mux "github.com/gorilla/mux"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

// RegisterSchedulerForQuerierHandler register an HTTP handler to a mux.Router from the service
// implementation.
func RegisterSchedulerForQuerierHandler(mux *mux.Router, svc SchedulerForQuerierHandler, opts ...connect.HandlerOption) {
	mux.Handle("/schedulerpb.SchedulerForQuerier/QuerierLoop", connect.NewBidiStreamHandler(
		"/schedulerpb.SchedulerForQuerier/QuerierLoop",
		svc.QuerierLoop,
		opts...,
	))
	mux.Handle("/schedulerpb.SchedulerForQuerier/NotifyQuerierShutdown", connect.NewUnaryHandler(
		"/schedulerpb.SchedulerForQuerier/NotifyQuerierShutdown",
		svc.NotifyQuerierShutdown,
		opts...,
	))
}

// RegisterSchedulerForFrontendHandler register an HTTP handler to a mux.Router from the service
// implementation.
func RegisterSchedulerForFrontendHandler(mux *mux.Router, svc SchedulerForFrontendHandler, opts ...connect.HandlerOption) {
	mux.Handle("/schedulerpb.SchedulerForFrontend/FrontendLoop", connect.NewBidiStreamHandler(
		"/schedulerpb.SchedulerForFrontend/FrontendLoop",
		svc.FrontendLoop,
		opts...,
	))
}
