syntax = "proto3";

package compaction;

message CompactionJob {
  // Unique name of the job.
  string name = 1;
  // List of the input blocks.
  repeated string blocks = 2;
  // Compaction level (all blocks are the same)
  uint32 compaction_level = 3;
  // The index of the raft command that changed the status of the job.
  // Used as a fencing token in conjunction with the lease_expires_at
  // field to manage ownership of the compaction job. Any access to the
  // job must be guarded by the check: current_index >= raft_log_index.
  // If the check fails, the access should be denied.
  //
  // The index is updated every time the job is assigned to a worker.
  uint64 raft_log_index = 4;
  // Shard the blocks belong to.
  uint32 shard = 5;
  // Optional, empty for compaction level 0.
  string tenant_id = 6;
  CompactionStatus status = 7;
  // The time the compaction job lease expires. If a lease is expired, the
  // job is considered abandoned and can be picked up by another worker.
  // The expiration check should be done by comparing the timestamp of
  // the raft log entry (command that accesses the job) with the value of
  // this field.
  //
  // The lease is extended every time the owner reports a status update.
  int64 lease_expires_at = 8;
}

enum CompactionStatus {
  COMPACTION_STATUS_UNSPECIFIED = 0;
  COMPACTION_STATUS_IN_PROGRESS = 1;
  COMPACTION_STATUS_SUCCESS = 2;
  COMPACTION_STATUS_FAILURE = 3;
}

message JobPreQueue {
  uint32 compaction_level = 1;
  uint32 shard = 2;
  string tenant = 3;
  repeated string blocks = 4;
}
