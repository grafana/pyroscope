// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/cortexproject/cortex/blob/master/pkg/querier/stats/stats.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Cortex Authors.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: querier/stats/stats.proto

package stats

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sum of all wall time spent in the querier to execute the query.
	WallTime int64 `protobuf:"varint,1,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// The number of series fetched for the query
	FetchedSeriesCount uint64 `protobuf:"varint,2,opt,name=fetched_series_count,json=fetchedSeriesCount,proto3" json:"fetched_series_count,omitempty"`
	// The number of bytes of the chunks fetched for the query
	FetchedChunkBytes uint64 `protobuf:"varint,3,opt,name=fetched_chunk_bytes,json=fetchedChunkBytes,proto3" json:"fetched_chunk_bytes,omitempty"`
	// The number of chunks fetched for the query
	FetchedChunksCount uint64 `protobuf:"varint,4,opt,name=fetched_chunks_count,json=fetchedChunksCount,proto3" json:"fetched_chunks_count,omitempty"`
	// The number of sharded queries executed. 0 if sharding is disabled or the query can't be sharded.
	ShardedQueries uint32 `protobuf:"varint,5,opt,name=sharded_queries,json=shardedQueries,proto3" json:"sharded_queries,omitempty"`
	// The number of split partial queries executed. 0 if splitting is disabled or the query can't be split.
	SplitQueries uint32 `protobuf:"varint,6,opt,name=split_queries,json=splitQueries,proto3" json:"split_queries,omitempty"`
	// The number of index bytes fetched on the store-gateway for the query
	FetchedIndexBytes uint64 `protobuf:"varint,7,opt,name=fetched_index_bytes,json=fetchedIndexBytes,proto3" json:"fetched_index_bytes,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_stats_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_querier_stats_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_querier_stats_stats_proto_rawDescGZIP(), []int{0}
}

func (x *Stats) GetWallTime() int64 {
	if x != nil {
		return x.WallTime
	}
	return 0
}

func (x *Stats) GetFetchedSeriesCount() uint64 {
	if x != nil {
		return x.FetchedSeriesCount
	}
	return 0
}

func (x *Stats) GetFetchedChunkBytes() uint64 {
	if x != nil {
		return x.FetchedChunkBytes
	}
	return 0
}

func (x *Stats) GetFetchedChunksCount() uint64 {
	if x != nil {
		return x.FetchedChunksCount
	}
	return 0
}

func (x *Stats) GetShardedQueries() uint32 {
	if x != nil {
		return x.ShardedQueries
	}
	return 0
}

func (x *Stats) GetSplitQueries() uint32 {
	if x != nil {
		return x.SplitQueries
	}
	return 0
}

func (x *Stats) GetFetchedIndexBytes() uint64 {
	if x != nil {
		return x.FetchedIndexBytes
	}
	return 0
}

var File_querier_stats_stats_proto protoreflect.FileDescriptor

var file_querier_stats_stats_proto_rawDesc = []byte{
	0x0a, 0x19, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x7b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0xca, 0x02, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0xe2, 0x02, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_querier_stats_stats_proto_rawDescOnce sync.Once
	file_querier_stats_stats_proto_rawDescData = file_querier_stats_stats_proto_rawDesc
)

func file_querier_stats_stats_proto_rawDescGZIP() []byte {
	file_querier_stats_stats_proto_rawDescOnce.Do(func() {
		file_querier_stats_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_querier_stats_stats_proto_rawDescData)
	})
	return file_querier_stats_stats_proto_rawDescData
}

var file_querier_stats_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_querier_stats_stats_proto_goTypes = []any{
	(*Stats)(nil), // 0: stats.Stats
}
var file_querier_stats_stats_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_querier_stats_stats_proto_init() }
func file_querier_stats_stats_proto_init() {
	if File_querier_stats_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_querier_stats_stats_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_querier_stats_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_querier_stats_stats_proto_goTypes,
		DependencyIndexes: file_querier_stats_stats_proto_depIdxs,
		MessageInfos:      file_querier_stats_stats_proto_msgTypes,
	}.Build()
	File_querier_stats_stats_proto = out.File
	file_querier_stats_stats_proto_rawDesc = nil
	file_querier_stats_stats_proto_goTypes = nil
	file_querier_stats_stats_proto_depIdxs = nil
}
