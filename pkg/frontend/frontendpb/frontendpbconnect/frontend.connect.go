// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/cortexproject/cortex/blob/master/pkg/frontend/v2/frontendv2pb/frontend.proto
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Cortex Authors.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: frontend/frontendpb/frontend.proto

package frontendpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	frontendpb "github.com/grafana/pyroscope/pkg/frontend/frontendpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendForQuerierName is the fully-qualified name of the FrontendForQuerier service.
	FrontendForQuerierName = "frontendpb.FrontendForQuerier"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendForQuerierQueryResultProcedure is the fully-qualified name of the FrontendForQuerier's
	// QueryResult RPC.
	FrontendForQuerierQueryResultProcedure = "/frontendpb.FrontendForQuerier/QueryResult"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	frontendForQuerierServiceDescriptor           = frontendpb.File_frontend_frontendpb_frontend_proto.Services().ByName("FrontendForQuerier")
	frontendForQuerierQueryResultMethodDescriptor = frontendForQuerierServiceDescriptor.Methods().ByName("QueryResult")
)

// FrontendForQuerierClient is a client for the frontendpb.FrontendForQuerier service.
type FrontendForQuerierClient interface {
	QueryResult(context.Context, *connect.Request[frontendpb.QueryResultRequest]) (*connect.Response[frontendpb.QueryResultResponse], error)
}

// NewFrontendForQuerierClient constructs a client for the frontendpb.FrontendForQuerier service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendForQuerierClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendForQuerierClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &frontendForQuerierClient{
		queryResult: connect.NewClient[frontendpb.QueryResultRequest, frontendpb.QueryResultResponse](
			httpClient,
			baseURL+FrontendForQuerierQueryResultProcedure,
			connect.WithSchema(frontendForQuerierQueryResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendForQuerierClient implements FrontendForQuerierClient.
type frontendForQuerierClient struct {
	queryResult *connect.Client[frontendpb.QueryResultRequest, frontendpb.QueryResultResponse]
}

// QueryResult calls frontendpb.FrontendForQuerier.QueryResult.
func (c *frontendForQuerierClient) QueryResult(ctx context.Context, req *connect.Request[frontendpb.QueryResultRequest]) (*connect.Response[frontendpb.QueryResultResponse], error) {
	return c.queryResult.CallUnary(ctx, req)
}

// FrontendForQuerierHandler is an implementation of the frontendpb.FrontendForQuerier service.
type FrontendForQuerierHandler interface {
	QueryResult(context.Context, *connect.Request[frontendpb.QueryResultRequest]) (*connect.Response[frontendpb.QueryResultResponse], error)
}

// NewFrontendForQuerierHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendForQuerierHandler(svc FrontendForQuerierHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendForQuerierQueryResultHandler := connect.NewUnaryHandler(
		FrontendForQuerierQueryResultProcedure,
		svc.QueryResult,
		connect.WithSchema(frontendForQuerierQueryResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/frontendpb.FrontendForQuerier/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendForQuerierQueryResultProcedure:
			frontendForQuerierQueryResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendForQuerierHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendForQuerierHandler struct{}

func (UnimplementedFrontendForQuerierHandler) QueryResult(context.Context, *connect.Request[frontendpb.QueryResultRequest]) (*connect.Response[frontendpb.QueryResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontendpb.FrontendForQuerier.QueryResult is not implemented"))
}
