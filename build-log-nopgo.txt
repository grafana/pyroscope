grep: warning: ? at start of expression
grep: warning: ? at start of expression
# github.com/grafana/pyroscope/cmd/pyroscope
cmd/pyroscope/main.go:29:9: can inline (*mainFlags).Clone.func1 with cost 3 as: func(mainFlags) *mainFlags { return &mf }
cmd/pyroscope/main.go:28:6: can inline (*mainFlags).Clone with cost 24 as: method(*mainFlags) func() flagext.Registerer { return (func literal)(*mf) }
cmd/pyroscope/main.go:31:3: inlining call to (*mainFlags).Clone.func1
cmd/pyroscope/main.go:34:6: can inline (*mainFlags).PhlareConfig with cost 2 as: method(*mainFlags) func() *phlare.Config { return &mf.Config }
cmd/pyroscope/main.go:38:6: cannot inline (*mainFlags).RegisterFlags: function too complex: cost 468 exceeds budget 80
cmd/pyroscope/main.go:39:25: inlining call to phlare.(*Config).RegisterFlags
cmd/pyroscope/main.go:40:12: inlining call to flag.(*FlagSet).BoolVar
cmd/pyroscope/main.go:41:12: inlining call to flag.(*FlagSet).BoolVar
cmd/pyroscope/main.go:42:12: inlining call to flag.(*FlagSet).BoolVar
cmd/pyroscope/main.go:43:12: inlining call to flag.(*FlagSet).BoolVar
cmd/pyroscope/main.go:44:12: inlining call to flag.(*FlagSet).BoolVar
cmd/pyroscope/main.go:39:25: inlining call to context.Background
cmd/pyroscope/main.go:40:12: inlining call to flag.newBoolValue
cmd/pyroscope/main.go:41:12: inlining call to flag.newBoolValue
cmd/pyroscope/main.go:42:12: inlining call to flag.newBoolValue
cmd/pyroscope/main.go:43:12: inlining call to flag.newBoolValue
cmd/pyroscope/main.go:44:12: inlining call to flag.newBoolValue
cmd/pyroscope/main.go:46:6: can inline errorHandler with cost 71 as: func() { testMode := cfg.GetTestMode(); if !testMode { os.Exit(1) } }
cmd/pyroscope/main.go:47:29: inlining call to cfg.GetTestMode
cmd/pyroscope/main.go:53:6: cannot inline main: function too complex: cost 1500 exceeds budget 80
cmd/pyroscope/main.go:60:15: inlining call to errorHandler
cmd/pyroscope/main.go:67:15: inlining call to errorHandler
cmd/pyroscope/main.go:72:14: inlining call to fmt.Println
cmd/pyroscope/main.go:80:28: inlining call to sort.SearchStrings
cmd/pyroscope/main.go:97:29: inlining call to flag.(*FlagSet).SetOutput
cmd/pyroscope/main.go:100:16: inlining call to errorHandler
cmd/pyroscope/main.go:110:15: inlining call to errorHandler
cmd/pyroscope/main.go:60:15: inlining call to cfg.GetTestMode
cmd/pyroscope/main.go:67:15: inlining call to cfg.GetTestMode
cmd/pyroscope/main.go:100:16: inlining call to cfg.GetTestMode
cmd/pyroscope/main.go:110:15: inlining call to cfg.GetTestMode
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[go.shape.string]).CompareAndSwap with cost 63 as: method(*atomic.Pointer[go.shape.string]) func(*[16]uintptr, *go.shape.string, *go.shape.string) bool { return atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[go.shape.string]).Swap with cost 62 as: method(*atomic.Pointer[go.shape.string]) func(*[16]uintptr, *go.shape.string) *go.shape.string { return (*go.shape.string)(atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new))) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[go.shape.string]).Store with cost 61 as: method(*atomic.Pointer[go.shape.string]) func(*[16]uintptr, *go.shape.string) { atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[go.shape.string]).Load with cost 4 as: method(*atomic.Pointer[go.shape.string]) func(*[16]uintptr) *go.shape.string { return (*go.shape.string)(atomic.LoadPointer(&atomic.x.v)) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate with cost 38 as: method(*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int) { btree.toClear = <nil>; *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]; btree.zero = <nil>; for loop }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[go.shape.*uint8]).truncate with cost 38 as: method(*btree.items[go.shape.*uint8]) func(*[12]uintptr, int) { btree.toClear = <nil>; *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]; btree.zero = <nil>; for loop }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6: cannot inline btree.(*FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode: function too complex: cost 161 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:115:11: inlining call to sync.(*Mutex).Lock
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:13: inlining call to sync.(*Mutex).Unlock
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6: cannot inline btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode: function too complex: cost 173 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:668:19: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:669:22: inlining call to btree.(*items[go.shape.*uint8]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).reset: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).print: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: cannot inline btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find: function too complex: cost 160 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: can inline btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find.func1 with cost 64 as: func(int) bool { return btree.less(btree.item, btree.s[btree.i]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).iterate: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:6: cannot inline btree.(*FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode: function too complex: cost 256 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:101:11: inlining call to sync.(*Mutex).Lock
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:104:14: inlining call to sync.(*Mutex).Unlock
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:13: inlining call to sync.(*Mutex).Unlock
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6: can inline btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode with cost 71 as: method(*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[8]uintptr) *btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }] { btree.n = (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.c.freelist, (*[6]uintptr)(btree..dict[0])); btree.n.cow = btree.c; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor: function too complex: cost 154 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:239:20: inlining call to btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6: can inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild with cost 80 as: method(*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[90]uintptr, int) *btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }] { btree.c := (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow); btree.n.children[btree.i] = btree.c; return btree.c }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop with cost 33 as: method(*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr) go.shape.interface { Less(github.com/google/btree.Item) bool } { btree.index := len(*btree.s) - 1; btree.out = (*btree.s)[btree.index]; btree.zero = <nil>; (*btree.s)[btree.index] = btree.zero; *btree.s = (*btree.s)[:btree.index]; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt with cost 34 as: method(*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int, go.shape.interface { Less(github.com/google/btree.Item) bool }) { btree.zero = <nil>; *btree.s = append(*btree.s, btree.zero); if btree.index < len(*btree.s) { copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) }; (*btree.s)[btree.index] = btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[go.shape.*uint8]).insertAt with cost 34 as: method(*btree.items[go.shape.*uint8]) func(*[12]uintptr, int, go.shape.*uint8) { btree.zero = <nil>; *btree.s = append(*btree.s, btree.zero); if btree.index < len(*btree.s) { copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) }; (*btree.s)[btree.index] = btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[go.shape.*uint8]).pop with cost 33 as: method(*btree.items[go.shape.*uint8]) func(*[12]uintptr) go.shape.*uint8 { btree.index := len(*btree.s) - 1; btree.out = (*btree.s)[btree.index]; btree.zero = <nil>; (*btree.s)[btree.index] = btree.zero; *btree.s = (*btree.s)[:btree.index]; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt with cost 46 as: method(*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int) go.shape.interface { Less(github.com/google/btree.Item) bool } { btree.item := (*btree.s)[btree.index]; copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]); btree.zero = <nil>; (*btree.s)[len(*btree.s) - 1] = btree.zero; *btree.s = (*btree.s)[:len(*btree.s) - 1]; return btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[go.shape.*uint8]).removeAt with cost 46 as: method(*btree.items[go.shape.*uint8]) func(*[12]uintptr, int) go.shape.*uint8 { btree.item := (*btree.s)[btree.index]; copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]); btree.zero = <nil>; (*btree.s)[len(*btree.s) - 1] = btree.zero; *btree.s = (*btree.s)[:len(*btree.s) - 1]; return btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove: function too complex: cost 1110 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove: function too complex: cost 613 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:440:26: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:441:30: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:442:36: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:443:23: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:446:53: inlining call to btree.(*items[go.shape.*uint8]).pop
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:446:27: inlining call to btree.(*items[go.shape.*uint8]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:450:26: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:451:30: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:452:41: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:456:71: inlining call to btree.(*items[go.shape.*uint8]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:462:26: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:464:32: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:465:36: inlining call to btree.(*items[go.shape.*uint8]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:375:22: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:380:27: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:387:28: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).get: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).split: function too complex: cost 217 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:267:23: inlining call to btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:269:18: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:272:22: inlining call to btree.(*items[go.shape.*uint8]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild: function too complex: cost 265 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:283:25: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:285:18: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21: inlining call to btree.(*items[go.shape.*uint8]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6: cannot inline btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insert: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:301:19: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:317:23: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: cannot inline btree.items[go.shape.*uint8].find: function too complex: cost 160 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: can inline btree.items[go.shape.*uint8].find.func1 with cost 64 as: func(int) bool { return btree.less(btree.item, btree.s[btree.i]) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).CompareAndSwap with cost 63 as: method(*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }, *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) bool { return atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Swap with cost 62 as: method(*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool } { return (*go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool })(atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new))) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Store with cost 61 as: method(*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) { atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Load with cost 4 as: method(*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr) *go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool } { return (*go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool })(atomic.LoadPointer(&atomic.x.v)) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:6: cannot inline zeropool.(*Pool[go.shape.[]int64]).Get: function too complex: cost 164 exceeds budget 80
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6: cannot inline zeropool.(*Pool[go.shape.[]int64]).Put: function too complex: cost 156 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:254:14: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to atomic.(*Int32).Add
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6: can inline zeropool.(*Pool[[]int64]).Put with cost 62 as: method(*zeropool.Pool[[]int64]) func([]int64) { (*zeropool.Pool[go.shape.[]int64]).Put(zeropool.p, &zeropool..dict.Pool[[]int64], zeropool.item) }
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:6: can inline zeropool.(*Pool[[]int64]).Get with cost 62 as: method(*zeropool.Pool[[]int64]) func() []int64 { return (*zeropool.Pool[go.shape.[]int64]).Get(zeropool.p, &zeropool..dict.Pool[[]int64]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:217:46: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Name
./pkg/phlaredb/deduplicating_slice.go:217:39: inlining call to prometheus.(*GaugeVec).WithLabelValues
./pkg/phlaredb/deduplicating_slice.go:217:72: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:58:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to atomic.(*Uint64).Load
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup with cost 70 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr, parquet.RowGroup) (int64, error) { return int64(.autotmp_5), .autotmp_6 }
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:119:32: inlining call to parquet.SortingRowGroupConfig
./pkg/phlaredb/deduplicating_slice.go:120:31: inlining call to parquet.ColumnBufferCapacity
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:154:15: inlining call to parquet.(*Buffer).Reset
./pkg/phlaredb/deduplicating_slice.go:161:37: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to atomic.(*Uint64).Load
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).Close with cost 71 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr) error { return (*parquet.Writer).Close(parquet.w.base) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:21: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
./pkg/phlaredb/deduplicating_slice.go:85:24: inlining call to os.(*File).Close
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*Writer).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:57:6: can inline parquet.typeOf[go.shape.*uint8] with cost 35 as: func(*[2]uintptr) reflect.Type { parquet.v = <nil>; return reflect.TypeOf(parquet.v) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:59:23: inlining call to reflect.TypeOf
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:59:23: inlining call to reflect.noescape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:59:23: inlining call to reflect.toType
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:59:23: inlining call to reflect.toRType
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).writeAny: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).writeRows: unhandled op DEFER
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:223:25: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:228:25: inlining call to parquet.(*Writer).WriteRows
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:6: can inline unsafecast.AddressOf[go.shape.*uint8] with cost 3 as: func(*[6]uintptr, []go.shape.*uint8) *go.shape.*uint8 { return *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:6: can inline unsafecast.PointerOf[go.shape.*uint8] with cost 11 as: func(*[4]uintptr, []go.shape.*uint8) unsafe.Pointer { return unsafe.Pointer(unsafecast.AddressOf[go.shape.*uint8]((*[6]uintptr)(unsafecast..dict[0]), unsafecast.data)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:33: inlining call to unsafecast.AddressOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:6: can inline parquet.makeArrayOf[go.shape.*uint8] with cost 51 as: func(*[3]uintptr, []go.shape.*uint8) sparse.Array { parquet.model = <nil>; return parquet.makeArray(unsafecast.PointerOf[go.shape.*uint8]((*[4]uintptr)(parquet..dict[0]), parquet.s), len(parquet.s), unsafe.Sizeof(parquet.model)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39: inlining call to unsafecast.PointerOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18: inlining call to parquet.makeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39: inlining call to unsafecast.AddressOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18: inlining call to sparse.UnsafeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18: inlining call to sparse.makeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6: cannot inline parquet.makeWriteFunc[go.shape.*uint8]: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9: cannot inline parquet.makeWriteFunc[go.shape.*uint8].func1: function too complex: cost 227 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to parquet.makeArrayOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to unsafecast.PointerOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to parquet.makeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to unsafecast.AddressOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to sparse.UnsafeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41: inlining call to sparse.makeArray
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:6: cannot inline parquet.writeFuncOf[go.shape.*uint8]: function too complex: cost 445 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29: can inline parquet.writeFuncOf[go.shape.*uint8].func1 with cost 71 as: func(*parquet.GenericWriter[go.shape.*uint8], []go.shape.*uint8) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29: can inline parquet.writeFuncOf[go.shape.*uint8].func2 with cost 71 as: func(*parquet.GenericWriter[go.shape.*uint8], []go.shape.*uint8) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:6: cannot inline parquet.NewGenericWriter[go.shape.*uint8]: function too complex: cost 406 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:92:16: inlining call to parquet.typeOf[go.shape.*uint8]
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:92:16: inlining call to reflect.TypeOf
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:92:16: inlining call to reflect.noescape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:92:16: inlining call to reflect.toType
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:92:16: inlining call to reflect.toRType
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:64:40: inlining call to filepath.Join
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.TempDir
./pkg/phlaredb/deduplicating_slice.go:72:54: inlining call to parquet.NewFileBufferPool
./pkg/phlaredb/deduplicating_slice.go:72:28: inlining call to parquet.ColumnPageBuffers
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.CreatedBy
./pkg/phlaredb/deduplicating_slice.go:74:25: inlining call to parquet.PageBufferSize
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.tempDir
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.formatCreatedBy
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:54:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:254:14: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:217:46: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Name
./pkg/phlaredb/deduplicating_slice.go:217:39: inlining call to prometheus.(*GaugeVec).WithLabelValues
./pkg/phlaredb/deduplicating_slice.go:217:72: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:58:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:119:32: inlining call to parquet.SortingRowGroupConfig
./pkg/phlaredb/deduplicating_slice.go:120:31: inlining call to parquet.ColumnBufferCapacity
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:154:15: inlining call to parquet.(*Buffer).Reset
./pkg/phlaredb/deduplicating_slice.go:161:37: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
./pkg/phlaredb/deduplicating_slice.go:85:24: inlining call to os.(*File).Close
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:64:40: inlining call to filepath.Join
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.TempDir
./pkg/phlaredb/deduplicating_slice.go:72:54: inlining call to parquet.NewFileBufferPool
./pkg/phlaredb/deduplicating_slice.go:72:28: inlining call to parquet.ColumnPageBuffers
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.CreatedBy
./pkg/phlaredb/deduplicating_slice.go:74:25: inlining call to parquet.PageBufferSize
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.tempDir
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.formatCreatedBy
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:54:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:254:14: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:217:46: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Name
./pkg/phlaredb/deduplicating_slice.go:217:39: inlining call to prometheus.(*GaugeVec).WithLabelValues
./pkg/phlaredb/deduplicating_slice.go:217:72: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:58:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:119:32: inlining call to parquet.SortingRowGroupConfig
./pkg/phlaredb/deduplicating_slice.go:120:31: inlining call to parquet.ColumnBufferCapacity
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:154:15: inlining call to parquet.(*Buffer).Reset
./pkg/phlaredb/deduplicating_slice.go:161:37: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
./pkg/phlaredb/deduplicating_slice.go:85:24: inlining call to os.(*File).Close
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:64:40: inlining call to filepath.Join
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.TempDir
./pkg/phlaredb/deduplicating_slice.go:72:54: inlining call to parquet.NewFileBufferPool
./pkg/phlaredb/deduplicating_slice.go:72:28: inlining call to parquet.ColumnPageBuffers
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.CreatedBy
./pkg/phlaredb/deduplicating_slice.go:74:25: inlining call to parquet.PageBufferSize
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.tempDir
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.formatCreatedBy
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:54:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:254:14: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:233:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:242:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:244:15: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:260:17: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to sync.(*RWMutex).RUnlock
./pkg/phlaredb/deduplicating_slice.go:217:46: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Name
./pkg/phlaredb/deduplicating_slice.go:217:39: inlining call to prometheus.(*GaugeVec).WithLabelValues
./pkg/phlaredb/deduplicating_slice.go:217:72: inlining call to atomic.(*Uint64).Add
./pkg/phlaredb/deduplicating_slice.go:187:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:196:16: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:58:20: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:100:23: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to sync.(*RWMutex).RLock
./pkg/phlaredb/deduplicating_slice.go:119:32: inlining call to parquet.SortingRowGroupConfig
./pkg/phlaredb/deduplicating_slice.go:120:31: inlining call to parquet.ColumnBufferCapacity
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:154:15: inlining call to parquet.(*Buffer).Reset
./pkg/phlaredb/deduplicating_slice.go:161:37: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
./pkg/phlaredb/deduplicating_slice.go:114:14: inlining call to atomic.(*Int32).Add
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:124:33: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
./pkg/phlaredb/deduplicating_slice.go:85:24: inlining call to os.(*File).Close
./pkg/phlaredb/deduplicating_slice.go:81:26: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:64:40: inlining call to filepath.Join
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.TempDir
./pkg/phlaredb/deduplicating_slice.go:72:54: inlining call to parquet.NewFileBufferPool
./pkg/phlaredb/deduplicating_slice.go:72:28: inlining call to parquet.ColumnPageBuffers
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.CreatedBy
./pkg/phlaredb/deduplicating_slice.go:74:25: inlining call to parquet.PageBufferSize
./pkg/phlaredb/deduplicating_slice.go:72:65: inlining call to os.tempDir
./pkg/phlaredb/deduplicating_slice.go:73:20: inlining call to parquet.formatCreatedBy
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:54:20: inlining call to atomic.(*Uint64).Load
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).Schema with cost 6 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr) *parquet.Schema { return (*parquet.Writer).Schema(parquet.w.base) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:22: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom with cost 70 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr, parquet.RowReader) (int64, error) { return int64(.autotmp_5), .autotmp_6 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata with cost 44 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr, string, string) { (*parquet.Writer).SetKeyValueMetadata(parquet.w.base, parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).WriteRows: function too complex: cost 84 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25: inlining call to parquet.(*Writer).WriteRows
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).Write: function too complex: cost 89 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:168:44: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).Write.func1: function too complex: cost 228 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[go.shape.*uint8]).Reset with cost 74 as: method(*parquet.GenericWriter[go.shape.*uint8]) func(*[18]uintptr, io.Writer) { (*parquet.Writer).Reset(parquet.w.base, parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: cannot inline parquet.(*GenericWriter[go.shape.*uint8]).Flush: function too complex: cost 82 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21: inlining call to parquet.(*Writer).Flush
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21: inlining call to parquet.(*writer).flush
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[go.shape.struct { Result go.shape.string; RowNum int64 }] { return &phlaredb.cacheIterator[go.shape.string]{...} }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[go.shape.string]).Close with cost 2 as: method(*phlaredb.cacheIterator[go.shape.string]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[go.shape.string]).Err with cost 2 as: method(*phlaredb.cacheIterator[go.shape.string]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1358:6: cannot inline phlaredb.(*cacheIterator[go.shape.string]).At: function too complex: cost 129 exceeds budget 80
./pkg/phlaredb/block_querier.go:1348:6: cannot inline phlaredb.(*cacheIterator[go.shape.string]).Next: function too complex: cost 135 exceeds budget 80
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]) func(*[16]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1313:16: inlining call to errors.Is
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1252:36: inlining call to parquet.NewOptimizedReader
./pkg/phlaredb/block_querier.go:1257:72: inlining call to parquet.SkipPageIndex
./pkg/phlaredb/block_querier.go:1257:104: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1261:24: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1265:27: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1266:23: inlining call to parquet.FileReadMode
./pkg/phlaredb/block_querier.go:1267:25: inlining call to parquet.ReadBufferSize
./pkg/phlaredb/block_querier.go:1276:36: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1278:37: inlining call to parquet.(*File).RowGroups
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[go.shape.struct { Result go.shape.*uint8; RowNum int64 }] { return &phlaredb.cacheIterator[go.shape.*uint8]{...} }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[go.shape.*uint8]).Close with cost 2 as: method(*phlaredb.cacheIterator[go.shape.*uint8]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[go.shape.*uint8]).Err with cost 2 as: method(*phlaredb.cacheIterator[go.shape.*uint8]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1358:6: cannot inline phlaredb.(*cacheIterator[go.shape.*uint8]).At: function too complex: cost 129 exceeds budget 80
./pkg/phlaredb/block_querier.go:1348:6: cannot inline phlaredb.(*cacheIterator[go.shape.*uint8]).Next: function too complex: cost 135 exceeds budget 80
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]) func(*[16]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1313:16: inlining call to errors.Is
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1252:36: inlining call to parquet.NewOptimizedReader
./pkg/phlaredb/block_querier.go:1257:72: inlining call to parquet.SkipPageIndex
./pkg/phlaredb/block_querier.go:1257:104: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1261:24: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1265:27: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1266:23: inlining call to parquet.FileReadMode
./pkg/phlaredb/block_querier.go:1267:25: inlining call to parquet.ReadBufferSize
./pkg/phlaredb/block_querier.go:1276:36: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1278:37: inlining call to parquet.(*File).RowGroups
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[go.shape.struct { Result go.shape.*uint8; RowNum int64 }] { return &phlaredb.cacheIterator[go.shape.*uint8]{...} }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]) func(*[16]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1313:16: inlining call to errors.Is
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1252:36: inlining call to parquet.NewOptimizedReader
./pkg/phlaredb/block_querier.go:1257:72: inlining call to parquet.SkipPageIndex
./pkg/phlaredb/block_querier.go:1257:104: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1261:24: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1265:27: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1266:23: inlining call to parquet.FileReadMode
./pkg/phlaredb/block_querier.go:1267:25: inlining call to parquet.ReadBufferSize
./pkg/phlaredb/block_querier.go:1276:36: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1278:37: inlining call to parquet.(*File).RowGroups
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[go.shape.struct { Result go.shape.*uint8; RowNum int64 }] { return &phlaredb.cacheIterator[go.shape.*uint8]{...} }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]) func(*[16]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1313:16: inlining call to errors.Is
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1252:36: inlining call to parquet.NewOptimizedReader
./pkg/phlaredb/block_querier.go:1257:72: inlining call to parquet.SkipPageIndex
./pkg/phlaredb/block_querier.go:1257:104: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1261:24: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1265:27: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1266:23: inlining call to parquet.FileReadMode
./pkg/phlaredb/block_querier.go:1267:25: inlining call to parquet.ReadBufferSize
./pkg/phlaredb/block_querier.go:1276:36: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1278:37: inlining call to parquet.(*File).RowGroups
./pkg/phlaredb/block_querier.go:1202:6: can inline phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).relPath with cost 68 as: method(*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]) func(*[6]uintptr) string { return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1206:6: cannot inline phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter: function too complex: cost 383 exceeds budget 80
./pkg/phlaredb/block_querier.go:1209:109: inlining call to phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1209:30: inlining call to query.NewErrIterator
./pkg/phlaredb/block_querier.go:1211:33: inlining call to query.AddMetricsToContext
./pkg/phlaredb/block_querier.go:1212:52: inlining call to parquet.(*File).RowGroups
./pkg/phlaredb/block_querier.go:1209:30: inlining call to iter.NewErrSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]
./pkg/phlaredb/block_querier.go:1209:30: inlining call to iter.NewErrIterator[go.shape.*uint8]
./pkg/phlaredb/block_querier.go:1193:6: can inline phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).Close with cost 77 as: method(*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]) func(*[6]uintptr) error { if phlaredb.r.reader != nil { return phlaredb.r.reader.Close() }; phlaredb.r.reader = nil; phlaredb.r.file = nil; return nil }
./pkg/phlaredb/block_querier.go:1152:6: cannot inline phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open: function too complex: cost 906 exceeds budget 80
./pkg/phlaredb/block_querier.go:1164:53: inlining call to context.Background
./pkg/phlaredb/block_querier.go:1168:36: inlining call to parquet.NewOptimizedReader
./pkg/phlaredb/block_querier.go:1172:72: inlining call to parquet.SkipPageIndex
./pkg/phlaredb/block_querier.go:1172:104: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1176:24: inlining call to parquet.(*File).NumRows
./pkg/phlaredb/block_querier.go:1180:27: inlining call to parquet.SkipBloomFilters
./pkg/phlaredb/block_querier.go:1181:23: inlining call to parquet.FileReadMode
./pkg/phlaredb/block_querier.go:1182:25: inlining call to parquet.ReadBufferSize
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:5:6: can inline lo.Keys[go.shape.int64,go.shape.struct {}] with cost 20 as: func(*[5]uintptr, map[go.shape.int64]go.shape.struct {}) []go.shape.int64 { lo.result := make([]go.shape.int64, 0, len(lo.in)); for loop; return lo.result }
./pkg/iter/iter.go:77:6: can inline iter.NewSliceIterator[go.shape.int64] with cost 6 as: func(*[4]uintptr, []go.shape.int64) iter.Iterator[go.shape.int64] { return &iter.sliceIterator[go.shape.int64]{...} }
./pkg/phlaredb/block_querier.go:1060:6: cannot inline phlaredb.uniqueIDs[go.shape.struct {}].iterator: function too complex: cost 120 exceeds budget 80
./pkg/phlaredb/block_querier.go:1062:18: can inline phlaredb.uniqueIDs[go.shape.struct {}].iterator.func1 with cost 8 as: func(int, int) bool { return phlaredb.ids[phlaredb.i] < phlaredb.ids[phlaredb.j] }
./pkg/phlaredb/block_querier.go:1061:16: inlining call to lo.Keys[go.shape.int64,go.shape.struct {}]
./pkg/phlaredb/block_querier.go:1065:30: inlining call to iter.NewSliceIterator[go.shape.int64]
./pkg/iter/iter.go:150:6: can inline iter.(*sliceIterator[go.shape.int64]).Close with cost 2 as: method(*iter.sliceIterator[go.shape.int64]) func(*[6]uintptr) error { return nil }
./pkg/iter/iter.go:146:6: can inline iter.(*sliceIterator[go.shape.int64]).At with cost 3 as: method(*iter.sliceIterator[go.shape.int64]) func(*[6]uintptr) go.shape.int64 { return iter.i.cur }
./pkg/iter/iter.go:87:6: can inline iter.(*sliceIterator[go.shape.int64]).Next with cost 32 as: method(*iter.sliceIterator[go.shape.int64]) func(*[6]uintptr) bool { if len(iter.i.list) > 0 { iter.i.cur = iter.i.list[0]; iter.i.list = iter.i.list[1:]; return true }; iter.a = <nil>; iter.i.cur = iter.a; return false }
./pkg/iter/iter.go:83:6: can inline iter.(*sliceIterator[go.shape.int64]).Err with cost 2 as: method(*iter.sliceIterator[go.shape.int64]) func(*[6]uintptr) error { return nil }
./pkg/iter/iter.go:150:6: can inline iter.(*sliceIterator[int64]).Close with cost 7 as: method(*iter.sliceIterator[int64]) func() error { return (*iter.sliceIterator[go.shape.int64]).Close(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:150:6: inlining call to iter.(*sliceIterator[go.shape.int64]).Close
./pkg/iter/iter.go:146:6: can inline iter.(*sliceIterator[int64]).At with cost 8 as: method(*iter.sliceIterator[int64]) func() int64 { return (*iter.sliceIterator[go.shape.int64]).At(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:146:6: inlining call to iter.(*sliceIterator[go.shape.int64]).At
./pkg/iter/iter.go:87:6: can inline iter.(*sliceIterator[int64]).Next with cost 37 as: method(*iter.sliceIterator[int64]) func() bool { return (*iter.sliceIterator[go.shape.int64]).Next(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:87:6: inlining call to iter.(*sliceIterator[go.shape.int64]).Next
./pkg/iter/iter.go:83:6: can inline iter.(*sliceIterator[int64]).Err with cost 7 as: method(*iter.sliceIterator[int64]) func() error { return (*iter.sliceIterator[go.shape.int64]).Err(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:83:6: inlining call to iter.(*sliceIterator[go.shape.int64]).Err
./pkg/iter/iter.go:77:6: can inline iter.NewSliceIterator[int64] with cost 12 as: func([]int64) iter.Iterator[int64] { return iter.NewSliceIterator[go.shape.int64](&iter..dict.NewSliceIterator[int64], iter.s) }
./pkg/iter/iter.go:77:6: inlining call to iter.NewSliceIterator[go.shape.int64]
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
./pkg/scheduler/scheduler.go:404:6: cannot inline scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send: unhandled op DEFER
./pkg/scheduler/scheduler.go:405:13: inlining call to sync.(*Mutex).Lock
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
./pkg/scheduler/scheduler.go:393:6: cannot inline scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive: unhandled op DEFER
./pkg/scheduler/scheduler.go:394:13: inlining call to sync.(*Mutex).Lock
./pkg/scheduler/scheduler.go:384:6: cannot inline scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close: unhandled op DEFER
./pkg/scheduler/scheduler.go:385:13: inlining call to sync.(*Mutex).Lock
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
./pkg/scheduler/scheduler.go:404:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Send with cost 63 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func(*schedulerpb.SchedulerToQuerier) error { return (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], scheduler.msg) }
./pkg/scheduler/scheduler.go:393:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Receive with cost 71 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() (*schedulerpb.QuerierToScheduler, error) { return .autotmp_3, .autotmp_4 }
./pkg/scheduler/scheduler.go:384:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Close with cost 61 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() { (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close(scheduler.c, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Conn
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func(*schedulerpb.SchedulerToQuerier) error { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseTrailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() (*schedulerpb.QuerierToScheduler, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).RequestHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.Peer { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.Spec { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Conn
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func(*schedulerpb.SchedulerToFrontend) error { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseTrailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() (*schedulerpb.FrontendToScheduler, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).RequestHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.Peer { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.Spec { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func(*ingesterv1.MergeProfilesPprofResponse) error { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() (*ingesterv1.MergeProfilesPprofRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.Peer { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.Spec { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Conn
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func(*ingesterv1.MergeProfilesLabelsResponse) error { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseTrailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() (*ingesterv1.MergeProfilesLabelsRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).RequestHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.Peer { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.Spec { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func(*ingesterv1.MergeProfilesStacktracesResponse) error { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() (*ingesterv1.MergeProfilesStacktracesRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.Peer { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.Spec { return (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: inlining call to connect.(*BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec
./pkg/phlaredb/block_querier.go:1060:6: can inline phlaredb.uniqueIDs[struct {}].iterator with cost 62 as: method(phlaredb.uniqueIDs[struct {}]) func() iter.Iterator[int64] { return phlaredb.uniqueIDs[go.shape.struct {}].iterator(phlaredb.m, &phlaredb..dict.uniqueIDs[struct {}]) }
./pkg/phlaredb/block_querier.go:1206:6: can inline phlaredb.(*parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]).columnIter with cost 66 as: method(*phlaredb.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]) func(context.Context, string, query.Predicate, string) iter.SeekIterator[*github.com/grafana/pyroscope/pkg/phlaredb/query.IteratorResult,github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumberWithDefinitionLevel] { return (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) }
./pkg/phlaredb/block_querier.go:1202:6: can inline phlaredb.(*parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]).relPath with cost 73 as: method(*phlaredb.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]) func() string { return (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).relPath(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]) }
./pkg/phlaredb/block_querier.go:1202:6: inlining call to phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1193:6: cannot inline phlaredb.(*parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]).Close: function too complex: cost 82 exceeds budget 80
./pkg/phlaredb/block_querier.go:1193:6: inlining call to phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).Close
./pkg/phlaredb/block_querier.go:1152:6: can inline phlaredb.(*parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]).open with cost 64 as: method(*phlaredb.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1336:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).retrieveRows
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]).Close with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1369:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Close
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]).Err with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1365:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Err
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]).At with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) func() phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping] { return (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]).Next with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) func() bool { return (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() string { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/block_querier.go:1332:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]*v1.InMemoryMapping, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1336:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).retrieveRows
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]).Close with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1369:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Close
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]).Err with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1365:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Err
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]).At with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) func() phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation] { return (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]).Next with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) func() bool { return (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() string { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/block_querier.go:1332:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]*v1.InMemoryLocation, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1336:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).retrieveRows
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]).Close with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1369:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Close
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]).Err with cost 7 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) func() error { return (*phlaredb.cacheIterator[go.shape.*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1365:6: inlining call to phlaredb.(*cacheIterator[go.shape.*uint8]).Err
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]).At with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) func() phlaredb.ResultWithRowNum[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction] { return (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]).Next with cost 62 as: method(*phlaredb.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) func() bool { return (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() string { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/block_querier.go:1332:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]*v1.InMemoryFunction, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.ctx, phlaredb.bucketReader) }
<autogenerated>:1: cannot inline type..eq.github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[string]: type eq/hash function
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[string]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1336:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).retrieveRows
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[string]).Close with cost 7 as: method(*phlaredb.cacheIterator[string]) func() error { return (*phlaredb.cacheIterator[go.shape.string]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1369:6: inlining call to phlaredb.(*cacheIterator[go.shape.string]).Close
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[string]).Err with cost 7 as: method(*phlaredb.cacheIterator[string]) func() error { return (*phlaredb.cacheIterator[go.shape.string]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1365:6: inlining call to phlaredb.(*cacheIterator[go.shape.string]).Err
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[string]).At with cost 62 as: method(*phlaredb.cacheIterator[string]) func() phlaredb.ResultWithRowNum[string] { return (*phlaredb.cacheIterator[go.shape.string]).At(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[string]).Next with cost 62 as: method(*phlaredb.cacheIterator[string]) func() bool { return (*phlaredb.cacheIterator[go.shape.string]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() string { return (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/block_querier.go:1332:6: inlining call to phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).relPath
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() error { return (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]string, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.ctx, phlaredb.bucketReader) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).writeAny with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).writeRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).Schema with cost 11 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func() *parquet.Schema { return (*parquet.GenericWriter[go.shape.*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func(string, string) { (*parquet.GenericWriter[go.shape.*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).Write with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).Reset with cost 79 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func(io.Writer) { (*parquet.GenericWriter[go.shape.*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).Flush with cost 62 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]).Close with cost 76 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]uint32, []*v1.InMemoryLocation) { (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(context.Context, []*v1.InMemoryLocation, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() int { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).MemorySize
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() string { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Name
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[go.shape.*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(string, string) { (*parquet.GenericWriter[go.shape.*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func(io.Writer) { (*parquet.GenericWriter[go.shape.*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]uint32, []*v1.InMemoryFunction) { (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(context.Context, []*v1.InMemoryFunction, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() int { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).MemorySize
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() string { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Name
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[go.shape.*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(string, string) { (*parquet.GenericWriter[go.shape.*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func(io.Writer) { (*parquet.GenericWriter[go.shape.*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]uint32, []*v1.InMemoryMapping) { (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(context.Context, []*v1.InMemoryMapping, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() int { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).MemorySize
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() string { return (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Name
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[go.shape.*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(string, string) { (*parquet.GenericWriter[go.shape.*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func(io.Writer) { (*parquet.GenericWriter[go.shape.*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*Writer).Close
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]uint32, []string) { (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(context.Context, []string, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() int { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).maxRowsPerRowGroup
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:92:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() error { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Size
./pkg/phlaredb/deduplicating_slice.go:57:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).MemorySize
./pkg/phlaredb/deduplicating_slice.go:53:6: inlining call to atomic.(*Uint64).Load
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() string { return (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: inlining call to phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Name
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[go.shape.*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: inlining call to parquet.(*Writer).Schema
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).ReadRowsFrom
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(string, string) { (*parquet.GenericWriter[go.shape.*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: inlining call to parquet.(*Writer).SetKeyValueMetadata
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).WriteRowGroup
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func(io.Writer) { (*parquet.GenericWriter[go.shape.*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: inlining call to parquet.(*Writer).Reset
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) func() error { return (*parquet.GenericWriter[go.shape.*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*GenericWriter[go.shape.*uint8]).Close
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: inlining call to parquet.(*Writer).Close
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() { (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Trailer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() http.Header { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() any { return (*connect.Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: inlining call to connect.(*Response[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Any
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func(string) { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).setRequestMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() { (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() string { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).HTTPMethod
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() http.Header { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() connect.Peer { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() connect.Spec { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() any { return (*connect.Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: inlining call to connect.(*Request[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[net/http.response]).CompareAndSwap with cost 70 as: method(*atomic.Pointer[net/http.response]) func(*http.response, *http.response) bool { return (*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).CompareAndSwap(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.old, atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: inlining call to atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).CompareAndSwap
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[net/http.response]).Swap with cost 68 as: method(*atomic.Pointer[net/http.response]) func(*http.response) *http.response { return (*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Swap(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: inlining call to atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Swap
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[net/http.response]).Store with cost 66 as: method(*atomic.Pointer[net/http.response]) func(*http.response) { (*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Store(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.val) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: inlining call to atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Store
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[net/http.response]).Load with cost 9 as: method(*atomic.Pointer[net/http.response]) func() *http.response { return (*atomic.Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Load(atomic.x, &atomic..dict.Pointer[net/http.response]) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: inlining call to atomic.(*Pointer[go.shape.struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Load
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6: can inline btree.(*node[github.com/google/btree.Item]).reset with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(*btree.copyOnWriteContext[github.com/google/btree.Item]) bool { return (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).reset(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.c) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6: can inline btree.(*node[github.com/google/btree.Item]).print with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(io.Writer, int) { (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).print(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.w, btree.level) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6: can inline btree.(*node[github.com/google/btree.Item]).iterate with cost 77 as: method(*btree.node[github.com/google/btree.Item]) func(btree.direction, btree.optionalItem[github.com/google/btree.Item], btree.optionalItem[github.com/google/btree.Item], bool, bool, btree.ItemIteratorG[github.com/google/btree.Item]) (bool, bool) { return .autotmp_9, .autotmp_10 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6: can inline btree.(*node[github.com/google/btree.Item]).growChildAndRemove with cost 75 as: method(*btree.node[github.com/google/btree.Item]) func(int, btree.Item, int, btree.toRemove) (btree.Item, bool) { return .autotmp_7, .autotmp_8 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6: can inline btree.(*node[github.com/google/btree.Item]).remove with cost 74 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item, int, btree.toRemove) (btree.Item, bool) { return .autotmp_6, .autotmp_7 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6: can inline btree.(*node[github.com/google/btree.Item]).get with cost 72 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item) (btree.Item, bool) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6: can inline btree.(*node[github.com/google/btree.Item]).insert with cost 73 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item, int) (btree.Item, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:6: can inline btree.(*node[github.com/google/btree.Item]).maybeSplitChild with cost 64 as: method(*btree.node[github.com/google/btree.Item]) func(int, int) bool { return (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i, btree.maxItems) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:6: can inline btree.(*node[github.com/google/btree.Item]).split with cost 72 as: method(*btree.node[github.com/google/btree.Item]) func(int) (btree.Item, *btree.node[github.com/google/btree.Item]) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6: cannot inline btree.(*node[github.com/google/btree.Item]).mutableChild: function too complex: cost 86 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6: inlining call to btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableChild
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6: can inline btree.(*node[github.com/google/btree.Item]).mutableFor with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(*btree.copyOnWriteContext[github.com/google/btree.Item]) *btree.node[github.com/google/btree.Item] { return (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6: can inline btree.(*copyOnWriteContext[github.com/google/btree.Item]).freeNode with cost 63 as: method(*btree.copyOnWriteContext[github.com/google/btree.Item]) func(*btree.node[github.com/google/btree.Item]) btree.freeType { return (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item], btree.n) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6: can inline btree.(*copyOnWriteContext[github.com/google/btree.Item]).newNode with cost 76 as: method(*btree.copyOnWriteContext[github.com/google/btree.Item]) func() *btree.node[github.com/google/btree.Item] { return (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6: inlining call to btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6: can inline btree.(*FreeListG[github.com/google/btree.Item]).freeNode with cost 63 as: method(*btree.FreeListG[github.com/google/btree.Item]) func(*btree.node[github.com/google/btree.Item]) bool { return (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item], btree.n) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:6: can inline btree.(*FreeListG[github.com/google/btree.Item]).newNode with cost 62 as: method(*btree.FreeListG[github.com/google/btree.Item]) func() *btree.node[github.com/google/btree.Item] { return (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: can inline btree.items[*github.com/google/btree.node[github.com/google/btree.Item]].find with cost 73 as: method(btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(*btree.node[github.com/google/btree.Item], func(*btree.node[github.com/google/btree.Item], *btree.node[github.com/google/btree.Item]) bool) (int, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).truncate with cost 43 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int) { (*btree.items[go.shape.*uint8]).truncate(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: inlining call to btree.(*items[go.shape.*uint8]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).pop with cost 38 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func() *btree.node[github.com/google/btree.Item] { return (*btree.items[go.shape.*uint8]).pop(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: inlining call to btree.(*items[go.shape.*uint8]).pop
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).removeAt with cost 52 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int) *btree.node[github.com/google/btree.Item] { return (*btree.items[go.shape.*uint8]).removeAt(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: inlining call to btree.(*items[go.shape.*uint8]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).insertAt with cost 40 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int, *btree.node[github.com/google/btree.Item]) { (*btree.items[go.shape.*uint8]).insertAt(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index, btree.item) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: inlining call to btree.(*items[go.shape.*uint8]).insertAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: can inline btree.items[github.com/google/btree.Item].find with cost 73 as: method(btree.items[github.com/google/btree.Item]) func(btree.Item, func(btree.Item, btree.Item) bool) (int, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[github.com/google/btree.Item]).truncate with cost 43 as: method(*btree.items[github.com/google/btree.Item]) func(int) { (*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[github.com/google/btree.Item]).pop with cost 38 as: method(*btree.items[github.com/google/btree.Item]) func() btree.Item { return (*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop(btree.s, &btree..dict.items[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[github.com/google/btree.Item]).removeAt with cost 52 as: method(*btree.items[github.com/google/btree.Item]) func(int) btree.Item { return (*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[github.com/google/btree.Item]).insertAt with cost 40 as: method(*btree.items[github.com/google/btree.Item]) func(int, btree.Item) { (*btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index, btree.item) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: inlining call to btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insertAt
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[string]).CompareAndSwap with cost 70 as: method(*atomic.Pointer[string]) func(*string, *string) bool { return (*atomic.Pointer[go.shape.string]).CompareAndSwap(atomic.x, &atomic..dict.Pointer[string], atomic.old, atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: inlining call to atomic.(*Pointer[go.shape.string]).CompareAndSwap
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[string]).Swap with cost 68 as: method(*atomic.Pointer[string]) func(*string) *string { return (*atomic.Pointer[go.shape.string]).Swap(atomic.x, &atomic..dict.Pointer[string], atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: inlining call to atomic.(*Pointer[go.shape.string]).Swap
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[string]).Store with cost 66 as: method(*atomic.Pointer[string]) func(*string) { (*atomic.Pointer[go.shape.string]).Store(atomic.x, &atomic..dict.Pointer[string], atomic.val) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: inlining call to atomic.(*Pointer[go.shape.string]).Store
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[string]).Load with cost 9 as: method(*atomic.Pointer[string]) func() *string { return (*atomic.Pointer[go.shape.string]).Load(atomic.x, &atomic..dict.Pointer[string]) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: inlining call to atomic.(*Pointer[go.shape.string]).Load
<autogenerated>:1: inlining call to btree.items[github.com/google/btree.Item].find
<autogenerated>:1: inlining call to btree.items[*github.com/google/btree.node[github.com/google/btree.Item]].find
cmd/pyroscope/main.go:31:3: mf escapes to heap:
cmd/pyroscope/main.go:31:3:   flow: ~R0 = &mf:
cmd/pyroscope/main.go:31:3:     from &mf (address-of) at cmd/pyroscope/main.go:31:3
cmd/pyroscope/main.go:31:3:     from ~R0 = &mf (assign-pair) at cmd/pyroscope/main.go:31:3
cmd/pyroscope/main.go:31:3:   flow: ~r0 = ~R0:
cmd/pyroscope/main.go:31:3:     from ~R0 (interface-converted) at cmd/pyroscope/main.go:31:3
cmd/pyroscope/main.go:31:3:     from return ~R0 (return) at cmd/pyroscope/main.go:29:2
cmd/pyroscope/main.go:28:7: parameter mf leaks to mf with derefs=1:
cmd/pyroscope/main.go:28:7:   flow: mf = *mf:
cmd/pyroscope/main.go:28:7:     from *mf (indirection) at cmd/pyroscope/main.go:31:4
cmd/pyroscope/main.go:28:7:     from mf := *mf (assign-pair) at cmd/pyroscope/main.go:31:3
cmd/pyroscope/main.go:28:7: leaking param content: mf
cmd/pyroscope/main.go:31:3: moved to heap: mf
cmd/pyroscope/main.go:34:7: parameter mf leaks to ~r0 with derefs=0:
cmd/pyroscope/main.go:34:7:   flow: ~r0 = mf:
cmd/pyroscope/main.go:34:7:     from mf.Config (dot of pointer) at cmd/pyroscope/main.go:35:12
cmd/pyroscope/main.go:34:7:     from &mf.Config (address-of) at cmd/pyroscope/main.go:35:9
cmd/pyroscope/main.go:34:7:     from return &mf.Config (return) at cmd/pyroscope/main.go:35:2
cmd/pyroscope/main.go:34:7: leaking param: mf to result ~r0 level=0
cmd/pyroscope/main.go:38:7: parameter mf leaks to {heap} with derefs=0:
cmd/pyroscope/main.go:38:7:   flow: flag.p = mf:
cmd/pyroscope/main.go:38:7:     from mf.PrintHelpAll (dot of pointer) at cmd/pyroscope/main.go:44:16
cmd/pyroscope/main.go:38:7:     from &mf.PrintHelpAll (address-of) at cmd/pyroscope/main.go:44:13
cmd/pyroscope/main.go:38:7:     from flag.f, flag.p, flag.name, flag.value, flag.usage := fs, &mf.PrintHelpAll, "help-all", false, "Print help, also including advanced and experimental parameters." (assign-pair) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:7:   flow: flag.p = flag.p:
cmd/pyroscope/main.go:38:7:     from flag.val, flag.p := flag.value, flag.p (assign-pair) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:7:   flow: ~R0 = flag.p:
cmd/pyroscope/main.go:38:7:     from ~R0 = (*flag.boolValue)(flag.p) (assign-pair) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:7:   flow: {heap} = ~R0:
cmd/pyroscope/main.go:38:7:     from ~R0 (interface-converted) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:7:     from (*flag.FlagSet).Var(flag.f, ~R0, flag.name, flag.usage) (call parameter) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:36: parameter fs leaks to {heap} with derefs=1:
cmd/pyroscope/main.go:38:36:   flow: flag.f = fs:
cmd/pyroscope/main.go:38:36:     from flag.f, flag.p, flag.name, flag.value, flag.usage := fs, &mf.PrintHelpAll, "help-all", false, "Print help, also including advanced and experimental parameters." (assign-pair) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:38:36:   flow: {heap} = *flag.f:
cmd/pyroscope/main.go:38:36:     from (*flag.FlagSet).Var(flag.f, ~R0, flag.name, flag.usage) (call parameter) at cmd/pyroscope/main.go:44:12
cmd/pyroscope/main.go:39:25: context.backgroundCtx{} escapes to heap:
cmd/pyroscope/main.go:39:25:   flow: ~R0 = &{storage for context.backgroundCtx{}}:
cmd/pyroscope/main.go:39:25:     from context.backgroundCtx{} (spill) at cmd/pyroscope/main.go:39:25
cmd/pyroscope/main.go:39:25:     from ~R0 = context.backgroundCtx{} (assign-pair) at cmd/pyroscope/main.go:39:25
cmd/pyroscope/main.go:39:25:   flow: {heap} = ~R0:
cmd/pyroscope/main.go:39:25:     from (*phlare.Config).RegisterFlagsWithContext(phlare.c, ~R0, phlare.f) (call parameter) at cmd/pyroscope/main.go:39:25
cmd/pyroscope/main.go:38:7: leaking param: mf
cmd/pyroscope/main.go:38:36: leaking param content: fs
cmd/pyroscope/main.go:39:25: context.backgroundCtx{} escapes to heap
cmd/pyroscope/main.go:55:3: flags escapes to heap:
cmd/pyroscope/main.go:55:3:   flow: {heap} = &flags:
cmd/pyroscope/main.go:55:3:     from &flags (address-of) at cmd/pyroscope/main.go:58:33
cmd/pyroscope/main.go:55:3:     from &flags (interface-converted) at cmd/pyroscope/main.go:58:33
cmd/pyroscope/main.go:55:3:     from cfg.DynamicUnmarshal(&flags, os.Args[1:], flag.CommandLine) (call parameter) at cmd/pyroscope/main.go:58:32
cmd/pyroscope/main.go:80:28: main capturing by value: sort.a (addr=false assign=false width=24)
cmd/pyroscope/main.go:80:28: main capturing by value: sort.x (addr=false assign=false width=16)
cmd/pyroscope/main.go:91:27: "Modules marked with * are included in target All." escapes to heap:
cmd/pyroscope/main.go:91:27:   flow: {storage for ... argument} = &{storage for "Modules marked with * are included in target All."}:
cmd/pyroscope/main.go:91:27:     from "Modules marked with * are included in target All." (spill) at cmd/pyroscope/main.go:91:27
cmd/pyroscope/main.go:91:27:     from ... argument (slice-literal-element) at cmd/pyroscope/main.go:91:15
cmd/pyroscope/main.go:91:27:   flow: {heap} = {storage for ... argument}:
cmd/pyroscope/main.go:91:27:     from ... argument (spill) at cmd/pyroscope/main.go:91:15
cmd/pyroscope/main.go:91:27:     from fmt.Fprintln(os.Stdout, ... argument...) (call parameter) at cmd/pyroscope/main.go:91:15
cmd/pyroscope/main.go:86:29: m escapes to heap:
cmd/pyroscope/main.go:86:29:   flow: {storage for ... argument} = &{storage for m}:
cmd/pyroscope/main.go:86:29:     from m (spill) at cmd/pyroscope/main.go:86:29
cmd/pyroscope/main.go:86:29:     from ... argument (slice-literal-element) at cmd/pyroscope/main.go:86:17
cmd/pyroscope/main.go:86:29:   flow: {heap} = {storage for ... argument}:
cmd/pyroscope/main.go:86:29:     from ... argument (spill) at cmd/pyroscope/main.go:86:17
cmd/pyroscope/main.go:86:29:     from fmt.Fprintln(os.Stdout, ... argument...) (call parameter) at cmd/pyroscope/main.go:86:17
cmd/pyroscope/main.go:84:32: "*" escapes to heap:
cmd/pyroscope/main.go:84:32:   flow: {storage for ... argument} = &{storage for "*"}:
cmd/pyroscope/main.go:84:32:     from "*" (spill) at cmd/pyroscope/main.go:84:32
cmd/pyroscope/main.go:84:32:     from ... argument (slice-literal-element) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:84:32:   flow: {heap} = {storage for ... argument}:
cmd/pyroscope/main.go:84:32:     from ... argument (spill) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:84:32:     from fmt.Fprintln(os.Stdout, ... argument...) (call parameter) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:84:29: m escapes to heap:
cmd/pyroscope/main.go:84:29:   flow: {storage for ... argument} = &{storage for m}:
cmd/pyroscope/main.go:84:29:     from m (spill) at cmd/pyroscope/main.go:84:29
cmd/pyroscope/main.go:84:29:     from ... argument (slice-literal-element) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:84:29:   flow: {heap} = {storage for ... argument}:
cmd/pyroscope/main.go:84:29:     from ... argument (spill) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:84:29:     from fmt.Fprintln(os.Stdout, ... argument...) (call parameter) at cmd/pyroscope/main.go:84:17
cmd/pyroscope/main.go:72:28: version.Print("phlare") escapes to heap:
cmd/pyroscope/main.go:72:28:   flow: {storage for ... argument} = &{storage for version.Print("phlare")}:
cmd/pyroscope/main.go:72:28:     from version.Print("phlare") (spill) at cmd/pyroscope/main.go:72:28
cmd/pyroscope/main.go:72:28:     from ... argument (slice-literal-element) at cmd/pyroscope/main.go:72:14
cmd/pyroscope/main.go:72:28:   flow: fmt.a = &{storage for ... argument}:
cmd/pyroscope/main.go:72:28:     from ... argument (spill) at cmd/pyroscope/main.go:72:14
cmd/pyroscope/main.go:72:28:     from fmt.a := ... argument (assign-pair) at cmd/pyroscope/main.go:72:14
cmd/pyroscope/main.go:72:28:   flow: {heap} = *fmt.a:
cmd/pyroscope/main.go:72:28:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at cmd/pyroscope/main.go:72:14
cmd/pyroscope/main.go:55:3: moved to heap: flags
cmd/pyroscope/main.go:59:14: ... argument does not escape
cmd/pyroscope/main.go:66:14: ... argument does not escape
cmd/pyroscope/main.go:72:14: ... argument does not escape
cmd/pyroscope/main.go:72:28: version.Print("phlare") escapes to heap
cmd/pyroscope/main.go:80:28: func literal does not escape
cmd/pyroscope/main.go:84:17: ... argument does not escape
cmd/pyroscope/main.go:84:29: m escapes to heap
cmd/pyroscope/main.go:84:32: "*" escapes to heap
cmd/pyroscope/main.go:86:17: ... argument does not escape
cmd/pyroscope/main.go:86:29: m escapes to heap
cmd/pyroscope/main.go:91:15: ... argument does not escape
cmd/pyroscope/main.go:91:27: "Modules marked with * are included in target All." escapes to heap
cmd/pyroscope/main.go:98:24: ... argument does not escape
cmd/pyroscope/main.go:99:15: ... argument does not escape
cmd/pyroscope/main.go:109:14: ... argument does not escape
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37: parameter atomic.old leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: {heap} = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:33
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:31
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:69
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:72
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:70
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:69
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28: parameter atomic.val leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: {heap} = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:50
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:53
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:51
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:50
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:60
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:58
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.LoadPointer(&atomic.x.v) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:57
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7: parameter btree.f leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:   flow: sync.m = btree.f:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from btree.f.mu (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from btree.f.mu (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from sync.m := btree.f.mu (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:   flow: {heap} = sync.m:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from sync.m.state (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from &sync.m.state (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from atomic.AddInt32(&sync.m.state, -mutexLocked) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:120:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33:     from append(btree.f.freelist, btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:117:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:668:19: btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:669:22: btree.(*copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42:     from (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c.freelist, (*[6]uintptr)(btree..dict[3]), btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:671:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7: parameter btree.c leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7:   flow: {heap} = *btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7:     from btree.c.freelist (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:671:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7:     from (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c.freelist, (*[6]uintptr)(btree..dict[3]), btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:671:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7:     from (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, (*[8]uintptr)(btree..dict[22]), btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:884:19
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25: parameter btree.c leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25:   flow: {heap} = *btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25:     from (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, (*[8]uintptr)(btree..dict[22]), btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:884:19
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62: btree.n.items escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:   flow: {storage for ... argument} = &{storage for btree.n.items}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:     from btree.n.items (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:     from ... argument (slice-literal-element) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:   flow: {heap} = {storage for ... argument}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:     from ... argument (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62:     from fmt.Fprintf(btree.w, "%sNODE:%v\n", ... argument...) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46: strings.Repeat("  ", btree.level) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:   flow: {storage for ... argument} = &{storage for strings.Repeat("  ", btree.level)}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:     from strings.Repeat("  ", btree.level) (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:     from ... argument (slice-literal-element) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:   flow: {heap} = {storage for ... argument}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:     from ... argument (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46:     from fmt.Fprintf(btree.w, "%sNODE:%v\n", ... argument...) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25: parameter btree.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25:   flow: {heap} = btree.w:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25:     from fmt.Fprintf(btree.w, "%sNODE:%v\n", ... argument...) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7: parameter btree.n leaks to {storage for btree.n.items} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7:   flow: {storage for btree.n.items} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7:     from btree.n.items (interface-converted) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:13: ... argument does not escape
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:46: strings.Repeat("  ", btree.level) escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:570:62: btree.n.items escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:32: btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find capturing by value: btree.less (addr=false assign=false width=8)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find capturing by value: btree.item (addr=false assign=false width=16)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find capturing by value: btree.s (addr=false assign=false width=24)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find capturing by value: btree..dict (addr=false assign=false width=8)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.s[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.less(btree.item, btree.s[btree.i]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.less(btree.item, btree.s[btree.i]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: func literal does not escape
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49: parameter btree.stop leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49:   flow: {heap} = btree.stop:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49:     from btree.stop.item (dot) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:519:49
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49:     from btree.n.cow.less(btree.n.items[btree.i], btree.stop.item) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:519:32
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42: parameter btree.start leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42:   flow: {heap} = btree.start:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42:     from btree.start.item (dot) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:506:33
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[18]), btree.start.item, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:506:27
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:506:16
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[18]), btree.start.item, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:506:27
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:109:13: btree.(*FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode ignoring self-assignment in btree.f.freelist = btree.f.freelist[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7: parameter btree.f leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:   flow: sync.m = btree.f:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from btree.f.mu (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from btree.f.mu (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from sync.m := btree.f.mu (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:   flow: {heap} = sync.m:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from sync.m.state (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from &sync.m.state (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from atomic.AddInt32(&sync.m.state, -mutexLocked) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:110:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7: parameter btree.f leaks to btree.n with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:   flow: btree.n = **btree.f:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from btree.f.freelist (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:107:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from btree.f.freelist[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:107:16
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from btree.n = btree.f.freelist[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:107:4
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13: new(<node DYNAMICTYPE>) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13:   flow: btree.n = &{storage for new(<node DYNAMICTYPE>)}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13:     from new(<node DYNAMICTYPE>) (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13:     from return new(<node DYNAMICTYPE>) (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:105:13: new(<node DYNAMICTYPE>) escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:241:13: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor ignoring self-assignment in btree.out.items = btree.out.items[:len(btree.n.items)]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19: make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19:   flow: {heap} = &{storage for make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items))}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19:     from make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19:     from btree.out.items = make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:248:16: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor ignoring self-assignment in btree.out.children = btree.out.children[:len(btree.n.children)]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22: make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22:   flow: {heap} = &{storage for make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children))}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22:     from make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22:     from btree.out.children = make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:16
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19: make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19:   flow: {heap} = &{storage for make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items))}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19:     from make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) (non-constant size) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22: make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22:   flow: {heap} = &{storage for make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children))}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22:     from make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) (non-constant size) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:245:19
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from copy(btree.out.items, btree.n.items) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:245:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from copy(btree.out.items, btree.n.items) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:245:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30: parameter btree.cow leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:   flow: btree.c = btree.cow:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:     from btree.c, btree..dict := btree.cow, (*[8]uintptr)(btree..dict[0]) (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:239:20
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:   flow: {heap} = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:     from btree.n.cow = btree.c (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:239:20
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7: parameter btree.n leaks to ~r0 with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: ~r0 = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from return btree.n (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:237:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:243:19: make(btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }], len(btree.n.items), cap(btree.n.items)) escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:250:22: make(btree.items[go.shape.*uint8], len(btree.n.children), cap(btree.n.children)) escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:442:36: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:446:53: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:452:41: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:456:71: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:464:32: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:465:36: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:375:22: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:380:27: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:387:28: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9: "invalid type" escapes to heap:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9:   flow: {heap} = &{storage for "invalid type"}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9:     from "invalid type" (spill) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9:     from panic("invalid type") (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:8
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n, btree..dict, btree.i := btree.n, (*[90]uintptr)(btree..dict[13]), btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, (*[90]uintptr)(btree..dict[14]), btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n, btree..dict, btree.i := btree.n, (*[90]uintptr)(btree..dict[13]), btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[12]), btree.item, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:384:26
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:   flow: btree.item = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, (*[90]uintptr)(btree..dict[14]), btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[12]), btree.item, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:384:26
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n, btree..dict, btree.i := btree.n, (*[90]uintptr)(btree..dict[13]), btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, (*[90]uintptr)(btree..dict[14]), btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n, btree..dict, btree.i := btree.n, (*[90]uintptr)(btree..dict[13]), btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:398:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7: parameter btree.n leaks to _ with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: btree.out = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.out := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: _ = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from return btree.out, true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:411:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7: parameter btree.n leaks to _ with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, (*[90]uintptr)(btree..dict[14]), btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.out = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.out := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: _ = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from return btree.out, true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:411:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7: parameter btree.n leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: btree.out = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from btree.out := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: _ = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from return btree.out, true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:411:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: .autotmp_17 = _:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: ~r0 = .autotmp_17:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from return go.shape.interface { Less(github.com/google/btree.Item) bool }(.autotmp_17), .autotmp_18 (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7: parameter btree.n leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, (*[90]uintptr)(btree..dict[14]), btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: btree.out = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from btree.out := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:405:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: _ = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from return btree.out, true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:411:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: .autotmp_17 = _:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: ~r0 = .autotmp_17:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from return go.shape.interface { Less(github.com/google/btree.Item) bool }(.autotmp_17), .autotmp_18 (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:471:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:392:9: "invalid type" escapes to heap
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23: parameter btree.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23:   flow: {heap} = btree.key:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[10]), btree.key, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:322:26
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:322:15
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[10]), btree.key, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:322:26
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7: parameter btree.n leaks to _ with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:   flow: _ = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:324:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:324:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from return btree.n.items[btree.i], true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:324:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:269:18: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).split ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:272:22: btree.(*node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).split ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:268:35
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.items[btree.i + 1:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:268:41
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from append(btree.next.items, btree.n.items[btree.i + 1:]...) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:268:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from append(btree.next.items, btree.n.items[btree.i + 1:]...) (appended slice...) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:268:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: btree.c = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:267:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.c, btree..dict := btree.n.cow, (*[8]uintptr)(btree..dict[2]) (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:267:23
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: {heap} = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.cow = btree.c (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:267:23
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7: parameter btree.n leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: btree.item = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:266:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:266:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from btree.item := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:266:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: ~r0 = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from return btree.item, btree.next (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:274:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: btree.s = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.n.children (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.n.children (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:12
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.s, btree..dict, btree.index, btree.item := btree.n.children, (*[12]uintptr)(btree..dict[7]), btree.i + 1, btree.second (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from (*btree.s)[btree.index:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: btree.s = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.n.children (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:3
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.n.children (address-of) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:12
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from btree.s, btree..dict, btree.index, btree.item := btree.n.children, (*[12]uintptr)(btree..dict[7]), btree.i + 1, btree.second (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: {temp} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from append(*btree.s, btree.zero) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from *btree.s = append(*btree.s, btree.zero) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:286:21
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild(btree.n, (*[90]uintptr)(btree..dict[9]), btree.i, btree.maxItems) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:304:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.n.items, (*[12]uintptr)(btree..dict[8]), btree.item, btree.n.cow.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:294:26
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild(btree.n, (*[90]uintptr)(btree..dict[9]), btree.i, btree.maxItems) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:304:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7: parameter btree.n leaks to _ with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:   flow: btree.out = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from btree.n.items (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:312:12
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from btree.n.items[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:312:18
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from btree.out := btree.n.items[btree.i] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:312:8
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:   flow: _ = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from return btree.out, true (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:314:4
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:33
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:31
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7: parameter btree.n leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: {temp} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.children (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:8
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.children[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:17
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:31
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: btree.c = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.c := (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:257:4
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: ~r0 = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from return btree.c (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:259:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7: parameter btree.c leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:   flow: {heap} = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:     from btree.n.cow = btree.c (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:650:8
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7: parameter btree.c leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:   flow: {heap} = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:     from btree.n.cow = btree.c (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:650:8
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:32: btree.items[go.shape.*uint8].find capturing by value: btree.less (addr=false assign=false width=8)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: btree.items[go.shape.*uint8].find capturing by value: btree.item (addr=false assign=false width=8)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: btree.items[go.shape.*uint8].find capturing by value: btree.s (addr=false assign=false width=24)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: btree.items[go.shape.*uint8].find capturing by value: btree..dict (addr=false assign=false width=8)
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.s[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.less(btree.item, btree.s[btree.i]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.less(btree.item, btree.s[btree.i]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:216:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: func literal does not escape
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:204:14: btree.(*items[go.shape.*uint8]).truncate ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:196:5: btree.(*items[go.shape.*uint8]).pop ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7: parameter btree.s leaks to btree.out with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:9
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:12
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.out = (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:186:5: btree.(*items[go.shape.*uint8]).removeAt ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index + 1:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.item = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.item := (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~r0 = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from return btree.item (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:187:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from (*btree.s)[btree.index] = btree.item (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:176:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from (*btree.s)[btree.index:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:28
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {temp} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from append(*btree.s, btree.zero) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s = append(*btree.s, btree.zero) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:5
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:204:14: btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).truncate ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:196:5: btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).pop ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7: parameter btree.s leaks to btree.out with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:9
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:12
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.out = (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:193:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:186:5: btree.(*items[go.shape.interface { Less(github.com/google/btree.Item) bool }]).removeAt ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:22
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index + 1:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:183:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.item = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:11
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.item := (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:182:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~r0 = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from return btree.item (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:187:2
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from (*btree.s)[btree.index] = btree.item (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:176:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:25
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from (*btree.s)[btree.index:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:28
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:174:7
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {temp} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:14
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from append(*btree.s, btree.zero) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:13
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s = append(*btree.s, btree.zero) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:172:5
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37: parameter atomic.old leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: {heap} = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:33
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:31
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:64:30
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:69
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:72
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:70
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:69
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28: parameter atomic.val leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: {heap} = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:50
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:53
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:51
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:50
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:60
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:58
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.LoadPointer(&atomic.x.v) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:57
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7: parameter zeropool.p leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:   flow: {heap} = zeropool.p:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:     from zeropool.p.items (dot of pointer) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:37:13
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:     from zeropool.p.items (address-of) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:37:19
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:     from (*sync.Pool).Get(zeropool.p.items) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:37:23
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12: new(<node DYNAMICTYPE>) escapes to heap:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:   flow: zeropool.ptr = &{storage for new(<node DYNAMICTYPE>)}:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:     from new(<node DYNAMICTYPE>) (spill) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:     from zeropool.ptr = new(<node DYNAMICTYPE>) (assign) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:7
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:   flow: {heap} = zeropool.ptr:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:     from zeropool.ptr (interface-converted) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:65:14
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12:     from (*sync.Pool).Put(zeropool.p.items, zeropool.ptr) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:65:13
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23: parameter zeropool.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23:   flow: {heap} = zeropool.item:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23:     from *zeropool.ptr = zeropool.item (assign) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:64:7
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7: parameter zeropool.p leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:   flow: {heap} = zeropool.p:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:     from zeropool.p.pointers (dot of pointer) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:59:16
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:     from zeropool.p.pointers (address-of) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:59:25
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:     from (*sync.Pool).Get(zeropool.p.pointers) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:59:29
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:62:12: new(<node DYNAMICTYPE>) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: phlaredb.e = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.elems[phlaredb.i] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:247:14
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.e := phlaredb.elems[phlaredb.i] (assign) at ./pkg/phlaredb/deduplicating_slice.go:247:6
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = phlaredb.e:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (func(go.shape.*uint8, go.shape.string) go.shape.string)(&phlaredb..dict[5])(phlaredb.s.helper, phlaredb.e) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:248:21
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23: parameter zeropool.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23:   flow: {heap} = zeropool.item:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:23:     from (*zeropool.Pool[go.shape.[]int64]).Put(zeropool.p, &zeropool..dict.Pool[[]int64], zeropool.item) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7: parameter zeropool.p leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:   flow: {heap} = zeropool.p:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:7:     from (*zeropool.Pool[go.shape.[]int64]).Put(zeropool.p, &zeropool..dict.Pool[[]int64], zeropool.item) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7: parameter zeropool.p leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:   flow: {heap} = zeropool.p:
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:7:     from (*zeropool.Pool[go.shape.[]int64]).Get(zeropool.p, &zeropool..dict.Pool[[]int64]) (call parameter) at ../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:6
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: phlaredb.rewritingMap = &{storage for make(map[int64]int64)}:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from make(map[int64]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:175:22
./pkg/phlaredb/deduplicating_slice.go:175:22:     from phlaredb.rewritingMap := make(map[int64]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:175:3
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: {heap} = phlaredb.rewritingMap:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from (func(go.shape.*uint8, *phlaredb.rewriter, phlaredb.idConversionTable))(&phlaredb..dict[9])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.rewritingMap) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:226:24
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: prometheus.lvs = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:     from prometheus.v, prometheus.lvs := phlaredb.s.metrics.sizeBytes, ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: {heap} = prometheus.lvs:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from (*prometheus.GaugeVec).GetMetricWithLabelValues(prometheus.v, prometheus.lvs...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from phlaredb.elems[phlaredb.pos] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:181:45
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.string) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.string) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:115:14: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: .autotmp_45 (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:119:32: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.options (addr=false assign=false width=24)
./pkg/phlaredb/deduplicating_slice.go:120:31: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:147:15:   flow: {heap} = &{storage for make([]parquet.Row, phlaredb.rowsToFlush)}:
./pkg/phlaredb/deduplicating_slice.go:147:15:     from make([]parquet.Row, phlaredb.rowsToFlush) (non-constant size) at ./pkg/phlaredb/deduplicating_slice.go:147:15
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: parameter parquet.config leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:   flow: {heap} = parquet.config:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:61
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:69
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from (*parquet.SortingConfig).Apply(parquet.config.Sorting, parquet.options...) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:75
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {temp} = &{storage for []parquet.SortingOption{}}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from []parquet.SortingOption{} (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from append([]parquet.SortingOption{}, parquet.options...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = {temp}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options = append([]parquet.SortingOption{}, parquet.options...) (assign) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: leaking param: config
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:631:29: config does not escape
./pkg/phlaredb/deduplicating_slice.go:117:29: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: os.f = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from phlaredb.s.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:13
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f := phlaredb.s.file (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = *os.f:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*os.file).close(os.f.file) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:85:24
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from parquet.rows[parquet.i] (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from parquet.rows[parquet.i] (interface-converted) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.Writer).Write(parquet.w.base, parquet.rows[parquet.i]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:24
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:13
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.Writer).Write(parquet.w.base, parquet.rows[parquet.i]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:233:24
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23: make([]parquet.Row, len(parquet.rows)) escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23:   flow: {heap} = &{storage for make([]parquet.Row, len(parquet.rows))}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23:     from make([]parquet.Row, len(parquet.rows)) (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23:     from parquet.w.base.rowbuf = make([]parquet.Row, len(parquet.rows)) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:17
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:221:24: parquet.(*GenericWriter[go.shape.*uint8]).writeRows capturing by value: .autotmp_17 (addr=false assign=false width=24)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23: make([]parquet.Row, len(parquet.rows)) escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23:   flow: {heap} = &{storage for make([]parquet.Row, len(parquet.rows))}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23:     from make([]parquet.Row, len(parquet.rows)) (non-constant size) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from parquet.rows[parquet.i] (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:225:64
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from &parquet.rows[parquet.i] (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:225:59
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from &parquet.rows[parquet.i] (interface-converted) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:225:59
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.Schema).Deconstruct(parquet.schema, parquet.w.base.rowbuf[parquet.i], &parquet.rows[parquet.i]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:225:40
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:219:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from parquet.w.base.rowbuf (dot) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:219:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from parquet.w.base.rowbuf[:len(parquet.rows)] (slice) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:219:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from parquet.w.base.rowbuf = parquet.w.base.rowbuf[:len(parquet.rows)] (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:219:17
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:217:23: make([]parquet.Row, len(parquet.rows)) escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20: make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20:   flow: {heap} = &{storage for make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns))}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20:     from make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20:     from parquet.w.columns = make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:136:2: parquet.makeWriteFunc[go.shape.*uint8] capturing by value: parquet.writeRows (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6: parquet.makeWriteFunc[go.shape.*uint8] capturing by value: parquet..dict (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20: make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20:   flow: {heap} = &{storage for make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns))}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20:     from make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) (non-constant size) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: parquet.s = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from parquet..dict, parquet.s := (*[3]uintptr)(parquet..dict[0]), parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: unsafecast.data = parquet.s:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from unsafecast..dict, unsafecast.data := (*[4]uintptr)(parquet..dict[0]), parquet.s (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: unsafecast.data = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from unsafecast..dict, unsafecast.data := (*[6]uintptr)(unsafecast..dict[0]), unsafecast.data (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from &unsafecast.data (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (indirection) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = unsafe.Pointer(~R0) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: parquet.base = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from parquet.base, parquet.length, parquet.offset := ~R0, len(parquet.s), unsafe.Sizeof(parquet.model) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: sparse.base = parquet.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from sparse.base, sparse.length, sparse.offset := parquet.base, parquet.length, parquet.offset (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: sparse.base = sparse.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from sparse.base, sparse.length, sparse.offset := sparse.base, uintptr(sparse.length), sparse.offset (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = sparse.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from sparse.array{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = sparse.array{...} (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from sparse.Array{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = sparse.Array{...} (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:41
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:   flow: {heap} = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35:     from parquet.writeRows(parquet.w.columns, ~R0, parquet.columnLevels{}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:14: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:14:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:14:     from parquet.w.columns (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:14:     from parquet.writeRows(parquet.w.columns, ~R0, parquet.columnLevels{}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:147:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:43: parameter parquet.schema leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:43:   flow: {heap} = *parquet.schema:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:43:     from parquet.writeRowsFuncOf(parquet.t, parquet.schema, nil) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:136:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:27: parameter parquet.t leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:27:   flow: {heap} = parquet.t:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:27:     from parquet.writeRowsFuncOf(parquet.t, parquet.schema, nil) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:136:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9: func literal escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9:   flow: ~r0 = &{storage for func literal}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9:     from func literal (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9:     from return func literal (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:2
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6: parameter parquet..dict leaks to {storage for func literal} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6:   flow: {storage for func literal} = parquet..dict:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6:     from parquet..dict (captured by a closure) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:14: leaking param content: w
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:35: leaking param: rows
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9: func literal escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:139:20: make([]parquet.ColumnBuffer, len(parquet.w.base.writer.columns)) escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51: "cannot create writer for values of type " + parquet.t.String() escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:   flow: {heap} = &{storage for "cannot create writer for values of type " + parquet.t.String()}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:     from "cannot create writer for values of type " + parquet.t.String() (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:     from panic("cannot create writer for values of type " + parquet.t.String()) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:7
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51: "cannot create writer for values of type " + parquet.t.String() escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:   flow: {storage for "cannot create writer for values of type " + parquet.t.String()} = &{storage for "cannot create writer for values of type " + parquet.t.String()}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:     from "cannot create writer for values of type " + parquet.t.String() (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51:     from "cannot create writer for values of type " + parquet.t.String() (interface-converted) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29: parquet.writeFuncOf[go.shape.*uint8] capturing by value: .autotmp_4 (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29: parquet.writeFuncOf[go.shape.*uint8] capturing by value: .autotmp_5 (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:41: parameter parquet.schema leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:41:   flow: {heap} = *parquet.schema:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:41:     from parquet.makeWriteFunc[go.shape.*uint8]((*[6]uintptr)(parquet..dict[1]), parquet.t, parquet.schema) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:125:26
<autogenerated>:1: parameter .anon2 leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .anon2:
<autogenerated>:1:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(.anon0, .autotmp_5, .anon2) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29
<autogenerated>:1: parameter .anon0 leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.anon0:
<autogenerated>:1:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(.anon0, .autotmp_5, .anon2) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:25: parameter parquet.t leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:25:   flow: {heap} = parquet.t:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:25:     from parquet.t.Kind() (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:120:15
<autogenerated>:1: parameter .anon2 leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.anon2:
<autogenerated>:1:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(.anon0, .autotmp_4, .anon2) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29
<autogenerated>:1: parameter .anon0 leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.anon0:
<autogenerated>:1:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(.anon0, .autotmp_4, .anon2) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29: func literal escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29:   flow: ~r0 = &{storage for func literal}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29:     from func literal (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29:     from return func literal (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:3
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29: func literal escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29:   flow: ~r0 = &{storage for func literal}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29:     from func literal (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29:     from return func literal (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:3
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51: "cannot create writer for values of type " + parquet.t.String() escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:132:51: "cannot create writer for values of type " + parquet.t.String() escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9: "generic writer must be instantiated with schema or concrete type." escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9:   flow: {heap} = &{storage for "generic writer must be instantiated with schema or concrete type."}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9:     from "generic writer must be instantiated with schema or concrete type." (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9:     from panic("generic writer must be instantiated with schema or concrete type.") (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30:     from parquet.newWriter(parquet.output, parquet.config) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:108:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:48: parameter parquet.options leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:48:   flow: {heap} = *parquet.options:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:48:     from parquet.NewWriterConfig(parquet.options...) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:86:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9: &parquet.GenericWriter[go.shape.*uint8]{...} escapes to heap:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9:   flow: ~r0 = &{storage for &parquet.GenericWriter[go.shape.*uint8]{...}}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9:     from &parquet.GenericWriter[go.shape.*uint8]{...} (spill) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9:     from return &parquet.GenericWriter[go.shape.*uint8]{...} (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:2
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30: parameter parquet.output leaks to {storage for &parquet.GenericWriter[go.shape.*uint8]{...}} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30:   flow: {storage for &parquet.GenericWriter[go.shape.*uint8]{...}} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30:     from parquet.Writer{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:104:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:30:     from parquet.GenericWriter[go.shape.*uint8]{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:26
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:100:9: "generic writer must be instantiated with schema or concrete type." escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:103:9: &parquet.GenericWriter[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.string]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:76:17:   flow: {heap} = &{storage for make(map[go.shape.string]int64)}:
./pkg/phlaredb/deduplicating_slice.go:76:17:     from make(map[go.shape.string]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:76:17
./pkg/phlaredb/deduplicating_slice.go:76:17:     from phlaredb.s.lookup = make(map[go.shape.string]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:76:11
./pkg/phlaredb/deduplicating_slice.go:72:28: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.buffers (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:73:20: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.createdBy (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:74:25: phlaredb.(*deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for parquet.application + " version " + parquet.version + "(build " + parquet.build + ")"}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: parquet.createdBy = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.createdBy := ~R0 (assign) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = parquet.createdBy:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.config.CreatedBy = parquet.createdBy (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:68
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.pool = &{storage for &parquet.fileBufferPool{...}}:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from &parquet.fileBufferPool{...} (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool := &parquet.fileBufferPool{...} (assign) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: ~R0 = parquet.pool:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from ~R0 = parquet.pool (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.buffers = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.buffers := ~R0 (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: {heap} = parquet.buffers:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.config.ColumnPageBuffers = parquet.buffers (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:76
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {storage for ... argument} = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:65
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {storage for ... argument} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:64:48
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:63
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from phlaredb.s.metrics = phlaredb.metrics (assign) at ./pkg/phlaredb/deduplicating_slice.go:63:12
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from phlaredb.s.cfg = phlaredb.cfg (assign) at ./pkg/phlaredb/deduplicating_slice.go:62:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:498:27: config does not escape
./pkg/phlaredb/deduplicating_slice.go:64:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/deduplicating_slice.go:71:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.string]int64) escapes to heap
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25: parameter parquet.s leaks to ~r0 with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: unsafecast.data = parquet.s:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from unsafecast..dict, unsafecast.data := (*[4]uintptr)(parquet..dict[0]), parquet.s (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: unsafecast.data = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from unsafecast..dict, unsafecast.data := (*[6]uintptr)(unsafecast..dict[0]), unsafecast.data (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~R0 = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from &unsafecast.data (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (indirection) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from ~R0 = *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from ~R0 = unsafe.Pointer(~R0) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:39
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: parquet.base = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from parquet.base, parquet.length, parquet.offset := ~R0, len(parquet.s), unsafe.Sizeof(parquet.model) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: sparse.base = parquet.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from sparse.base, sparse.length, sparse.offset := parquet.base, parquet.length, parquet.offset (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: sparse.base = sparse.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from sparse.base, sparse.length, sparse.offset := sparse.base, uintptr(sparse.length), sparse.offset (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~R0 = sparse.base:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from sparse.array{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from ~R0 = sparse.array{...} (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from sparse.Array{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from ~R0 = sparse.Array{...} (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:18
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:25:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:32:2
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23: parameter unsafecast.data leaks to ~r0 with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:   flow: unsafecast.data = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:     from unsafecast..dict, unsafecast.data := (*[6]uintptr)(unsafecast..dict[0]), unsafecast.data (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:   flow: ~R0 = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:     from &unsafecast.data (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:     from *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (indirection) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:     from ~R0 = *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:23:     from return unsafe.Pointer(~R0) (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:36:2
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:23: parameter unsafecast.data leaks to ~r0 with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:23:   flow: ~r0 = unsafecast.data:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:23:     from &unsafecast.data (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:20:31
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:23:     from *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (indirection) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:20:9
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:23:     from return *(**go.shape.*uint8)(unsafe.Pointer(&unsafecast.data)) (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:20:2
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:10
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:15
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:10
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:15
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:50:10
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:50:25
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: phlaredb.e = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.elems[phlaredb.i] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:247:14
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.e := phlaredb.elems[phlaredb.i] (assign) at ./pkg/phlaredb/deduplicating_slice.go:247:6
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = phlaredb.e:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (func(go.shape.*uint8, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping) go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool })(&phlaredb..dict[5])(phlaredb.s.helper, phlaredb.e) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:248:21
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: phlaredb.rewritingMap = &{storage for make(map[int64]int64)}:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from make(map[int64]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:175:22
./pkg/phlaredb/deduplicating_slice.go:175:22:     from phlaredb.rewritingMap := make(map[int64]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:175:3
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: {heap} = phlaredb.rewritingMap:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from (func(go.shape.*uint8, *phlaredb.rewriter, phlaredb.idConversionTable))(&phlaredb..dict[9])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.rewritingMap) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:226:24
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: prometheus.lvs = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:     from prometheus.v, prometheus.lvs := phlaredb.s.metrics.sizeBytes, ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: {heap} = prometheus.lvs:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from (*prometheus.GaugeVec).GetMetricWithLabelValues(prometheus.v, prometheus.lvs...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from phlaredb.elems[phlaredb.pos] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:181:45
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:115:14: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: .autotmp_45 (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:119:32: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.options (addr=false assign=false width=24)
./pkg/phlaredb/deduplicating_slice.go:120:31: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:147:15:   flow: {heap} = &{storage for make([]parquet.Row, phlaredb.rowsToFlush)}:
./pkg/phlaredb/deduplicating_slice.go:147:15:     from make([]parquet.Row, phlaredb.rowsToFlush) (non-constant size) at ./pkg/phlaredb/deduplicating_slice.go:147:15
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: parameter parquet.config leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:   flow: {heap} = parquet.config:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:61
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:69
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from (*parquet.SortingConfig).Apply(parquet.config.Sorting, parquet.options...) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:75
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {temp} = &{storage for []parquet.SortingOption{}}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from []parquet.SortingOption{} (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from append([]parquet.SortingOption{}, parquet.options...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = {temp}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options = append([]parquet.SortingOption{}, parquet.options...) (assign) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: leaking param: config
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:631:29: config does not escape
./pkg/phlaredb/deduplicating_slice.go:117:29: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: os.f = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from phlaredb.s.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:13
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f := phlaredb.s.file (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = *os.f:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*os.file).close(os.f.file) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool }]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:76:17:   flow: {heap} = &{storage for make(map[go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool }]int64)}:
./pkg/phlaredb/deduplicating_slice.go:76:17:     from make(map[go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool }]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:76:17
./pkg/phlaredb/deduplicating_slice.go:76:17:     from phlaredb.s.lookup = make(map[go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool }]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:76:11
./pkg/phlaredb/deduplicating_slice.go:72:28: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.buffers (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:73:20: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.createdBy (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:74:25: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for parquet.application + " version " + parquet.version + "(build " + parquet.build + ")"}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: parquet.createdBy = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.createdBy := ~R0 (assign) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = parquet.createdBy:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.config.CreatedBy = parquet.createdBy (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:68
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.pool = &{storage for &parquet.fileBufferPool{...}}:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from &parquet.fileBufferPool{...} (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool := &parquet.fileBufferPool{...} (assign) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: ~R0 = parquet.pool:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from ~R0 = parquet.pool (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.buffers = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.buffers := ~R0 (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: {heap} = parquet.buffers:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.config.ColumnPageBuffers = parquet.buffers (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:76
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {storage for ... argument} = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:65
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {storage for ... argument} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:64:48
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:63
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from phlaredb.s.metrics = phlaredb.metrics (assign) at ./pkg/phlaredb/deduplicating_slice.go:63:12
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from phlaredb.s.cfg = phlaredb.cfg (assign) at ./pkg/phlaredb/deduplicating_slice.go:62:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:498:27: config does not escape
./pkg/phlaredb/deduplicating_slice.go:64:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/deduplicating_slice.go:71:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool }]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:10
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:15
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:10
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:15
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:50:10
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:50:25
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: phlaredb.e = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.elems[phlaredb.i] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:247:14
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.e := phlaredb.elems[phlaredb.i] (assign) at ./pkg/phlaredb/deduplicating_slice.go:247:6
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = phlaredb.e:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (func(go.shape.*uint8, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction) go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 })(&phlaredb..dict[5])(phlaredb.s.helper, phlaredb.e) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:248:21
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: phlaredb.rewritingMap = &{storage for make(map[int64]int64)}:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from make(map[int64]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:175:22
./pkg/phlaredb/deduplicating_slice.go:175:22:     from phlaredb.rewritingMap := make(map[int64]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:175:3
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: {heap} = phlaredb.rewritingMap:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from (func(go.shape.*uint8, *phlaredb.rewriter, phlaredb.idConversionTable))(&phlaredb..dict[9])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.rewritingMap) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:226:24
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: prometheus.lvs = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:     from prometheus.v, prometheus.lvs := phlaredb.s.metrics.sizeBytes, ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: {heap} = prometheus.lvs:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from (*prometheus.GaugeVec).GetMetricWithLabelValues(prometheus.v, prometheus.lvs...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from phlaredb.elems[phlaredb.pos] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:181:45
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:115:14: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: .autotmp_45 (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:119:32: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.options (addr=false assign=false width=24)
./pkg/phlaredb/deduplicating_slice.go:120:31: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:147:15:   flow: {heap} = &{storage for make([]parquet.Row, phlaredb.rowsToFlush)}:
./pkg/phlaredb/deduplicating_slice.go:147:15:     from make([]parquet.Row, phlaredb.rowsToFlush) (non-constant size) at ./pkg/phlaredb/deduplicating_slice.go:147:15
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: parameter parquet.config leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:   flow: {heap} = parquet.config:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:61
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:69
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from (*parquet.SortingConfig).Apply(parquet.config.Sorting, parquet.options...) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:75
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {temp} = &{storage for []parquet.SortingOption{}}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from []parquet.SortingOption{} (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from append([]parquet.SortingOption{}, parquet.options...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = {temp}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options = append([]parquet.SortingOption{}, parquet.options...) (assign) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: leaking param: config
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:631:29: config does not escape
./pkg/phlaredb/deduplicating_slice.go:117:29: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: os.f = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from phlaredb.s.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:13
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f := phlaredb.s.file (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = *os.f:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*os.file).close(os.f.file) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 }]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:76:17:   flow: {heap} = &{storage for make(map[go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 }]int64)}:
./pkg/phlaredb/deduplicating_slice.go:76:17:     from make(map[go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 }]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:76:17
./pkg/phlaredb/deduplicating_slice.go:76:17:     from phlaredb.s.lookup = make(map[go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 }]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:76:11
./pkg/phlaredb/deduplicating_slice.go:72:28: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.buffers (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:73:20: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.createdBy (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:74:25: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for parquet.application + " version " + parquet.version + "(build " + parquet.build + ")"}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: parquet.createdBy = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.createdBy := ~R0 (assign) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = parquet.createdBy:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.config.CreatedBy = parquet.createdBy (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:68
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.pool = &{storage for &parquet.fileBufferPool{...}}:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from &parquet.fileBufferPool{...} (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool := &parquet.fileBufferPool{...} (assign) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: ~R0 = parquet.pool:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from ~R0 = parquet.pool (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.buffers = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.buffers := ~R0 (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: {heap} = parquet.buffers:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.config.ColumnPageBuffers = parquet.buffers (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:76
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {storage for ... argument} = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:65
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {storage for ... argument} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:64:48
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:63
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from phlaredb.s.metrics = phlaredb.metrics (assign) at ./pkg/phlaredb/deduplicating_slice.go:63:12
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from phlaredb.s.cfg = phlaredb.cfg (assign) at ./pkg/phlaredb/deduplicating_slice.go:62:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:498:27: config does not escape
./pkg/phlaredb/deduplicating_slice.go:64:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/deduplicating_slice.go:71:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 }]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:10
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:15
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:10
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:15
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:50:10
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:50:25
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: phlaredb.e = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.elems[phlaredb.i] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:247:14
./pkg/phlaredb/deduplicating_slice.go:231:63:     from phlaredb.e := phlaredb.elems[phlaredb.i] (assign) at ./pkg/phlaredb/deduplicating_slice.go:247:6
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = phlaredb.e:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (func(go.shape.*uint8, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation) go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 })(&phlaredb..dict[5])(phlaredb.s.helper, phlaredb.e) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:248:21
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: sync.rw = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:260:4
./pkg/phlaredb/deduplicating_slice.go:231:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:260:9
./pkg/phlaredb/deduplicating_slice.go:231:7:     from sync.rw := phlaredb.s.lock (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = sync.rw:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*sync.RWMutex).rUnlockSlow(sync.rw, sync.r) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:260:17
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: phlaredb.rewritingMap = &{storage for make(map[int64]int64)}:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from make(map[int64]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:175:22
./pkg/phlaredb/deduplicating_slice.go:175:22:     from phlaredb.rewritingMap := make(map[int64]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:175:3
./pkg/phlaredb/deduplicating_slice.go:175:22:   flow: {heap} = phlaredb.rewritingMap:
./pkg/phlaredb/deduplicating_slice.go:175:22:     from (func(go.shape.*uint8, *phlaredb.rewriter, phlaredb.idConversionTable))(&phlaredb..dict[9])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.rewritingMap) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:226:24
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: prometheus.lvs = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:     from prometheus.v, prometheus.lvs := phlaredb.s.metrics.sizeBytes, ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:217:39:   flow: {heap} = prometheus.lvs:
./pkg/phlaredb/deduplicating_slice.go:217:39:     from (*prometheus.GaugeVec).GetMetricWithLabelValues(prometheus.v, prometheus.lvs...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:217:39
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from phlaredb.elems[phlaredb.pos] (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:181:45
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (func(go.shape.*uint8, *phlaredb.rewriter, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation) error)(&phlaredb..dict[4])(phlaredb.s.helper, phlaredb.rewriter, phlaredb.elems[phlaredb.pos]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:181:29
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:200:4
./pkg/phlaredb/deduplicating_slice.go:173:7:     from phlaredb.s.lock (address-of) at ./pkg/phlaredb/deduplicating_slice.go:200:9
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*sync.RWMutex).Lock(phlaredb.s.lock) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:200:14
./pkg/phlaredb/deduplicating_slice.go:175:22: make(map[int64]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:217:39: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:115:14: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: .autotmp_45 (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:119:32: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.options (addr=false assign=false width=24)
./pkg/phlaredb/deduplicating_slice.go:120:31: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Flush capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:147:15:   flow: {heap} = &{storage for make([]parquet.Row, phlaredb.rowsToFlush)}:
./pkg/phlaredb/deduplicating_slice.go:147:15:     from make([]parquet.Row, phlaredb.rowsToFlush) (non-constant size) at ./pkg/phlaredb/deduplicating_slice.go:147:15
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: parameter parquet.config leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:   flow: {heap} = parquet.config:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:61
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from parquet.config.Sorting (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:69
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29:     from (*parquet.SortingConfig).Apply(parquet.config.Sorting, parquet.options...) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:75
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[13]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:113:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:124:33
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:120:31
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:120:31:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:120:31:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.rowGroupOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ~R0 = parquet.rowGroupOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.NewBuffer(... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:117:29
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {temp} = &{storage for []parquet.SortingOption{}}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from []parquet.SortingOption{} (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from append([]parquet.SortingOption{}, parquet.options...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = {temp}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options = append([]parquet.SortingOption{}, parquet.options...) (assign) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: parquet.options = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:119:32
./pkg/phlaredb/deduplicating_slice.go:119:32:   flow: {storage for func literal} = parquet.options:
./pkg/phlaredb/deduplicating_slice.go:119:32:     from parquet.options (captured by a closure) at ./pkg/phlaredb/deduplicating_slice.go:119:32
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:638:29: leaking param: config
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:631:29: config does not escape
./pkg/phlaredb/deduplicating_slice.go:117:29: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:119:32: ... argument escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: []parquet.SortingOption{} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:119:32: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:120:31: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:147:15: make([]parquet.Row, phlaredb.rowsToFlush) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:100:23
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: os.f = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from phlaredb.s.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:13
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f := phlaredb.s.file (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = *os.f:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from os.f.file (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*os.file).close(os.f.file) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:85:24
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 }]int64) escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:76:17:   flow: {heap} = &{storage for make(map[go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 }]int64)}:
./pkg/phlaredb/deduplicating_slice.go:76:17:     from make(map[go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 }]int64) (spill) at ./pkg/phlaredb/deduplicating_slice.go:76:17
./pkg/phlaredb/deduplicating_slice.go:76:17:     from phlaredb.s.lookup = make(map[go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 }]int64) (assign) at ./pkg/phlaredb/deduplicating_slice.go:76:11
./pkg/phlaredb/deduplicating_slice.go:72:28: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.buffers (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:73:20: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.createdBy (addr=false assign=false width=16)
./pkg/phlaredb/deduplicating_slice.go:74:25: phlaredb.(*deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for parquet.application + " version " + parquet.version + "(build " + parquet.build + ")"}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: parquet.createdBy = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.createdBy := ~R0 (assign) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = parquet.createdBy:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.config.CreatedBy = parquet.createdBy (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:68
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.pool = &{storage for &parquet.fileBufferPool{...}}:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from &parquet.fileBufferPool{...} (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool := &parquet.fileBufferPool{...} (assign) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: ~R0 = parquet.pool:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.pool (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:     from ~R0 = parquet.pool (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:54
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: parquet.buffers = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.buffers := ~R0 (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:54:   flow: {heap} = parquet.buffers:
./pkg/phlaredb/deduplicating_slice.go:72:54:     from parquet.config.ColumnPageBuffers = parquet.buffers (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:76
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:74:25
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:74:25:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:74:25:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:73:20
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:73:20:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:73:20:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from func literal (spill) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.writerOption(func literal) (interface-converted) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ~R0 = parquet.writerOption(func literal) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:72:28
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:72:28:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:72:28:     from parquet.NewGenericWriter[go.shape.*uint8]((*[3]uintptr)(phlaredb..dict[10]), phlaredb.file, ... argument...) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:71:40
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {storage for ... argument} = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:65
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:64:65:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:64:65:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {storage for ... argument} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (slice-literal-element) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: filepath.elem = &{storage for ... argument}:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ... argument (spill) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.elem := ... argument (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: ~R0 = *filepath.elem:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from filepath.join(filepath.elem) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:     from ~R0 = filepath.join(filepath.elem) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:64:40
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = ~R0:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from os.OpenFile(~R0, os.O_RDWR | os.O_CREATE | os.O_EXCL, 0o644) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:26
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:64:48
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:64:63
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from phlaredb.s.metrics = phlaredb.metrics (assign) at ./pkg/phlaredb/deduplicating_slice.go:63:12
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from phlaredb.s.cfg = phlaredb.cfg (assign) at ./pkg/phlaredb/deduplicating_slice.go:62:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:549:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:539:27: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:498:27: config does not escape
./pkg/phlaredb/deduplicating_slice.go:64:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:64:65: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/deduplicating_slice.go:71:40: ... argument does not escape
./pkg/phlaredb/deduplicating_slice.go:72:54: &parquet.fileBufferPool{...} escapes to heap
./pkg/phlaredb/deduplicating_slice.go:72:28: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: parquet.application + " version " + parquet.version + "(build " + parquet.build + ")" escapes to heap
./pkg/phlaredb/deduplicating_slice.go:73:20: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:74:25: func literal escapes to heap
./pkg/phlaredb/deduplicating_slice.go:76:17: make(map[go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 }]int64) escapes to heap
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:10
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:15
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:58:20
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:10
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:15
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:54:20
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:50:10
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:50:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:22
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:22
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:22
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:212:2
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:208:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:208:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:208:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:208:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:3
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:204:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:191:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:191:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:191:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:191:29
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from parquet.w, parquet.rows := parquet.w.base, parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.writer).WriteRows(parquet.w.writer, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from parquet.w, parquet.rows := parquet.w.base, parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.writer).WriteRows(parquet.w.writer, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:187:25
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parquet.(*GenericWriter[go.shape.*uint8]).Write capturing by value: parquet.w (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parquet.(*GenericWriter[go.shape.*uint8]).Write capturing by value: parquet.rows (addr=false assign=false width=24)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: parquet.(*GenericWriter[go.shape.*uint8]).Write capturing by value: parquet..dict (addr=false assign=false width=8)
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from parquet.rows[parquet.i:parquet.j:parquet.j] (slice) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:169:28
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from parquet.w.write(parquet.w, parquet.rows[parquet.i:parquet.j:parquet.j]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:169:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from parquet.w.write(parquet.w, parquet.rows[parquet.i:parquet.j:parquet.j]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:169:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from parquet.w.write(parquet.w, parquet.rows[parquet.i:parquet.j:parquet.j]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:169:20
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:168:44: func literal does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:3
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:8
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:164:14
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: parquet.w = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from parquet.w := parquet.w.writer (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.writer).writeRowGroup(parquet.w, nil, nil) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:160:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:10
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:15
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:21
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:156:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.string]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1337:9:   flow: ~r0 = &{storage for &phlaredb.cacheIterator[go.shape.string]{...}}:
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.string]{...} (spill) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.string]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from return &phlaredb.cacheIterator[go.shape.string]{...} (return) at ./pkg/phlaredb/block_querier.go:1337:2
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.string]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.string]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.string]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.string]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.string]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1338:20
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.string]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.string]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.rowNumIterator (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:20
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.rowNumIterator.At() (call parameter) at ./pkg/phlaredb/block_querier.go:1360:38
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to ~r0 with derefs=2:
./pkg/phlaredb/block_querier.go:1358:7:   flow: ~r0 = **phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:12
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.cache[phlaredb.c.rowNumIterator.At()] (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:18
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.ResultWithRowNum[go.shape.string]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1359:28
./pkg/phlaredb/block_querier.go:1358:7:     from return phlaredb.ResultWithRowNum[go.shape.string]{...} (return) at ./pkg/phlaredb/block_querier.go:1359:2
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from phlaredb.c.rowNumIterator (dot of pointer) at ./pkg/phlaredb/block_querier.go:1349:7
./pkg/phlaredb/block_querier.go:1348:7:     from phlaredb.c.rowNumIterator.Next() (call parameter) at ./pkg/phlaredb/block_querier.go:1349:27
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1333:10
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1333:25
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1333:28:   flow: ~r0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1333:28:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1333:28
./pkg/phlaredb/block_querier.go:1333:28:     from return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (return) at ./pkg/phlaredb/block_querier.go:1333:2
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1324:11
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1324:24
./pkg/phlaredb/block_querier.go:1298:33: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG capturing by value: .autotmp_21 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1298:47: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG capturing by value: .autotmp_22 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1304:19
./pkg/phlaredb/block_querier.go:1296:7:     from (func(go.shape.*uint8, parquet.Row) (uint64, go.shape.string, error))(&phlaredb..dict[1])(phlaredb.r.persister, phlaredb.row) (call parameter) at ./pkg/phlaredb/block_querier.go:1304:41
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap:
./pkg/phlaredb/block_querier.go:1299:13:   flow: phlaredb.buf = &{storage for make([]parquet.Row, inMemoryReaderRowsBufSize)}:
./pkg/phlaredb/block_querier.go:1299:13:     from make([]parquet.Row, inMemoryReaderRowsBufSize) (spill) at ./pkg/phlaredb/block_querier.go:1299:13
./pkg/phlaredb/block_querier.go:1299:13:     from phlaredb.buf := make([]parquet.Row, inMemoryReaderRowsBufSize) (assign) at ./pkg/phlaredb/block_querier.go:1299:6
./pkg/phlaredb/block_querier.go:1299:13:   flow: {heap} = phlaredb.buf:
./pkg/phlaredb/block_querier.go:1299:13:     from (*parquet.Reader).ReadRows(phlaredb.rr, phlaredb.buf) (call parameter) at ./pkg/phlaredb/block_querier.go:1301:24
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from parquet.NewRowGroupReader(phlaredb.rg, nil...) (call parameter) at ./pkg/phlaredb/block_querier.go:1297:33
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.string, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.string, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.string, ~R0) (spill) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1276:16:     from phlaredb.r.cache = make([]go.shape.string, ~R0) (assign) at ./pkg/phlaredb/block_querier.go:1276:10
./pkg/phlaredb/block_querier.go:1257:72: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1257:104: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1265:27: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1266:23: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open capturing by value: parquet.mode (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1267:25: phlaredb.(*inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.string, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.string, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.string, ~R0) (non-constant size) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1283:73:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1283:73:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1283:73
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:     from errors.Wrapf(phlaredb.err, "reading row group from parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1272:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1272:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1272:57
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1267:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1267:25:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1267:25:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1266:23:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1266:23:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1266:23:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1265:27:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1265:27:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1265:27:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1262:65:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1262:65:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1262:65
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:     from fmt.Errorf("error parquet file '%s' contains no rows", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1259:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1259:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1259:57
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:104:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:104:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:72:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:72:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1252:36:   flow: ~R0 = &{storage for &parquet.optimizedReaderAt{...}}:
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (spill) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from ~R0 = &parquet.optimizedReaderAt{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:   flow: phlaredb.ra = ~R0:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.ra = ~R0 (assign) at ./pkg/phlaredb/block_querier.go:1252:5
./pkg/phlaredb/block_querier.go:1252:36:   flow: {heap} = phlaredb.ra:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.r.reader = phlaredb.ra (assign) at ./pkg/phlaredb/block_querier.go:1254:11
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1250:50:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1250:50:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1250:50
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:     from errors.Wrapf(phlaredb.err, "create reader '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1244:60:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1244:60:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1244:60
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:     from errors.Wrapf(phlaredb.err, "getting attributes for '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1239:33:   flow: phlaredb.filePath = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1239:33:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1239:33
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.filePath := (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign) at ./pkg/phlaredb/block_querier.go:1239:11
./pkg/phlaredb/block_querier.go:1239:33:   flow: {heap} = phlaredb.filePath:
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1239:15
./pkg/phlaredb/block_querier.go:1238:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1239:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:444:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:465:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:476:25: config does not escape
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1244:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1250:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap
./pkg/phlaredb/block_querier.go:1257:38: ... argument does not escape
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1259:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1262:20: ... argument does not escape
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1264:30: []parquet.FileOption{...} does not escape
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1272:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.string, ~R0) escapes to heap
./pkg/phlaredb/block_querier.go:1283:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1337:9:   flow: ~r0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from return &phlaredb.cacheIterator[go.shape.*uint8]{...} (return) at ./pkg/phlaredb/block_querier.go:1337:2
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1338:20
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.rowNumIterator (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:20
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.rowNumIterator.At() (call parameter) at ./pkg/phlaredb/block_querier.go:1360:38
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to ~r0 with derefs=2:
./pkg/phlaredb/block_querier.go:1358:7:   flow: ~r0 = **phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:12
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.c.cache[phlaredb.c.rowNumIterator.At()] (dot of pointer) at ./pkg/phlaredb/block_querier.go:1360:18
./pkg/phlaredb/block_querier.go:1358:7:     from phlaredb.ResultWithRowNum[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1359:28
./pkg/phlaredb/block_querier.go:1358:7:     from return phlaredb.ResultWithRowNum[go.shape.*uint8]{...} (return) at ./pkg/phlaredb/block_querier.go:1359:2
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from phlaredb.c.rowNumIterator (dot of pointer) at ./pkg/phlaredb/block_querier.go:1349:7
./pkg/phlaredb/block_querier.go:1348:7:     from phlaredb.c.rowNumIterator.Next() (call parameter) at ./pkg/phlaredb/block_querier.go:1349:27
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1333:10
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1333:25
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1333:28:   flow: ~r0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1333:28:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1333:28
./pkg/phlaredb/block_querier.go:1333:28:     from return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (return) at ./pkg/phlaredb/block_querier.go:1333:2
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1324:11
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1324:24
./pkg/phlaredb/block_querier.go:1298:33: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG capturing by value: .autotmp_21 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1298:47: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG capturing by value: .autotmp_22 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1304:19
./pkg/phlaredb/block_querier.go:1296:7:     from (func(go.shape.*uint8, parquet.Row) (uint64, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, error))(&phlaredb..dict[1])(phlaredb.r.persister, phlaredb.row) (call parameter) at ./pkg/phlaredb/block_querier.go:1304:41
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap:
./pkg/phlaredb/block_querier.go:1299:13:   flow: phlaredb.buf = &{storage for make([]parquet.Row, inMemoryReaderRowsBufSize)}:
./pkg/phlaredb/block_querier.go:1299:13:     from make([]parquet.Row, inMemoryReaderRowsBufSize) (spill) at ./pkg/phlaredb/block_querier.go:1299:13
./pkg/phlaredb/block_querier.go:1299:13:     from phlaredb.buf := make([]parquet.Row, inMemoryReaderRowsBufSize) (assign) at ./pkg/phlaredb/block_querier.go:1299:6
./pkg/phlaredb/block_querier.go:1299:13:   flow: {heap} = phlaredb.buf:
./pkg/phlaredb/block_querier.go:1299:13:     from (*parquet.Reader).ReadRows(phlaredb.rr, phlaredb.buf) (call parameter) at ./pkg/phlaredb/block_querier.go:1301:24
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from parquet.NewRowGroupReader(phlaredb.rg, nil...) (call parameter) at ./pkg/phlaredb/block_querier.go:1297:33
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) (spill) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1276:16:     from phlaredb.r.cache = make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) (assign) at ./pkg/phlaredb/block_querier.go:1276:10
./pkg/phlaredb/block_querier.go:1257:72: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1257:104: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1265:27: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1266:23: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open capturing by value: parquet.mode (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1267:25: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) (non-constant size) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1283:73:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1283:73:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1283:73
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:     from errors.Wrapf(phlaredb.err, "reading row group from parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1272:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1272:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1272:57
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1267:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1267:25:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1267:25:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1266:23:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1266:23:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1266:23:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1265:27:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1265:27:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1265:27:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1262:65:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1262:65:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1262:65
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:     from fmt.Errorf("error parquet file '%s' contains no rows", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1259:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1259:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1259:57
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:104:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:104:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:72:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:72:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1252:36:   flow: ~R0 = &{storage for &parquet.optimizedReaderAt{...}}:
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (spill) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from ~R0 = &parquet.optimizedReaderAt{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:   flow: phlaredb.ra = ~R0:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.ra = ~R0 (assign) at ./pkg/phlaredb/block_querier.go:1252:5
./pkg/phlaredb/block_querier.go:1252:36:   flow: {heap} = phlaredb.ra:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.r.reader = phlaredb.ra (assign) at ./pkg/phlaredb/block_querier.go:1254:11
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1250:50:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1250:50:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1250:50
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:     from errors.Wrapf(phlaredb.err, "create reader '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1244:60:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1244:60:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1244:60
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:     from errors.Wrapf(phlaredb.err, "getting attributes for '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1239:33:   flow: phlaredb.filePath = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1239:33:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1239:33
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.filePath := (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign) at ./pkg/phlaredb/block_querier.go:1239:11
./pkg/phlaredb/block_querier.go:1239:33:   flow: {heap} = phlaredb.filePath:
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1239:15
./pkg/phlaredb/block_querier.go:1238:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1239:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:444:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:465:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:476:25: config does not escape
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1244:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1250:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap
./pkg/phlaredb/block_querier.go:1257:38: ... argument does not escape
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1259:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1262:20: ... argument does not escape
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1264:30: []parquet.FileOption{...} does not escape
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1272:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction, ~R0) escapes to heap
./pkg/phlaredb/block_querier.go:1283:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1337:9:   flow: ~r0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from return &phlaredb.cacheIterator[go.shape.*uint8]{...} (return) at ./pkg/phlaredb/block_querier.go:1337:2
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1338:20
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1333:10
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1333:25
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1333:28:   flow: ~r0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1333:28:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1333:28
./pkg/phlaredb/block_querier.go:1333:28:     from return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (return) at ./pkg/phlaredb/block_querier.go:1333:2
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1324:11
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1324:24
./pkg/phlaredb/block_querier.go:1298:33: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG capturing by value: .autotmp_21 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1298:47: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG capturing by value: .autotmp_22 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1304:19
./pkg/phlaredb/block_querier.go:1296:7:     from (func(go.shape.*uint8, parquet.Row) (uint64, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, error))(&phlaredb..dict[1])(phlaredb.r.persister, phlaredb.row) (call parameter) at ./pkg/phlaredb/block_querier.go:1304:41
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap:
./pkg/phlaredb/block_querier.go:1299:13:   flow: phlaredb.buf = &{storage for make([]parquet.Row, inMemoryReaderRowsBufSize)}:
./pkg/phlaredb/block_querier.go:1299:13:     from make([]parquet.Row, inMemoryReaderRowsBufSize) (spill) at ./pkg/phlaredb/block_querier.go:1299:13
./pkg/phlaredb/block_querier.go:1299:13:     from phlaredb.buf := make([]parquet.Row, inMemoryReaderRowsBufSize) (assign) at ./pkg/phlaredb/block_querier.go:1299:6
./pkg/phlaredb/block_querier.go:1299:13:   flow: {heap} = phlaredb.buf:
./pkg/phlaredb/block_querier.go:1299:13:     from (*parquet.Reader).ReadRows(phlaredb.rr, phlaredb.buf) (call parameter) at ./pkg/phlaredb/block_querier.go:1301:24
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from parquet.NewRowGroupReader(phlaredb.rg, nil...) (call parameter) at ./pkg/phlaredb/block_querier.go:1297:33
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) (spill) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1276:16:     from phlaredb.r.cache = make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) (assign) at ./pkg/phlaredb/block_querier.go:1276:10
./pkg/phlaredb/block_querier.go:1257:72: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1257:104: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1265:27: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1266:23: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open capturing by value: parquet.mode (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1267:25: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) (non-constant size) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1283:73:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1283:73:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1283:73
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:     from errors.Wrapf(phlaredb.err, "reading row group from parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1272:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1272:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1272:57
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1267:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1267:25:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1267:25:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1266:23:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1266:23:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1266:23:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1265:27:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1265:27:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1265:27:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1262:65:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1262:65:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1262:65
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:     from fmt.Errorf("error parquet file '%s' contains no rows", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1259:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1259:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1259:57
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:104:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:104:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:72:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:72:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1252:36:   flow: ~R0 = &{storage for &parquet.optimizedReaderAt{...}}:
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (spill) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from ~R0 = &parquet.optimizedReaderAt{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:   flow: phlaredb.ra = ~R0:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.ra = ~R0 (assign) at ./pkg/phlaredb/block_querier.go:1252:5
./pkg/phlaredb/block_querier.go:1252:36:   flow: {heap} = phlaredb.ra:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.r.reader = phlaredb.ra (assign) at ./pkg/phlaredb/block_querier.go:1254:11
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1250:50:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1250:50:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1250:50
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:     from errors.Wrapf(phlaredb.err, "create reader '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1244:60:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1244:60:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1244:60
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:     from errors.Wrapf(phlaredb.err, "getting attributes for '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1239:33:   flow: phlaredb.filePath = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1239:33:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1239:33
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.filePath := (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign) at ./pkg/phlaredb/block_querier.go:1239:11
./pkg/phlaredb/block_querier.go:1239:33:   flow: {heap} = phlaredb.filePath:
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1239:15
./pkg/phlaredb/block_querier.go:1238:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1239:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:444:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:465:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:476:25: config does not escape
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1244:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1250:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap
./pkg/phlaredb/block_querier.go:1257:38: ... argument does not escape
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1259:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1262:20: ... argument does not escape
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1264:30: []parquet.FileOption{...} does not escape
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1272:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation, ~R0) escapes to heap
./pkg/phlaredb/block_querier.go:1283:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1337:9:   flow: ~r0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1337:9
./pkg/phlaredb/block_querier.go:1337:9:     from return &phlaredb.cacheIterator[go.shape.*uint8]{...} (return) at ./pkg/phlaredb/block_querier.go:1337:2
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1338:20
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1337:26
./pkg/phlaredb/block_querier.go:1337:9: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1333:10
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1333:25
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1333:28:   flow: ~r0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1333:28:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1333:28
./pkg/phlaredb/block_querier.go:1333:28:     from return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (return) at ./pkg/phlaredb/block_querier.go:1333:2
./pkg/phlaredb/block_querier.go:1333:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1324:11
./pkg/phlaredb/block_querier.go:1322:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1324:24
./pkg/phlaredb/block_querier.go:1298:33: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG capturing by value: .autotmp_21 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1298:47: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG capturing by value: .autotmp_22 (addr=false assign=false width=16)
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1304:19
./pkg/phlaredb/block_querier.go:1296:7:     from (func(go.shape.*uint8, parquet.Row) (uint64, go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, error))(&phlaredb..dict[1])(phlaredb.r.persister, phlaredb.row) (call parameter) at ./pkg/phlaredb/block_querier.go:1304:41
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap:
./pkg/phlaredb/block_querier.go:1299:13:   flow: phlaredb.buf = &{storage for make([]parquet.Row, inMemoryReaderRowsBufSize)}:
./pkg/phlaredb/block_querier.go:1299:13:     from make([]parquet.Row, inMemoryReaderRowsBufSize) (spill) at ./pkg/phlaredb/block_querier.go:1299:13
./pkg/phlaredb/block_querier.go:1299:13:     from phlaredb.buf := make([]parquet.Row, inMemoryReaderRowsBufSize) (assign) at ./pkg/phlaredb/block_querier.go:1299:6
./pkg/phlaredb/block_querier.go:1299:13:   flow: {heap} = phlaredb.buf:
./pkg/phlaredb/block_querier.go:1299:13:     from (*parquet.Reader).ReadRows(phlaredb.rr, phlaredb.buf) (call parameter) at ./pkg/phlaredb/block_querier.go:1301:24
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from parquet.NewRowGroupReader(phlaredb.rg, nil...) (call parameter) at ./pkg/phlaredb/block_querier.go:1297:33
./pkg/phlaredb/block_querier.go:1299:13: make([]parquet.Row, inMemoryReaderRowsBufSize) escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) (spill) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1276:16:     from phlaredb.r.cache = make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) (assign) at ./pkg/phlaredb/block_querier.go:1276:10
./pkg/phlaredb/block_querier.go:1257:72: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1257:104: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1265:27: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1266:23: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open capturing by value: parquet.mode (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1267:25: phlaredb.(*inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) escapes to heap:
./pkg/phlaredb/block_querier.go:1276:16:   flow: {heap} = &{storage for make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0)}:
./pkg/phlaredb/block_querier.go:1276:16:     from make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) (non-constant size) at ./pkg/phlaredb/block_querier.go:1276:16
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1283:73:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1283:73:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1283:73
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1283:73:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1283:73:     from errors.Wrapf(phlaredb.err, "reading row group from parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1283:23
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1272:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1272:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1272:57
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1272:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1272:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1272:22
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1267:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1267:25:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1267:25
./pkg/phlaredb/block_querier.go:1267:25:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1267:25:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1267:25:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1267:25:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1267:25:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1266:23:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1266:23:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1266:23
./pkg/phlaredb/block_querier.go:1266:23:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1266:23:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1266:23:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1266:23:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1266:23:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1265:27:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1265:27:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1265:27
./pkg/phlaredb/block_querier.go:1265:27:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1265:27:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1264:30
./pkg/phlaredb/block_querier.go:1265:27:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1264:7
./pkg/phlaredb/block_querier.go:1265:27:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1265:27:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1270:32
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1262:65:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1262:65:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1262:65
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1262:65:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1262:65:     from fmt.Errorf("error parquet file '%s' contains no rows", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1262:20
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1259:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1259:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1259:57
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1259:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1259:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1259:22
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:104:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:104:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:104
./pkg/phlaredb/block_querier.go:1257:104:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:104:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:104:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1257:72:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1257:72:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1257:72
./pkg/phlaredb/block_querier.go:1257:72:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1257:72:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1257:72:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1257:38
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1252:36:   flow: ~R0 = &{storage for &parquet.optimizedReaderAt{...}}:
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (spill) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from &parquet.optimizedReaderAt{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:     from ~R0 = &parquet.optimizedReaderAt{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1252:36
./pkg/phlaredb/block_querier.go:1252:36:   flow: phlaredb.ra = ~R0:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.ra = ~R0 (assign) at ./pkg/phlaredb/block_querier.go:1252:5
./pkg/phlaredb/block_querier.go:1252:36:   flow: {heap} = phlaredb.ra:
./pkg/phlaredb/block_querier.go:1252:36:     from phlaredb.r.reader = phlaredb.ra (assign) at ./pkg/phlaredb/block_querier.go:1254:11
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1250:50:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1250:50:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1250:50
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1250:50:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1250:50:     from errors.Wrapf(phlaredb.err, "create reader '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1250:22
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1244:60:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1244:60:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1244:60
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1244:60:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1244:60:     from errors.Wrapf(phlaredb.err, "getting attributes for '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1244:23
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1239:33:   flow: phlaredb.filePath = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1239:33:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1239:33
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.filePath := (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign) at ./pkg/phlaredb/block_querier.go:1239:11
./pkg/phlaredb/block_querier.go:1239:33:   flow: {heap} = phlaredb.filePath:
./pkg/phlaredb/block_querier.go:1239:33:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1242:40
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1239:15
./pkg/phlaredb/block_querier.go:1238:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1239:30
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:444:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:465:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:476:25: config does not escape
./pkg/phlaredb/block_querier.go:1239:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1244:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1244:60: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1250:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1250:50: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1252:36: &parquet.optimizedReaderAt{...} escapes to heap
./pkg/phlaredb/block_querier.go:1257:38: ... argument does not escape
./pkg/phlaredb/block_querier.go:1257:72: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1257:104: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1259:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1259:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1262:20: ... argument does not escape
./pkg/phlaredb/block_querier.go:1262:65: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1264:30: []parquet.FileOption{...} does not escape
./pkg/phlaredb/block_querier.go:1265:27: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1266:23: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1267:25: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1272:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1272:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1276:16: make([]go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping, ~R0) escapes to heap
./pkg/phlaredb/block_querier.go:1283:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1283:73: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1211:33: metricsContextKey escapes to heap:
./pkg/phlaredb/block_querier.go:1211:33:   flow: {heap} = &{storage for metricsContextKey}:
./pkg/phlaredb/block_querier.go:1211:33:     from metricsContextKey (spill) at ./pkg/phlaredb/block_querier.go:1211:33
./pkg/phlaredb/block_querier.go:1211:33:     from context.WithValue(query.ctx, metricsContextKey, query.m) (call parameter) at ./pkg/phlaredb/block_querier.go:1211:33
./pkg/phlaredb/block_querier.go:1206:109: parameter phlaredb.alias leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:109:   flow: {heap} = phlaredb.alias:
./pkg/phlaredb/block_querier.go:1206:109:     from query.NewSyncIterator(phlaredb.ctx, ~R0, phlaredb.index, phlaredb.columnName, 1000, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1212:30
./pkg/phlaredb/block_querier.go:1206:82: parameter phlaredb.predicate leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:82:   flow: {heap} = phlaredb.predicate:
./pkg/phlaredb/block_querier.go:1206:82:     from query.NewSyncIterator(phlaredb.ctx, ~R0, phlaredb.index, phlaredb.columnName, 1000, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1212:30
./pkg/phlaredb/block_querier.go:1206:7: parameter phlaredb.r leaks to {heap} with derefs=2:
./pkg/phlaredb/block_querier.go:1206:7:   flow: parquet.f = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1206:7:     from phlaredb.r.file (dot of pointer) at ./pkg/phlaredb/block_querier.go:1212:37
./pkg/phlaredb/block_querier.go:1206:7:     from parquet.f := phlaredb.r.file (assign-pair) at ./pkg/phlaredb/block_querier.go:1212:52
./pkg/phlaredb/block_querier.go:1206:7:   flow: ~R0 = *parquet.f:
./pkg/phlaredb/block_querier.go:1206:7:     from parquet.f.rowGroups (dot of pointer) at ./pkg/phlaredb/block_querier.go:1212:52
./pkg/phlaredb/block_querier.go:1206:7:     from ~R0 = parquet.f.rowGroups (assign-pair) at ./pkg/phlaredb/block_querier.go:1212:52
./pkg/phlaredb/block_querier.go:1206:7:   flow: {heap} = ~R0:
./pkg/phlaredb/block_querier.go:1206:7:     from query.NewSyncIterator(phlaredb.ctx, ~R0, phlaredb.index, phlaredb.columnName, 1000, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1212:30
./pkg/phlaredb/block_querier.go:1206:42: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:42:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1206:42:     from query.NewSyncIterator(phlaredb.ctx, ~R0, phlaredb.index, phlaredb.columnName, 1000, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1212:30
./pkg/phlaredb/block_querier.go:1206:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1206:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1206:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, (*[6]uintptr)(phlaredb..dict[1]) (assign-pair) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1206:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1206:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1206:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1209:109: ~R0 escapes to heap:
./pkg/phlaredb/block_querier.go:1209:109:   flow: {storage for ... argument} = &{storage for ~R0}:
./pkg/phlaredb/block_querier.go:1209:109:     from ~R0 (spill) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1209:109:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1209:109:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1209:109:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1209:109:     from fmt.Errorf("column '%s' not found in parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1209:88: phlaredb.columnName escapes to heap:
./pkg/phlaredb/block_querier.go:1209:88:   flow: {storage for ... argument} = &{storage for phlaredb.columnName}:
./pkg/phlaredb/block_querier.go:1209:88:     from phlaredb.columnName (spill) at ./pkg/phlaredb/block_querier.go:1209:88
./pkg/phlaredb/block_querier.go:1209:88:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1209:88:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1209:88:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1209:88:     from fmt.Errorf("column '%s' not found in parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1209:41
./pkg/phlaredb/block_querier.go:1206:63: parameter phlaredb.columnName leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:63:   flow: {heap} = phlaredb.columnName:
./pkg/phlaredb/block_querier.go:1206:63:     from query.GetColumnIndexByPath(phlaredb.r.file, phlaredb.columnName) (call parameter) at ./pkg/phlaredb/block_querier.go:1207:40
./pkg/phlaredb/block_querier.go:1209:109: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1209:109:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1209:109:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1209:109:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1209:109:   flow: {storage for ~R0} = ~R0:
./pkg/phlaredb/block_querier.go:1209:109:     from ~R0 (interface-converted) at ./pkg/phlaredb/block_querier.go:1209:109
./pkg/phlaredb/block_querier.go:1206:63: parameter phlaredb.columnName leaks to {storage for phlaredb.columnName} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:63:   flow: {storage for phlaredb.columnName} = phlaredb.columnName:
./pkg/phlaredb/block_querier.go:1206:63:     from phlaredb.columnName (interface-converted) at ./pkg/phlaredb/block_querier.go:1209:88
./pkg/phlaredb/block_querier.go:1209:30: &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1209:30:   flow: ~R0 = &{storage for &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...}}:
./pkg/phlaredb/block_querier.go:1209:30:     from &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} (spill) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:     from &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:     from ~R0 = &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:   flow: ~R0 = ~R0:
./pkg/phlaredb/block_querier.go:1209:30:     from ~R0 = ~R0 (assign-pair) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1209:30:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1209:3
./pkg/phlaredb/block_querier.go:1209:30: &iter.errIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1209:30:   flow: ~R0 = &{storage for &iter.errIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1209:30:     from &iter.errIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:     from &iter.errIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:     from ~R0 = &iter.errIterator[go.shape.*uint8]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:30:   flow: {storage for &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1209:30:     from iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1209:30
./pkg/phlaredb/block_querier.go:1209:41: ... argument does not escape
./pkg/phlaredb/block_querier.go:1209:88: phlaredb.columnName escapes to heap
./pkg/phlaredb/block_querier.go:1209:109: ~R0 escapes to heap
./pkg/phlaredb/block_querier.go:1209:109: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1209:30: &iter.errSeekIterator[go.shape.*uint8,go.shape.struct { RowNumber github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumber; DefinitionLevel int }]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1209:30: &iter.errIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1211:33: metricsContextKey escapes to heap
./pkg/phlaredb/block_querier.go:1202:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1202:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1202:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1203:10
./pkg/phlaredb/block_querier.go:1202:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1203:25
./pkg/phlaredb/block_querier.go:1203:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1203:28:   flow: ~r0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1203:28:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1203:28
./pkg/phlaredb/block_querier.go:1203:28:     from return (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (return) at ./pkg/phlaredb/block_querier.go:1203:2
./pkg/phlaredb/block_querier.go:1203:28: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1193:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1193:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1193:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1195:11
./pkg/phlaredb/block_querier.go:1193:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1195:24
./pkg/phlaredb/block_querier.go:1172:72: phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1172:104: phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1180:27: phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open capturing by value: parquet.skip (addr=false assign=false width=1)
./pkg/phlaredb/block_querier.go:1181:23: phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open capturing by value: parquet.mode (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1182:25: phlaredb.(*parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open capturing by value: parquet.size (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1187:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1187:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1187:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1187:57
./pkg/phlaredb/block_querier.go:1187:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1187:22
./pkg/phlaredb/block_querier.go:1187:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1187:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1187:22
./pkg/phlaredb/block_querier.go:1187:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1187:22
./pkg/phlaredb/block_querier.go:1182:25: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1182:25:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1182:25:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1182:25
./pkg/phlaredb/block_querier.go:1182:25:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1182:25
./pkg/phlaredb/block_querier.go:1182:25:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1182:25
./pkg/phlaredb/block_querier.go:1182:25:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1182:25:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1182:25:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1182:25:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1182:25:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1179:7
./pkg/phlaredb/block_querier.go:1182:25:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1182:25:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1185:32
./pkg/phlaredb/block_querier.go:1181:23: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1181:23:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1181:23:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1181:23
./pkg/phlaredb/block_querier.go:1181:23:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1181:23
./pkg/phlaredb/block_querier.go:1181:23:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1181:23
./pkg/phlaredb/block_querier.go:1181:23:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1181:23:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1181:23:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1181:23:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1181:23:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1179:7
./pkg/phlaredb/block_querier.go:1181:23:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1181:23:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1185:32
./pkg/phlaredb/block_querier.go:1180:27: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1180:27:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1180:27:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1180:27
./pkg/phlaredb/block_querier.go:1180:27:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1180:27
./pkg/phlaredb/block_querier.go:1180:27:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1180:27
./pkg/phlaredb/block_querier.go:1180:27:   flow: {storage for []parquet.FileOption{...}} = ~R0:
./pkg/phlaredb/block_querier.go:1180:27:     from []parquet.FileOption{...} (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1180:27:   flow: phlaredb.opts = &{storage for []parquet.FileOption{...}}:
./pkg/phlaredb/block_querier.go:1180:27:     from []parquet.FileOption{...} (spill) at ./pkg/phlaredb/block_querier.go:1179:30
./pkg/phlaredb/block_querier.go:1180:27:     from phlaredb.opts := []parquet.FileOption{...} (assign) at ./pkg/phlaredb/block_querier.go:1179:7
./pkg/phlaredb/block_querier.go:1180:27:   flow: {heap} = *phlaredb.opts:
./pkg/phlaredb/block_querier.go:1180:27:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, phlaredb.opts...) (call parameter) at ./pkg/phlaredb/block_querier.go:1185:32
./pkg/phlaredb/block_querier.go:1177:65: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1177:65:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1177:65:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1177:65
./pkg/phlaredb/block_querier.go:1177:65:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1177:20
./pkg/phlaredb/block_querier.go:1177:65:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1177:65:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1177:20
./pkg/phlaredb/block_querier.go:1177:65:     from fmt.Errorf("error parquet file '%s' contains no rows", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1177:20
./pkg/phlaredb/block_querier.go:1174:57: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1174:57:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1174:57:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1174:57
./pkg/phlaredb/block_querier.go:1174:57:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1174:22
./pkg/phlaredb/block_querier.go:1174:57:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1174:57:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1174:22
./pkg/phlaredb/block_querier.go:1174:57:     from errors.Wrapf(phlaredb.err, "opening parquet file '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1174:22
./pkg/phlaredb/block_querier.go:1172:104: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1172:104:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1172:104:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1172:104
./pkg/phlaredb/block_querier.go:1172:104:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1172:104
./pkg/phlaredb/block_querier.go:1172:104:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1172:104
./pkg/phlaredb/block_querier.go:1172:104:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1172:104:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1172:104:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1172:104:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1172:104:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1172:72: func literal escapes to heap:
./pkg/phlaredb/block_querier.go:1172:72:   flow: ~R0 = &{storage for func literal}:
./pkg/phlaredb/block_querier.go:1172:72:     from func literal (spill) at ./pkg/phlaredb/block_querier.go:1172:72
./pkg/phlaredb/block_querier.go:1172:72:     from parquet.fileOption(func literal) (interface-converted) at ./pkg/phlaredb/block_querier.go:1172:72
./pkg/phlaredb/block_querier.go:1172:72:     from ~R0 = parquet.fileOption(func literal) (assign-pair) at ./pkg/phlaredb/block_querier.go:1172:72
./pkg/phlaredb/block_querier.go:1172:72:   flow: {storage for ... argument} = ~R0:
./pkg/phlaredb/block_querier.go:1172:72:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1172:72:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1172:72:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1172:72:     from parquet.OpenFile(phlaredb.ra, phlaredb.r.size, ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1172:38
./pkg/phlaredb/block_querier.go:1168:36: &parquet.optimizedReaderAt{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1168:36:   flow: ~R0 = &{storage for &parquet.optimizedReaderAt{...}}:
./pkg/phlaredb/block_querier.go:1168:36:     from &parquet.optimizedReaderAt{...} (spill) at ./pkg/phlaredb/block_querier.go:1168:36
./pkg/phlaredb/block_querier.go:1168:36:     from &parquet.optimizedReaderAt{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1168:36
./pkg/phlaredb/block_querier.go:1168:36:     from ~R0 = &parquet.optimizedReaderAt{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1168:36
./pkg/phlaredb/block_querier.go:1168:36:   flow: phlaredb.ra = ~R0:
./pkg/phlaredb/block_querier.go:1168:36:     from phlaredb.ra = ~R0 (assign) at ./pkg/phlaredb/block_querier.go:1168:5
./pkg/phlaredb/block_querier.go:1168:36:   flow: {heap} = phlaredb.ra:
./pkg/phlaredb/block_querier.go:1168:36:     from phlaredb.r.reader = phlaredb.ra (assign) at ./pkg/phlaredb/block_querier.go:1169:11
./pkg/phlaredb/block_querier.go:1166:50: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1166:50:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1166:50:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1166:50
./pkg/phlaredb/block_querier.go:1166:50:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1166:22
./pkg/phlaredb/block_querier.go:1166:50:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1166:50:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1166:22
./pkg/phlaredb/block_querier.go:1166:50:     from errors.Wrapf(phlaredb.err, "create reader '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1166:22
./pkg/phlaredb/block_querier.go:1164:53: context.backgroundCtx{} escapes to heap:
./pkg/phlaredb/block_querier.go:1164:53:   flow: ~R0 = &{storage for context.backgroundCtx{}}:
./pkg/phlaredb/block_querier.go:1164:53:     from context.backgroundCtx{} (spill) at ./pkg/phlaredb/block_querier.go:1164:53
./pkg/phlaredb/block_querier.go:1164:53:     from ~R0 = context.backgroundCtx{} (assign-pair) at ./pkg/phlaredb/block_querier.go:1164:53
./pkg/phlaredb/block_querier.go:1164:53:   flow: {heap} = ~R0:
./pkg/phlaredb/block_querier.go:1164:53:     from phlaredb.bucketReader.ReaderAt(~R0, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1164:34
./pkg/phlaredb/block_querier.go:1159:60: phlaredb.filePath escapes to heap:
./pkg/phlaredb/block_querier.go:1159:60:   flow: {storage for ... argument} = &{storage for phlaredb.filePath}:
./pkg/phlaredb/block_querier.go:1159:60:     from phlaredb.filePath (spill) at ./pkg/phlaredb/block_querier.go:1159:60
./pkg/phlaredb/block_querier.go:1159:60:     from ... argument (slice-literal-element) at ./pkg/phlaredb/block_querier.go:1159:23
./pkg/phlaredb/block_querier.go:1159:60:   flow: {heap} = {storage for ... argument}:
./pkg/phlaredb/block_querier.go:1159:60:     from ... argument (spill) at ./pkg/phlaredb/block_querier.go:1159:23
./pkg/phlaredb/block_querier.go:1159:60:     from errors.Wrapf(phlaredb.err, "getting attributes for '%s'", ... argument...) (call parameter) at ./pkg/phlaredb/block_querier.go:1159:23
./pkg/phlaredb/block_querier.go:1154:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1154:33:   flow: phlaredb.filePath = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1154:33:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1154:33
./pkg/phlaredb/block_querier.go:1154:33:     from phlaredb.filePath := (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign) at ./pkg/phlaredb/block_querier.go:1154:11
./pkg/phlaredb/block_querier.go:1154:33:   flow: {heap} = phlaredb.filePath:
./pkg/phlaredb/block_querier.go:1154:33:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1157:40
./pkg/phlaredb/block_querier.go:1152:57: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1152:57:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1152:57:     from phlaredb.bucketReader.Attributes(phlaredb.ctx, phlaredb.filePath) (call parameter) at ./pkg/phlaredb/block_querier.go:1157:40
./pkg/phlaredb/block_querier.go:1152:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1152:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1152:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1154:15
./pkg/phlaredb/block_querier.go:1152:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1154:30
./pkg/phlaredb/block_querier.go:1152:36: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1152:36:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1152:36:     from phlaredb.contextBlockMetrics(phlaredb.ctx) (call parameter) at ./pkg/phlaredb/block_querier.go:1153:33
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:444:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:454:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:465:25: config does not escape
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/config.go:476:25: config does not escape
./pkg/phlaredb/block_querier.go:1154:33: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1159:23: ... argument does not escape
./pkg/phlaredb/block_querier.go:1159:60: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1164:53: context.backgroundCtx{} escapes to heap
./pkg/phlaredb/block_querier.go:1166:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1166:50: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1168:36: &parquet.optimizedReaderAt{...} escapes to heap
./pkg/phlaredb/block_querier.go:1172:38: ... argument does not escape
./pkg/phlaredb/block_querier.go:1172:72: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1172:104: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1174:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1174:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1177:20: ... argument does not escape
./pkg/phlaredb/block_querier.go:1177:65: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1179:30: []parquet.FileOption{...} does not escape
./pkg/phlaredb/block_querier.go:1180:27: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1181:23: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1182:25: func literal escapes to heap
./pkg/phlaredb/block_querier.go:1187:22: ... argument does not escape
./pkg/phlaredb/block_querier.go:1187:57: phlaredb.filePath escapes to heap
./pkg/phlaredb/block_querier.go:1062:13: phlaredb.ids escapes to heap:
./pkg/phlaredb/block_querier.go:1062:13:   flow: {heap} = &{storage for phlaredb.ids}:
./pkg/phlaredb/block_querier.go:1062:13:     from phlaredb.ids (spill) at ./pkg/phlaredb/block_querier.go:1062:13
./pkg/phlaredb/block_querier.go:1062:13:     from sort.Slice(phlaredb.ids, func literal) (call parameter) at ./pkg/phlaredb/block_querier.go:1062:12
./pkg/phlaredb/block_querier.go:1061:2: phlaredb.uniqueIDs[go.shape.struct {}].iterator capturing by value: phlaredb.ids (addr=false assign=false width=24)
./pkg/phlaredb/block_querier.go:1060:6: phlaredb.uniqueIDs[go.shape.struct {}].iterator capturing by value: phlaredb..dict (addr=false assign=false width=8)
./pkg/phlaredb/block_querier.go:1061:16: make([]go.shape.int64, 0, len(lo.in)) escapes to heap:
./pkg/phlaredb/block_querier.go:1061:16:   flow: {heap} = &{storage for make([]go.shape.int64, 0, len(lo.in))}:
./pkg/phlaredb/block_querier.go:1061:16:     from make([]go.shape.int64, 0, len(lo.in)) (non-constant size) at ./pkg/phlaredb/block_querier.go:1061:16
./pkg/phlaredb/block_querier.go:1065:30: &iter.sliceIterator[go.shape.int64]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1065:30:   flow: ~R0 = &{storage for &iter.sliceIterator[go.shape.int64]{...}}:
./pkg/phlaredb/block_querier.go:1065:30:     from &iter.sliceIterator[go.shape.int64]{...} (spill) at ./pkg/phlaredb/block_querier.go:1065:30
./pkg/phlaredb/block_querier.go:1065:30:     from &iter.sliceIterator[go.shape.int64]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1065:30
./pkg/phlaredb/block_querier.go:1065:30:     from ~R0 = &iter.sliceIterator[go.shape.int64]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1065:30
./pkg/phlaredb/block_querier.go:1065:30:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1065:30:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1065:2
./pkg/phlaredb/block_querier.go:1061:16: make([]go.shape.int64, 0, len(lo.in)) escapes to heap
./pkg/phlaredb/block_querier.go:1062:13: phlaredb.ids escapes to heap
./pkg/phlaredb/block_querier.go:1062:18: func literal does not escape
./pkg/phlaredb/block_querier.go:1065:30: &iter.sliceIterator[go.shape.int64]{...} escapes to heap
./pkg/iter/iter.go:90:10: iter.(*sliceIterator[go.shape.int64]).Next ignoring self-assignment in iter.i.list = iter.i.list[1:]
./pkg/iter/iter.go:87:6: iter.(*sliceIterator[int64]).Next ignoring self-assignment in iter.i.list = iter.i.list[1:]
./pkg/iter/iter.go:78:9: &iter.sliceIterator[go.shape.int64]{...} escapes to heap:
./pkg/iter/iter.go:78:9:   flow: ~r0 = &{storage for &iter.sliceIterator[go.shape.int64]{...}}:
./pkg/iter/iter.go:78:9:     from &iter.sliceIterator[go.shape.int64]{...} (spill) at ./pkg/iter/iter.go:78:9
./pkg/iter/iter.go:78:9:     from &iter.sliceIterator[go.shape.int64]{...} (interface-converted) at ./pkg/iter/iter.go:78:9
./pkg/iter/iter.go:78:9:     from return &iter.sliceIterator[go.shape.int64]{...} (return) at ./pkg/iter/iter.go:78:2
./pkg/iter/iter.go:77:30: parameter iter.s leaks to {storage for &iter.sliceIterator[go.shape.int64]{...}} with derefs=0:
./pkg/iter/iter.go:77:30:   flow: {storage for &iter.sliceIterator[go.shape.int64]{...}} = iter.s:
./pkg/iter/iter.go:77:30:     from iter.sliceIterator[go.shape.int64]{...} (struct literal element) at ./pkg/iter/iter.go:78:26
./pkg/iter/iter.go:78:9: &iter.sliceIterator[go.shape.int64]{...} escapes to heap
./pkg/iter/iter.go:77:6: &iter.sliceIterator[go.shape.int64]{...} escapes to heap:
./pkg/iter/iter.go:77:6:   flow: ~R0 = &{storage for &iter.sliceIterator[go.shape.int64]{...}}:
./pkg/iter/iter.go:77:6:     from &iter.sliceIterator[go.shape.int64]{...} (spill) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:6:     from &iter.sliceIterator[go.shape.int64]{...} (interface-converted) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:6:     from ~R0 = &iter.sliceIterator[go.shape.int64]{...} (assign-pair) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:6:   flow: ~r0 = ~R0:
./pkg/iter/iter.go:77:6:     from return ~R0 (return) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:30: parameter iter.s leaks to {storage for &iter.sliceIterator[go.shape.int64]{...}} with derefs=0:
./pkg/iter/iter.go:77:30:   flow: iter.s = iter.s:
./pkg/iter/iter.go:77:30:     from iter..dict, iter.s := &iter..dict.NewSliceIterator[int64], iter.s (assign-pair) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:30:   flow: {storage for &iter.sliceIterator[go.shape.int64]{...}} = iter.s:
./pkg/iter/iter.go:77:30:     from iter.sliceIterator[go.shape.int64]{...} (struct literal element) at ./pkg/iter/iter.go:77:6
./pkg/iter/iter.go:77:6: &iter.sliceIterator[go.shape.int64]{...} escapes to heap
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:6:16: make([]go.shape.int64, 0, len(lo.in)) escapes to heap:
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:6:16:   flow: {heap} = &{storage for make([]go.shape.int64, 0, len(lo.in))}:
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:6:16:     from make([]go.shape.int64, 0, len(lo.in)) (non-constant size) at ../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:6:16
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:6:16: make([]go.shape.int64, 0, len(lo.in)) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return connect.b.conn (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.b.conn.Send(connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn.Send(nil) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:31
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:30
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: connect.req escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:   flow: {heap} = &connect.req:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (address-of) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: moved to heap: connect.req
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:29
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return connect.b.conn (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.b.conn.Send(connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn.Send(nil) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:31
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:30
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: connect.req escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:   flow: {heap} = &connect.req:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (address-of) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: moved to heap: connect.req
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:29
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return connect.b.conn (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.b.conn.Send(connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn.Send(nil) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:31
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:30
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: connect.req escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:   flow: {heap} = &connect.req:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (address-of) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: moved to heap: connect.req
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:29
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return connect.b.conn (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.b.conn.Send(connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn.Send(nil) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:31
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:30
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: connect.req escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:   flow: {heap} = &connect.req:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (address-of) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: moved to heap: connect.req
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:29
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:210:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return connect.r.method (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:202:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:186:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return connect.r.peer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:178:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return connect.r.spec (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:173:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:168:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return connect.r.trailer (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:281:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:279:19: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:12
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return connect.r.header (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:267:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:265:18: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return connect.r.Msg (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:257:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from connect.b.conn.Send(connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:182:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:11
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from connect.b.conn.Send(nil) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:180:21
./pkg/scheduler/scheduler.go:406:14: scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send capturing by value: .autotmp_5 (addr=false assign=false width=8)
./pkg/scheduler/scheduler.go:404:43: parameter scheduler.msg leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:404:43:   flow: {heap} = scheduler.msg:
./pkg/scheduler/scheduler.go:404:43:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b.stream, (*[14]uintptr)(scheduler..dict[1]), scheduler.msg) (call parameter) at ./pkg/scheduler/scheduler.go:411:22
./pkg/scheduler/scheduler.go:404:7: parameter scheduler.b leaks to {heap} with derefs=2:
./pkg/scheduler/scheduler.go:404:7:   flow: {heap} = **scheduler.b:
./pkg/scheduler/scheduler.go:404:7:     from scheduler.b.stream (dot of pointer) at ./pkg/scheduler/scheduler.go:411:10
./pkg/scheduler/scheduler.go:404:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b.stream, (*[14]uintptr)(scheduler..dict[1]), scheduler.msg) (call parameter) at ./pkg/scheduler/scheduler.go:411:22
./pkg/scheduler/scheduler.go:404:7: parameter scheduler.b leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:404:7:   flow: .autotmp_5 = scheduler.b:
./pkg/scheduler/scheduler.go:404:7:     from scheduler.b.lock (dot of pointer) at ./pkg/scheduler/scheduler.go:406:9
./pkg/scheduler/scheduler.go:404:7:     from scheduler.b.lock (address-of) at ./pkg/scheduler/scheduler.go:406:14
./pkg/scheduler/scheduler.go:404:7:     from .autotmp_5 = scheduler.b.lock (assign) at ./pkg/scheduler/scheduler.go:406:14
./pkg/scheduler/scheduler.go:404:7:   flow: {heap} = .autotmp_5:
./pkg/scheduler/scheduler.go:404:7:     from (*sync.Mutex).Unlock(.autotmp_5) (call parameter) at ./pkg/scheduler/scheduler.go:406:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: connect.req escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:   flow: {heap} = &connect.req:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (address-of) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from &connect.req (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:27
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:13
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from connect.b.conn.Receive(&connect.req) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:152:26
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:151:6: moved to heap: connect.req
./pkg/scheduler/scheduler.go:395:14: scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive capturing by value: .autotmp_7 (addr=false assign=false width=8)
./pkg/scheduler/scheduler.go:393:7: parameter scheduler.c leaks to {heap} with derefs=2:
./pkg/scheduler/scheduler.go:393:7:   flow: {heap} = **scheduler.c:
./pkg/scheduler/scheduler.go:393:7:     from scheduler.c.stream (dot of pointer) at ./pkg/scheduler/scheduler.go:401:10
./pkg/scheduler/scheduler.go:393:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive(scheduler.c.stream, (*[14]uintptr)(scheduler..dict[0])) (call parameter) at ./pkg/scheduler/scheduler.go:401:25
./pkg/scheduler/scheduler.go:393:7: parameter scheduler.c leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:393:7:   flow: .autotmp_7 = scheduler.c:
./pkg/scheduler/scheduler.go:393:7:     from scheduler.c.lock (dot of pointer) at ./pkg/scheduler/scheduler.go:395:9
./pkg/scheduler/scheduler.go:393:7:     from scheduler.c.lock (address-of) at ./pkg/scheduler/scheduler.go:395:14
./pkg/scheduler/scheduler.go:393:7:     from .autotmp_7 = scheduler.c.lock (assign) at ./pkg/scheduler/scheduler.go:395:14
./pkg/scheduler/scheduler.go:393:7:   flow: {heap} = .autotmp_7:
./pkg/scheduler/scheduler.go:393:7:     from (*sync.Mutex).Unlock(.autotmp_7) (call parameter) at ./pkg/scheduler/scheduler.go:395:21
./pkg/scheduler/scheduler.go:386:14: scheduler.(*BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close capturing by value: .autotmp_3 (addr=false assign=false width=8)
./pkg/scheduler/scheduler.go:384:7: parameter scheduler.c leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:384:7:   flow: .autotmp_3 = scheduler.c:
./pkg/scheduler/scheduler.go:384:7:     from scheduler.c.lock (dot of pointer) at ./pkg/scheduler/scheduler.go:386:9
./pkg/scheduler/scheduler.go:384:7:     from scheduler.c.lock (address-of) at ./pkg/scheduler/scheduler.go:386:14
./pkg/scheduler/scheduler.go:384:7:     from .autotmp_3 = scheduler.c.lock (assign) at ./pkg/scheduler/scheduler.go:386:14
./pkg/scheduler/scheduler.go:384:7:   flow: {heap} = .autotmp_3:
./pkg/scheduler/scheduler.go:384:7:     from (*sync.Mutex).Unlock(.autotmp_3) (call parameter) at ./pkg/scheduler/scheduler.go:386:21
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return connect.b.conn (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:188:2
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:173:31
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:164:30
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:145:29
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:140:20
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:10
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:135:20
./pkg/scheduler/scheduler.go:404:43: parameter scheduler.msg leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:404:43:   flow: {heap} = scheduler.msg:
./pkg/scheduler/scheduler.go:404:43:     from (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], scheduler.msg) (call parameter) at ./pkg/scheduler/scheduler.go:404:6
./pkg/scheduler/scheduler.go:404:7: parameter scheduler.b leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:404:7:   flow: {heap} = scheduler.b:
./pkg/scheduler/scheduler.go:404:7:     from (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], scheduler.msg) (call parameter) at ./pkg/scheduler/scheduler.go:404:6
./pkg/scheduler/scheduler.go:393:7: parameter scheduler.c leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:393:7:   flow: {heap} = scheduler.c:
./pkg/scheduler/scheduler.go:393:7:     from (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive(scheduler.c, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) (call parameter) at ./pkg/scheduler/scheduler.go:393:6
./pkg/scheduler/scheduler.go:384:7: parameter scheduler.c leaks to {heap} with derefs=0:
./pkg/scheduler/scheduler.go:384:7:   flow: {heap} = scheduler.c:
./pkg/scheduler/scheduler.go:384:7:     from (*scheduler.BidiStreamCloser[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close(scheduler.c, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) (call parameter) at ./pkg/scheduler/scheduler.go:384:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~R0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from ~R0 = connect.b.conn (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~R0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from ~R0 = connect.b.conn (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Receive(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~R0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from ~R0 = connect.b.conn (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~R0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from ~R0 = connect.b.conn (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Receive(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7: parameter connect.b leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~R0 = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from ~R0 = connect.b.conn (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37: parameter connect.msg leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:   flow: {heap} = connect.msg:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:37:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse], connect.msg) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:7:     from connect.b.conn.ResponseTrailer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:7:     from connect.b.conn.ResponseHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:7:     from (*connect.BidiStream[go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },go.shape.struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:7:     from connect.b.conn.RequestHeader() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:7:     from connect.b.conn.Peer() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7: parameter connect.b leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: connect.b = connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b, connect..dict := connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:   flow: {heap} = *connect.b:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:7:     from connect.b.conn.Spec() (call parameter) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6
./pkg/phlaredb/block_querier.go:1206:109: parameter phlaredb.alias leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:109:   flow: {heap} = phlaredb.alias:
./pkg/phlaredb/block_querier.go:1206:109:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1206:6
./pkg/phlaredb/block_querier.go:1206:82: parameter phlaredb.predicate leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:82:   flow: {heap} = phlaredb.predicate:
./pkg/phlaredb/block_querier.go:1206:82:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1206:6
./pkg/phlaredb/block_querier.go:1206:63: parameter phlaredb.columnName leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:63:   flow: {heap} = phlaredb.columnName:
./pkg/phlaredb/block_querier.go:1206:63:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1206:6
./pkg/phlaredb/block_querier.go:1206:42: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1206:42:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1206:42:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1206:6
./pkg/phlaredb/block_querier.go:1206:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1206:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1206:7:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) (call parameter) at ./pkg/phlaredb/block_querier.go:1206:6
./pkg/phlaredb/block_querier.go:1202:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1202:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1202:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1202:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1202:6:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1202:6:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:6:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1202:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1202:6
./pkg/phlaredb/block_querier.go:1202:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1193:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1193:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1193:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1193:6
./pkg/phlaredb/block_querier.go:1193:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1193:7:     from phlaredb.r.reader (dot of pointer) at ./pkg/phlaredb/block_querier.go:1193:6
./pkg/phlaredb/block_querier.go:1193:7:     from phlaredb.r.reader.Close() (call parameter) at ./pkg/phlaredb/block_querier.go:1193:6
./pkg/phlaredb/block_querier.go:1152:57: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1152:57:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1152:57:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1152:6
./pkg/phlaredb/block_querier.go:1152:36: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1152:36:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1152:36:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1152:6
./pkg/phlaredb/block_querier.go:1152:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1152:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1152:7:     from (*phlaredb.parquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.parquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.ProfilePersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1152:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~R0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from ~R0 = &phlaredb.cacheIterator[go.shape.*uint8]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1336:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: phlaredb.rowNumIterator = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) (call parameter) at ./pkg/phlaredb/block_querier.go:1358:6
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping]) (call parameter) at ./pkg/phlaredb/block_querier.go:1348:6
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1332:6:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1332:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) (call parameter) at ./pkg/phlaredb/block_querier.go:1322:6
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~R0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from ~R0 = &phlaredb.cacheIterator[go.shape.*uint8]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1336:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: phlaredb.rowNumIterator = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) (call parameter) at ./pkg/phlaredb/block_querier.go:1358:6
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation]) (call parameter) at ./pkg/phlaredb/block_querier.go:1348:6
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1332:6:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1332:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) (call parameter) at ./pkg/phlaredb/block_querier.go:1322:6
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~R0 = &{storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}}:
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (spill) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.*uint8]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from ~R0 = &phlaredb.cacheIterator[go.shape.*uint8]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1336:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: phlaredb.rowNumIterator = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.*uint8]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.*uint8]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.*uint8]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) (call parameter) at ./pkg/phlaredb/block_querier.go:1358:6
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from (*phlaredb.cacheIterator[go.shape.*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction]) (call parameter) at ./pkg/phlaredb/block_querier.go:1348:6
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1332:6:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1332:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) (call parameter) at ./pkg/phlaredb/block_querier.go:1322:6
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from (*phlaredb.inMemoryparquetReader[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
<autogenerated>:1: parameter q leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *q:
<autogenerated>:1:     from q.Result (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from runtime.memequal(<node SPTR>, <node SPTR>, uintptr(len(string(p.Result)))) (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter p leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *p:
<autogenerated>:1:     from p.Result (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from runtime.memequal(<node SPTR>, <node SPTR>, uintptr(len(string(p.Result)))) (call parameter) at <autogenerated>:1
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.string]{...} escapes to heap:
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~R0 = &{storage for &phlaredb.cacheIterator[go.shape.string]{...}}:
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.string]{...} (spill) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from &phlaredb.cacheIterator[go.shape.string]{...} (interface-converted) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:     from ~R0 = &phlaredb.cacheIterator[go.shape.string]{...} (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1336:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71: parameter phlaredb.rowNumIterator leaks to {storage for &phlaredb.cacheIterator[go.shape.string]{...}} with derefs=0:
./pkg/phlaredb/block_querier.go:1336:71:   flow: phlaredb.rowNumIterator = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:71:   flow: {storage for &phlaredb.cacheIterator[go.shape.string]{...}} = phlaredb.rowNumIterator:
./pkg/phlaredb/block_querier.go:1336:71:     from phlaredb.cacheIterator[go.shape.string]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7: parameter phlaredb.r leaks to {storage for &phlaredb.cacheIterator[go.shape.string]{...}} with derefs=1:
./pkg/phlaredb/block_querier.go:1336:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r, phlaredb..dict, phlaredb._, phlaredb.rowNumIterator := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_3, phlaredb.rowNumIterator (assign-pair) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:   flow: {storage for &phlaredb.cacheIterator[go.shape.string]{...}} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.r.cache (dot of pointer) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:7:     from phlaredb.cacheIterator[go.shape.string]{...} (struct literal element) at ./pkg/phlaredb/block_querier.go:1336:6
./pkg/phlaredb/block_querier.go:1336:6: &phlaredb.cacheIterator[go.shape.string]{...} escapes to heap
./pkg/phlaredb/block_querier.go:1358:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1358:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1358:7:     from (*phlaredb.cacheIterator[go.shape.string]).At(phlaredb.c, &phlaredb..dict.cacheIterator[string]) (call parameter) at ./pkg/phlaredb/block_querier.go:1358:6
./pkg/phlaredb/block_querier.go:1348:7: parameter phlaredb.c leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1348:7:   flow: {heap} = *phlaredb.c:
./pkg/phlaredb/block_querier.go:1348:7:     from (*phlaredb.cacheIterator[go.shape.string]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[string]) (call parameter) at ./pkg/phlaredb/block_querier.go:1348:6
./pkg/phlaredb/block_querier.go:1332:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1332:7:   flow: phlaredb.r = phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r, phlaredb..dict := phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1332:7:     from phlaredb.r.persister (dot of pointer) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) (call parameter) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap:
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~R0 = &{storage for (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix}:
./pkg/phlaredb/block_querier.go:1332:6:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (spill) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:     from ~R0 = (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix (assign-pair) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6:   flow: ~r0 = ~R0:
./pkg/phlaredb/block_querier.go:1332:6:     from return ~R0 (return) at ./pkg/phlaredb/block_querier.go:1332:6
./pkg/phlaredb/block_querier.go:1332:6: (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix escapes to heap
./pkg/phlaredb/block_querier.go:1322:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1322:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1322:7:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) (call parameter) at ./pkg/phlaredb/block_querier.go:1322:6
./pkg/phlaredb/block_querier.go:1296:55: parameter phlaredb.rg leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1296:55:   flow: {heap} = phlaredb.rg:
./pkg/phlaredb/block_querier.go:1296:55:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1296:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1296:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1296:7:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.rg) (call parameter) at ./pkg/phlaredb/block_querier.go:1296:6
./pkg/phlaredb/block_querier.go:1238:65: parameter phlaredb.bucketReader leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:65:   flow: {heap} = phlaredb.bucketReader:
./pkg/phlaredb/block_querier.go:1238:65:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:44: parameter phlaredb.ctx leaks to {heap} with derefs=0:
./pkg/phlaredb/block_querier.go:1238:44:   flow: {heap} = phlaredb.ctx:
./pkg/phlaredb/block_querier.go:1238:44:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
./pkg/phlaredb/block_querier.go:1238:7: parameter phlaredb.r leaks to {heap} with derefs=1:
./pkg/phlaredb/block_querier.go:1238:7:   flow: {heap} = *phlaredb.r:
./pkg/phlaredb/block_querier.go:1238:7:     from (*phlaredb.inMemoryparquetReader[go.shape.string,go.shape.*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.ctx, phlaredb.bucketReader) (call parameter) at ./pkg/phlaredb/block_querier.go:1238:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: parquet.rowGroup = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.Profile] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Flush(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.ctx) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:113:6
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = **phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:80:6
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,go.shape.struct { MappingId uint32; Address uint64; LinesHash uint64 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:49:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: parquet.rowGroup = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.LocationPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Flush(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.ctx) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:113:6
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = **phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:80:6
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,go.shape.struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:49:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: parquet.rowGroup = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.FunctionPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Flush(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.ctx) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:113:6
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = **phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:80:6
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (*phlaredb.deduplicatingSlice[go.shape.*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,go.shape.struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:49:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: parquet.rowGroup = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.MappingPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
./pkg/phlaredb/deduplicating_slice.go:231:63: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:231:63:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:231:63:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:231:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:231:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:231:7:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.dst, phlaredb.elems) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:231:6
./pkg/phlaredb/deduplicating_slice.go:173:79: parameter phlaredb.rewriter leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:79:   flow: {heap} = phlaredb.rewriter:
./pkg/phlaredb/deduplicating_slice.go:173:79:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:68: parameter phlaredb.elems leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:173:68:   flow: {heap} = *phlaredb.elems:
./pkg/phlaredb/deduplicating_slice.go:173:68:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:173:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:173:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:173:7:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:173:6
./pkg/phlaredb/deduplicating_slice.go:113:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:113:7:   flow: {heap} = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:113:7:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Flush(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.ctx) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:113:6
./pkg/phlaredb/deduplicating_slice.go:92:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, (*[35]uintptr)(phlaredb..dict[12]) (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:92:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:92:6
./pkg/phlaredb/deduplicating_slice.go:80:7: parameter phlaredb.s leaks to {heap} with derefs=2:
./pkg/phlaredb/deduplicating_slice.go:80:7:   flow: {heap} = **phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:80:7:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:80:6
./pkg/phlaredb/deduplicating_slice.go:61:80: parameter phlaredb.metrics leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:80:   flow: {heap} = phlaredb.metrics:
./pkg/phlaredb/deduplicating_slice.go:61:80:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:60: parameter phlaredb.cfg leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:60:   flow: {heap} = phlaredb.cfg:
./pkg/phlaredb/deduplicating_slice.go:61:60:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:47: parameter phlaredb.path leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:61:47:   flow: {heap} = phlaredb.path:
./pkg/phlaredb/deduplicating_slice.go:61:47:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:61:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:61:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:61:7:     from (*phlaredb.deduplicatingSlice[go.shape.string,go.shape.string,go.shape.*uint8,go.shape.*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:61:6
./pkg/phlaredb/deduplicating_slice.go:57:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:57:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:57:6
./pkg/phlaredb/deduplicating_slice.go:53:7: parameter phlaredb.s leaks to {heap} with derefs=0:
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: atomic.i = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from phlaredb.s.size (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i := phlaredb.s.size (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:   flow: {heap} = atomic.i:
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.i.v (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from &atomic.i.v (address-of) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:53:7:     from atomic.LoadUint64(&atomic.i.v) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:53:6
./pkg/phlaredb/deduplicating_slice.go:49:7: parameter phlaredb.s leaks to {heap} with derefs=1:
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: phlaredb.s = phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s, phlaredb..dict := phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:   flow: {heap} = *phlaredb.s:
./pkg/phlaredb/deduplicating_slice.go:49:7:     from phlaredb.s.persister (dot of pointer) at ./pkg/phlaredb/deduplicating_slice.go:49:6
./pkg/phlaredb/deduplicating_slice.go:49:7:     from (func(go.shape.*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) (call parameter) at ./pkg/phlaredb/deduplicating_slice.go:49:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:37:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeAny(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:38:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:7:     from (*parquet.GenericWriter[go.shape.*uint8]).writeRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7: parameter parquet.w leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from parquet.w.schema (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = parquet.w.schema (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~R0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from ~R0 = ~R0 (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: parquet.rows = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:41:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w, parquet..dict, parquet.rows := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:7:     from (*parquet.Writer).ReadRowsFrom(parquet.w.base, parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53: parameter parquet.value leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: parquet.value = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:   flow: {heap} = parquet.value:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:53:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48: parameter parquet.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: parquet.key = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:   flow: {heap} = parquet.key:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from format.KeyValue{...} (struct literal element) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:48:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7: parameter parquet.w leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet..dict, parquet.key, parquet.value := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w, parquet.key, parquet.value := parquet.w.base, parquet.key, parquet.value (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {temp} = **parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from append(parquet.w.writer.metadata, format.KeyValue{...}) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:7:     from parquet.w.writer.metadata = append(parquet.w.writer.metadata, format.KeyValue{...}) (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42: parameter parquet.rowGroup leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: parquet.rowGroup = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:   flow: {heap} = parquet.rowGroup:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:42:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w, parquet..dict, parquet.rowGroup := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rowGroup (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:7:     from (*parquet.Writer).WriteRowGroup(parquet.w.base, parquet.rowGroup) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38: parameter parquet.rows leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:   flow: {heap} = *parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:38:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:7:     from (*parquet.GenericWriter[go.shape.*uint8]).WriteRows(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34: parameter parquet.rows leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:   flow: {heap} = parquet.rows:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:34:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7: parameter parquet.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:   flow: {heap} = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Write(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.rows) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from parquet.w.output (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:7:     from (*parquet.writer).reset(parquet.w.writer, parquet.w.output) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34: parameter parquet.output leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet..dict, parquet.output := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister], parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: parquet.output = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w, parquet.output := parquet.w.base, parquet.output (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:   flow: {heap} = parquet.output:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:34:     from parquet.w.output = parquet.output (assign) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:7:     from (*parquet.GenericWriter[go.shape.*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister]) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7: parameter parquet.w leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w, parquet..dict := parquet.w, &parquet..dict.GenericWriter[*github.com/grafana/pyroscope/pkg/phlaredb/schemas/v1.StringPersister] (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: parquet.w = parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.base (address-of) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w := parquet.w.base (assign-pair) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:   flow: {heap} = *parquet.w:
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from parquet.w.writer (dot of pointer) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:7:     from (*parquet.writer).close(parquet.w.writer) (call parameter) at ../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6:     from connect.r.trailer = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from connect.r.trailer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from ~R0 = connect.r.trailer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r, connect..dict := connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39: parameter connect.method leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: connect.method = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r, connect..dict, connect.method := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest], connect.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:   flow: {heap} = connect.method:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:39:     from connect.r.method = connect.method (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from connect.r.method (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from ~R0 = connect.r.method (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:   flow: {heap} = &{storage for make(http.Header)}:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from make(http.Header) (spill) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6:     from connect.r.header = make(http.Header) (assign) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from connect.r.header (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from ~R0 = connect.r.header (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: make(http.Header) escapes to heap
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from connect.r.peer (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from ~R0 = connect.r.peer (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from connect.r.spec (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from ~R0 = connect.r.spec (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7: parameter connect.r leaks to ~r0 with derefs=1:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: connect.r = connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r, connect..dict := connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest] (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~R0 = *connect.r:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (dot of pointer) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from connect.r.Msg (interface-converted) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from ~R0 = connect.r.Msg (assign-pair) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: atomic.new = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37: parameter atomic.old leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: atomic.old = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: {heap} = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: atomic.new = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.x, atomic..dict, atomic.new := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x, atomic..dict, atomic.new := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28: parameter atomic.val leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: atomic.val = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.x, atomic..dict, atomic.val := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.val (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: {heap} = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x, atomic..dict, atomic.val := atomic.x, &atomic..dict.Pointer[net/http.response], atomic.val (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x, atomic..dict := atomic.x, &atomic..dict.Pointer[net/http.response] (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.LoadPointer(&atomic.x.v) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25: parameter btree.c leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25:   flow: {heap} = *btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:25:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).reset(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.c) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).reset(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.c) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25: parameter btree.w leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25:   flow: {heap} = btree.w:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:25:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).print(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.w, btree.level) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).print(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.w, btree.level) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49: parameter btree.stop leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49:   flow: {heap} = btree.stop:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:49:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).iterate(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.dir, btree.start, btree.stop, btree.includeStart, btree.hit, btree.iter) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42: parameter btree.start leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42:   flow: {heap} = btree.start:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:42:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).iterate(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.dir, btree.start, btree.stop, btree.includeStart, btree.hit, btree.iter) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).iterate(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.dir, btree.start, btree.stop, btree.includeStart, btree.hit, btree.iter) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:45:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i, btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i, btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:26:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).remove(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.item, btree.minItems, btree.typ) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23: parameter btree.key leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23:   flow: {heap} = btree.key:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:23:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).get(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.key) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:   flow: {heap} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).get(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.key) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:26:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insert(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.item, btree.maxItems) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).insert(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.item, btree.maxItems) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i, btree.maxItems) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).split(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7: parameter btree.n leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n, btree..dict, btree.i := btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: {heap} = *btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.cow (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7: parameter btree.n leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: btree.n = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n, btree..dict, btree.i := btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: {temp} = **btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.children (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.n.children[btree.i] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: btree.c = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from btree.c := (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: ~R0 = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from ~R0 = btree.c (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30: parameter btree.cow leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:   flow: {heap} = btree.cow:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:30:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7: parameter btree.n leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: {temp} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: {heap} = **{temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7: parameter btree.n leaks to ~r0 with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: {temp} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:   flow: ~r0 = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:7:     from return (*btree.node[go.shape.interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:42:     from (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item], btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7: parameter btree.c leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7:   flow: {heap} = *btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:7:     from (*btree.copyOnWriteContext[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item], btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7: parameter btree.c leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:   flow: btree.c = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:     from btree.c, btree..dict := btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item] (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:   flow: {heap} = btree.c:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:7:     from btree.n.cow = btree.c (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33: parameter btree.n leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33:   flow: {heap} = btree.n:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:33:     from (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item], btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7: parameter btree.f leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:   flow: {heap} = btree.f:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:7:     from (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item], btree.n) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7: parameter btree.f leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:   flow: {heap} = btree.f:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:7:     from (*btree.FreeListG[go.shape.interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.*uint8].find(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.item, btree.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.*uint8].find(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.item, btree.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).truncate ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).pop ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7: parameter btree.s leaks to btree.out with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.s, btree..dict := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]] (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.out = (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from return btree.out (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).removeAt ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.s, btree..dict, btree.index := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index + 1:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.s, btree..dict, btree.index := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.item = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.item := (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~R0 = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from ~R0 = btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: btree.item = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from (*btree.s)[btree.index] = btree.item (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from (*btree.s)[btree.index:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {temp} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from append(*btree.s, btree.zero) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s = append(*btree.s, btree.zero) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.item, btree.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.item, btree.less) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: btree.(*items[github.com/google/btree.Item]).truncate ignoring self-assignment in *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: btree.(*items[github.com/google/btree.Item]).pop ignoring self-assignment in *btree.s = (*btree.s)[:btree.index]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7: parameter btree.s leaks to btree.out with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.s, btree..dict := btree.s, &btree..dict.items[github.com/google/btree.Item] (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from btree.out = (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:   flow: btree.out = btree.out:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:7:     from return btree.out (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: btree.(*items[github.com/google/btree.Item]).removeAt ignoring self-assignment in *btree.s = (*btree.s)[:len(*btree.s) - 1]
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.s, btree..dict, btree.index := btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index + 1:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7: parameter btree.s leaks to ~r0 with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.s, btree..dict, btree.index := btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: btree.item = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from (*btree.s)[btree.index] (dot of pointer) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from btree.item := (*btree.s)[btree.index] (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~R0 = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from ~R0 = btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:   flow: ~r0 = ~R0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:7:     from return ~R0 (return) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: btree.item = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:40:     from (*btree.s)[btree.index] = btree.item (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = **btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from (*btree.s)[btree.index:] (slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) (copied slice) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7: parameter btree.s leaks to {heap} with derefs=1:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: btree.s = btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from btree.s, btree..dict, btree.index, btree.item := btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index, btree.item (assign-pair) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {temp} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s (indirection) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from append(*btree.s, btree.zero) (call parameter) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:   flow: {heap} = {temp}:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:7:     from *btree.s = append(*btree.s, btree.zero) (assign) at ../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: atomic.new = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[string], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:42:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37: parameter atomic.old leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: atomic.old = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[string], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:   flow: {heap} = atomic.old:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:37:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x, atomic..dict, atomic.old, atomic.new := atomic.x, &atomic..dict.Pointer[string], atomic.old, atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:7:     from atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27: parameter atomic.new leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: atomic.new = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.x, atomic..dict, atomic.new := atomic.x, &atomic..dict.Pointer[string], atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:   flow: {heap} = atomic.new:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:27:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x, atomic..dict, atomic.new := atomic.x, &atomic..dict.Pointer[string], atomic.new (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:7:     from atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28: parameter atomic.val leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: atomic.val = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.x, atomic..dict, atomic.val := atomic.x, &atomic..dict.Pointer[string], atomic.val (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:   flow: {heap} = atomic.val:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:28:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x, atomic..dict, atomic.val := atomic.x, &atomic..dict.Pointer[string], atomic.val (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:7:     from atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7: parameter atomic.x leaks to {heap} with derefs=0:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: atomic.x = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x, atomic..dict := atomic.x, &atomic..dict.Pointer[string] (assign-pair) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:   flow: {heap} = atomic.x:
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.x.v (dot of pointer) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from &atomic.x.v (address-of) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:7:     from atomic.LoadPointer(&atomic.x.v) (call parameter) at ../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: btree.item = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.s, btree.item, btree.less := .this, btree.item, btree.less (assign-pair) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter .this leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: btree.s = *.this:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from .this (indirection) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.s, btree.item, btree.less := .this, btree.item, btree.less (assign-pair) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: btree.item = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.s, btree.item, btree.less := .this, btree.item, btree.less (assign-pair) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.*uint8].find(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter .this leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: btree.s = *.this:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from .this (indirection) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.s, btree.item, btree.less := .this, btree.item, btree.less (assign-pair) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = *btree.s:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.*uint8].find(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.item, btree.less) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:193:7: parameter .this leaks to {heap} with derefs=0:
./pkg/phlare/phlare.go:193:7:   flow: {heap} = .this:
./pkg/phlare/phlare.go:193:7:     from .this.Config (dot of pointer) at <autogenerated>:1
./pkg/phlare/phlare.go:193:7:     from .this.Config (address-of) at <autogenerated>:1
./pkg/phlare/phlare.go:193:7:     from (*phlare.Config).ApplyDynamicConfig(.this.Config) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:121:64: parameter phlare.f leaks to {heap} with derefs=1:
./pkg/phlare/phlare.go:121:64:   flow: {heap} = *phlare.f:
./pkg/phlare/phlare.go:121:64:     from (*phlare.Config).RegisterFlagsWithContext(.this.Config, phlare.ctx, phlare.f) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:121:43: parameter phlare.ctx leaks to {heap} with derefs=0:
./pkg/phlare/phlare.go:121:43:   flow: {heap} = phlare.ctx:
./pkg/phlare/phlare.go:121:43:     from (*phlare.Config).RegisterFlagsWithContext(.this.Config, phlare.ctx, phlare.f) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:121:7: parameter .this leaks to {heap} with derefs=0:
./pkg/phlare/phlare.go:121:7:   flow: {heap} = .this:
./pkg/phlare/phlare.go:121:7:     from .this.Config (dot of pointer) at <autogenerated>:1
./pkg/phlare/phlare.go:121:7:     from .this.Config (address-of) at <autogenerated>:1
./pkg/phlare/phlare.go:121:7:     from (*phlare.Config).RegisterFlagsWithContext(.this.Config, phlare.ctx, phlare.f) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:179:7: parameter .this leaks to {heap} with derefs=3:
./pkg/phlare/phlare.go:179:7:   flow: {heap} = ***.this:
./pkg/phlare/phlare.go:179:7:     from .this.Config (dot of pointer) at <autogenerated>:1
./pkg/phlare/phlare.go:179:7:     from .this.Config (address-of) at <autogenerated>:1
./pkg/phlare/phlare.go:179:7:     from (*phlare.Config).Validate(.this.Config) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:146:62: parameter phlare.fs leaks to {heap} with derefs=1:
./pkg/phlare/phlare.go:146:62:   flow: {heap} = *phlare.fs:
./pkg/phlare/phlare.go:146:62:     from (*phlare.Config).registerServerFlagsWithChangedDefaultValues(.this.Config, phlare.fs) (call parameter) at <autogenerated>:1
./pkg/phlare/phlare.go:146:7: parameter .this leaks to {heap} with derefs=0:
./pkg/phlare/phlare.go:146:7:   flow: {heap} = .this:
./pkg/phlare/phlare.go:146:7:     from .this.Config (dot of pointer) at <autogenerated>:1
./pkg/phlare/phlare.go:146:7:     from .this.Config (address-of) at <autogenerated>:1
./pkg/phlare/phlare.go:146:7:     from (*phlare.Config).registerServerFlagsWithChangedDefaultValues(.this.Config, phlare.fs) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:78:7: parameter btree.than leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:78:7:   flow: {heap} = btree.than:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:78:7:     from .this.Less(btree.than) (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Less(btree.than) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(.this, btree..dict, btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter .this leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = **.this:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from .this (indirection) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.interface { Less(github.com/google/btree.Item) bool }].find(.this, btree..dict, btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24: parameter btree.item leaks to {heap} with derefs=0:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:   flow: {heap} = btree.item:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:24:     from btree.items[go.shape.*uint8].find(.this, btree..dict, btree.item, btree.less) (call parameter) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7: parameter .this leaks to {heap} with derefs=2:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:   flow: {heap} = **.this:
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from .this (indirection) at <autogenerated>:1
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:7:     from btree.items[go.shape.*uint8].find(.this, btree..dict, btree.item, btree.less) (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Fingerprint() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Labels() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.StacktracePartition() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Timestamp() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Seek(iter.pos) (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.At() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Close() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Err() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=0:
<autogenerated>:1:   flow: {heap} = .this:
<autogenerated>:1:     from .this.Iterator (dot) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Next() (call parameter) at <autogenerated>:1
<autogenerated>:1: parameter .this leaks to {heap} with derefs=1:
<autogenerated>:1:   flow: {heap} = *.this:
<autogenerated>:1:     from .this.Iterator (dot of pointer) at <autogenerated>:1
<autogenerated>:1:     from .this.Iterator.Next() (call parameter) at <autogenerated>:1
