---
# Source: phlare/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "minio-sa"
  namespace: "default"
---
# Source: phlare/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: phlare-dev
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: phlare/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: phlare-dev-minio
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
type: Opaque
data:
  rootUser: "Z3JhZmFuYS1waGxhcmU="
  rootPassword: "c3VwZXJzZWNyZXQ="
---
# Source: phlare/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: phlare-dev-minio
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4
      OBJECTLOCKING=$5
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
    # Create the bucket if it does not exist and set objectlocking if enabled (NOTE: versioning will be not changed if OBJECTLOCKING is set because it enables versioning to the Buckets created)
    if ! checkBucketExists $BUCKET ; then
        if [ ! -z $OBJECTLOCKING ] ; then
          if [ $OBJECTLOCKING = true ] ; then
              echo "Creating bucket with OBJECTLOCKING '$BUCKET'"
              ${MC} mb --with-lock myminio/$BUCKET
          elif [ $OBJECTLOCKING = false ] ; then
                echo "Creating bucket '$BUCKET'"
                ${MC} mb myminio/$BUCKET
          fi
      elif [ -z $OBJECTLOCKING ] ; then
            echo "Creating bucket '$BUCKET'"
            ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."  
      fi
      fi
    
    
      # set versioning for bucket if objectlocking is disabled or not set
      if [ -z $OBJECTLOCKING ] ; then
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi
    
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the buckets
    createBucket grafana-phlare-data none false  
  add-user: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # AccessKey and secretkey credentials file are added to prevent shell execution errors caused by special characters.
    # Special characters for example : ',",<,>,{,}
    MINIO_ACCESSKEY_SECRETKEY_TMP="/tmp/accessKey_and_secretKey_tmp"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkUserExists ()
    # Check if the user exists, by using the exit code of `mc admin user info`
    checkUserExists() {
      CMD=$(${MC} admin user info myminio $(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP) > /dev/null 2>&1)
      return $?
    }
    
    # createUser ($policy)
    createUser() {
      POLICY=$1
      #check accessKey_and_secretKey_tmp file
      if [[ ! -f $MINIO_ACCESSKEY_SECRETKEY_TMP ]];then
        echo "credentials file does not exist"
        return 1
      fi
      if [[ $(cat $MINIO_ACCESSKEY_SECRETKEY_TMP|wc -l) -ne 2 ]];then
        echo "credentials file is invalid"
        rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
        return 1
      fi
      USER=$(head -1 $MINIO_ACCESSKEY_SECRETKEY_TMP)
      # Create the user if it does not exist
      if ! checkUserExists ; then
        echo "Creating user '$USER'"
        cat $MINIO_ACCESSKEY_SECRETKEY_TMP | ${MC} admin user add myminio
      else
        echo "User '$USER' already exists."
      fi
      #clean up credentials files.
      rm -f $MINIO_ACCESSKEY_SECRETKEY_TMP
    
      # set policy for user
      if [ ! -z $POLICY -a $POLICY != " " ] ; then
          echo "Adding policy '$POLICY' for '$USER'"
          ${MC} admin policy set myminio $POLICY user=$USER
      else
          echo "User '$USER' has no policy attached."
      fi
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
    
    # Create the users
    echo console > $MINIO_ACCESSKEY_SECRETKEY_TMP
    echo console123 >> $MINIO_ACCESSKEY_SECRETKEY_TMP
    createUser consoleAdmin
    
  add-policy: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkPolicyExists ($policy)
    # Check if the policy exists, by using the exit code of `mc admin policy info`
    checkPolicyExists() {
      POLICY=$1
      CMD=$(${MC} admin policy info myminio $POLICY > /dev/null 2>&1)
      return $?
    }
    
    # createPolicy($name, $filename)
    createPolicy () {
      NAME=$1
      FILENAME=$2
    
      # Create the name if it does not exist
      echo "Checking policy: $NAME (in /config/$FILENAME.json)"
      if ! checkPolicyExists $NAME ; then
        echo "Creating policy '$NAME'"
      else
        echo "Policy '$NAME' already exists."
      fi
      ${MC} admin policy add myminio $NAME /config/$FILENAME.json
    
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
    
    
  custom-command: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for MinIO service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/rootUser) ; SECRET=$(cat /config/rootPassword) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to MinIO server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # runCommand ($@)
    # Run custom mc command
    runCommand() {
      ${MC} "$@"
      return $?
    }
    
    # Try connecting to MinIO instance
    scheme=http
    connectToMinio $scheme
---
# Source: phlare/templates/configmap-overrides.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: phlare-dev-overrides-config
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
data:
  overrides.yaml: |
    overrides:
      {}
---
# Source: phlare/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: phlare-dev-config
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    scrape_configs:
    - job_name: kubernetes-pods-memory-default-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: true
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape
      - action: keep
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-memory-custom-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: true
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape
      - action: drop
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name
      - action: keepequal
        source_labels:
        - __meta_kubernetes_pod_container_port_name
        target_label: __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-cpu-default-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            delta: true
            enabled: true
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape
      - action: keep
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-cpu-custom-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            delta: true
            enabled: true
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape
      - action: drop
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name
      - action: keepequal
        source_labels:
        - __meta_kubernetes_pod_container_port_name
        target_label: __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-block-default-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: true
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape
      - action: keep
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-block-custom-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: true
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape
      - action: drop
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name
      - action: keepequal
        source_labels:
        - __meta_kubernetes_pod_container_port_name
        target_label: __meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_block_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-mutex-default-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: true
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape
      - action: keep
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-mutex-custom-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: false
          memory:
            enabled: false
          mutex:
            enabled: true
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape
      - action: drop
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name
      - action: keepequal
        source_labels:
        - __meta_kubernetes_pod_container_port_name
        target_label: __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-goroutine-default-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: true
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape
      - action: keep
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    - job_name: kubernetes-pods-goroutine-custom-name
      kubernetes_sd_configs:
      - role: pod
      profiling_config:
        pprof_config:
          block:
            enabled: false
          goroutine:
            enabled: true
          memory:
            enabled: false
          mutex:
            enabled: false
          process_cpu:
            enabled: false
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape
      - action: drop
        regex: ""
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name
      - action: keepequal
        source_labels:
        - __meta_kubernetes_pod_container_port_name
        target_label: __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name
      - action: replace
        regex: (https?)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        replacement: $1
        source_labels:
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path
        target_label: __profile_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 15s
    storage:
      backend: s3
      s3:
        access_key_id: grafana-phlare
        bucket_name: grafana-phlare-data
        endpoint: phlare-dev-minio:9000
        insecure: true
        secret_access_key: supersecret
---
# Source: phlare/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-phlare-dev
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
---
# Source: phlare/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-phlare-dev
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-phlare-dev
subjects:
- kind: ServiceAccount
  name: phlare-dev
  namespace: default
---
# Source: phlare/charts/minio/templates/console-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-minio-console
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9001
      protocol: TCP
      targetPort: 9001
  selector:
    app: minio
    release: phlare-dev
---
# Source: phlare/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-minio
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
    monitoring: "true"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: phlare-dev
---
# Source: phlare/charts/minio/templates/statefulset.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-minio-svc
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: "phlare-dev"
    heritage: "Helm"
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
    release: phlare-dev
---
# Source: phlare/templates/memberlist-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-memberlist
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memberlist
      port: 7946
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    # TODO: Ensure only services that offer memberlist register
    # phlare.grafana.com/memberlist: "true"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-agent
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "agent"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "agent"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-agent-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "agent"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "agent"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-distributor
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "distributor"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "distributor"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-distributor-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "distributor"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "distributor"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-ingester
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "ingester"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "ingester"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-ingester-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "ingester"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "ingester"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-querier
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "querier"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "querier"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-querier-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "querier"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "querier"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-query-frontend
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-frontend"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "query-frontend"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-query-frontend-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-frontend"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "query-frontend"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-query-scheduler
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-scheduler"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "query-scheduler"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-query-scheduler-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-scheduler"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "query-scheduler"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-store-gateway
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "store-gateway"
spec:
  type: ClusterIP
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "store-gateway"
---
# Source: phlare/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: phlare-dev-store-gateway-headless
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "store-gateway"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 4100
      targetPort: http2
      protocol: TCP
      name: http2
  selector:
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/component: "store-gateway"
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phlare-dev-agent
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "agent"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "agent"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "agent"
        name: "agent"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "agent"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=agent"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-client.url=http://phlare-dev-distributor.default.svc.cluster.local.:4100"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phlare-dev-distributor
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "distributor"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "distributor"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "distributor"
        name: "distributor"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "distributor"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 256Mi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phlare-dev-querier
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "querier"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "querier"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "querier"
        name: "querier"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "querier"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 1
              memory: 256Mi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phlare-dev-query-frontend
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-frontend"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "query-frontend"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "query-frontend"
        name: "query-frontend"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "query-frontend"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phlare-dev-query-scheduler
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "query-scheduler"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "query-scheduler"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "query-scheduler"
        name: "query-scheduler"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "query-scheduler"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-scheduler"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 256Mi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/charts/minio/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: phlare-dev-minio
  namespace: "default"
  labels:
    app: minio
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
spec:
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "Parallel"
  serviceName: phlare-dev-minio-svc
  replicas: 1
  selector:
    matchLabels:
      app: minio
      release: phlare-dev
  template:
    metadata:
      name: phlare-dev-minio
      labels:
        app: minio
        release: phlare-dev
      annotations:
        checksum/secrets: 724d4b2b4c21778e1a7ba2b50758a575320075a4ad70fb3d37039151f7a3320d
        checksum/config: a33d0359184ba5e8ad28956d2aa6e225869c19657918cd81d3c90620a36609ba
        phlare.grafana.com/port: "9000"
        phlare.grafana.com/scrape: "true"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

      serviceAccountName: minio-sa
      containers:
        - name: minio
          image: quay.io/minio/minio:RELEASE.2022-08-13T21-54-44Z
          imagePullPolicy: IfNotPresent

          command: [ "/bin/sh",
            "-ce",
            "/usr/bin/docker-entrypoint.sh minio server  http://phlare-dev-minio-{0...0}.phlare-dev-minio-svc.default.svc.cluster.local/export-{0...1} -S /etc/minio/certs/ --address :9000 --console-address :9001" ]
          volumeMounts:
            - name: export-0
              mountPath: /export-0
            - name: export-1
              mountPath: /export-1            
          ports:
            - name: http
              containerPort: 9000
            - name: http-console
              containerPort: 9001
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: phlare-dev-minio
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: phlare-dev-minio
                  key: rootPassword
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi      
      volumes:
        - name: minio-user
          secret:
            secretName: phlare-dev-minio        
  volumeClaimTemplates:
    - metadata:
        name: export-0
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
    - metadata:
        name: export-1
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: phlare-dev-ingester
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "ingester"
spec:
  serviceName: phlare-dev-ingester-headless
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "ingester"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "ingester"
        name: "ingester"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "ingester"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 16Gi
            requests:
              cpu: 1
              memory: 8Gi
      terminationGracePeriodSeconds: 600
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/templates/deployments-statefulsets.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: phlare-dev-store-gateway
  labels:
    helm.sh/chart: phlare-0.5.4
    app.kubernetes.io/name: phlare
    app.kubernetes.io/instance: phlare-dev
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "store-gateway"
spec:
  serviceName: phlare-dev-store-gateway-headless
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: phlare
      app.kubernetes.io/instance: phlare-dev
      app.kubernetes.io/component: "store-gateway"
  template:
    metadata:
      annotations:
        checksum/config: ae2c3325ef01f69fe19022a2f2aa9303fc57d603e39fcf438bfdea3b7720a696
        profiles.grafana.com/cpu.port_name: http2
        profiles.grafana.com/cpu.scrape: "true"
        profiles.grafana.com/goroutine.port_name: http2
        profiles.grafana.com/goroutine.scrape: "true"
        profiles.grafana.com/memory.port_name: http2
        profiles.grafana.com/memory.scrape: "true"
      labels:
        app.kubernetes.io/name: phlare
        app.kubernetes.io/instance: phlare-dev
        app.kubernetes.io/component: "store-gateway"
        name: "store-gateway"
    spec:
      serviceAccountName: phlare-dev
      securityContext:
        fsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      containers:
        - name: "store-gateway"
          securityContext:
            {}
          image: "grafana/phlare:0.5.1"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-memberlist.cluster-label=default-phlare-dev"
            - "-memberlist.join=dns+phlare-dev-memberlist.default.svc.cluster.local.:7946"
            - "-config.file=/etc/phlare/config.yaml"
            - "-runtime-config.file=/etc/phlare/overrides/overrides.yaml"
            - "-log.level=debug"
          ports:
            - name: http2
              containerPort: 4100
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http2
          volumeMounts:
            - name: config
              mountPath: /etc/phlare/config.yaml
              subPath: config.yaml
            - name: overrides-config
              mountPath: /etc/phlare/overrides/
            - name: data
              mountPath: /data
          resources:
            limits:
              memory: 16Gi
            requests:
              cpu: 1
              memory: 8Gi
      volumes:
        - name: config
          configMap:
            name: phlare-dev-config
        - name: overrides-config
          configMap:
            name: phlare-dev-overrides-config
        - name: data
          emptyDir: {}
---
# Source: phlare/charts/minio/templates/post-install-create-bucket-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: phlare-dev-minio-make-bucket-job
  namespace: "default"
  labels:
    app: minio-make-bucket-job
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: phlare-dev
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: phlare-dev-minio
            - secret:
                name: phlare-dev-minio
      containers:
      - name: minio-mc
        image: "quay.io/minio/mc:RELEASE.2022-08-11T00-30-48Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: phlare-dev-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
---
# Source: phlare/charts/minio/templates/post-install-create-user-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: phlare-dev-minio-make-user-job
  namespace: "default"
  labels:
    app: minio-make-user-job
    chart: minio-4.0.12
    release: phlare-dev
    heritage: Helm
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: minio-job
        release: phlare-dev
    spec:
      restartPolicy: OnFailure      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: phlare-dev-minio
            - secret:
                name: phlare-dev-minio
      containers:
      - name: minio-mc
        image: "quay.io/minio/mc:RELEASE.2022-08-11T00-30-48Z"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "/config/add-user"]
        env:
          - name: MINIO_ENDPOINT
            value: phlare-dev-minio
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            memory: 128Mi
