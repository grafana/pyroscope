syntax = "proto3";

package metastore.v1;

service OperatorService {
  rpc Info(InfoRequest) returns (InfoResponse) {}
}

// State values are chosen to match the Hashicorp Raft library states. See:
// https://github.com/hashicorp/raft/blob/42d34464b2d203e389e11ed6d43db698792c0604/state.go#L15-L27.
enum State {
  Follower = 0;
  Candidate = 1;
  Leader = 2;
  Shutdown = 3;
}

// Suffrage values are chosen to match the Hashicorp Raft library suffrage
// values. See:
// https://github.com/hashicorp/raft/blob/42d34464b2d203e389e11ed6d43db698792c0604/configuration.go#L12-L24.
enum Suffrage {
  Voter = 0;
  NonVoter = 1;
  Staging = 2;
}

message Log {
  uint64 commit_index = 1;
  uint64 applied_index = 2;
  uint64 last_index = 3;
  uint64 fsm_pending_length = 4;
}

message Snapshot {
  uint64 last_index = 1;
  uint64 last_term = 2;
}

message Protocol {
  uint64 version = 1;
  uint64 min_version = 2;
  uint64 max_version = 3;
  uint64 min_snapshot_version = 4;
  uint64 max_snapshot_version = 5;
}

message Peer {
  string id = 1;
  string address = 2;
  Suffrage suffrage = 3;
}

message InfoRequest {}

message InfoResponse {
  string id = 1;
  State state = 2;
  string leader_id = 3;
  // True if the state reported by this node matches the state the cluster
  // reports. For example, if this node claims to be a leader, but the rest of
  // the cluster disagrees, this value will be false.
  bool is_state_verified = 4;
  // Unix timestamp in milliseconds of when the leader last contacted this node.
  int64 last_leader_contact = 5;
  uint64 term = 6;
  Suffrage suffrage = 7;
  Log log = 8;
  Snapshot snapshot = 9;
  Protocol protocol = 10;
  repeated Peer peers = 11;
}
