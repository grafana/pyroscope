syntax = "proto3";

package types.v1;

import "gnostic/openapi/v3/annotations.proto";

message LabelPair {
  // Label name
  string name = 1 [(gnostic.openapi.v3.property).example = {yaml: "service_name"}];

  // Label value
  string value = 2 [(gnostic.openapi.v3.property).example = {yaml: "my_service"}];
}

message ProfileType {
  string ID = 1;
  string name = 2;
  string sample_type = 4;
  string sample_unit = 5;
  string period_type = 6;
  string period_unit = 7;
}

message Labels {
  // LabelPair is the key value pairs to identify the corresponding profile
  repeated LabelPair labels = 1;
}

message Series {
  repeated LabelPair labels = 1;
  repeated Point points = 2;
}

message Point {
  double value = 1;
  // Milliseconds unix timestamp
  int64 timestamp = 2;
  repeated ProfileAnnotation annotations = 3;
}

// Annotations provide additional metadata for a profile.
//
// The main differences between labels and annotations are:
//   - annotations cannot be used in query selectors
//   - annotation keys don't have to be unique
//
// Currently annotations are applied internally by distributors,
// any annotation passed via the push API will be dropped.
message ProfileAnnotation {
  // Annotation key [hidden]
  string key = 1;
  // Annotation value [hidden]
  string value = 2;
}

message LabelValuesRequest {
  // Name of the label
  string name = 1 [(gnostic.openapi.v3.property).example = {yaml: "service_name"}];
  // List of Label selectors
  repeated string matchers = 2;
  // Query from this point in time, given in Milliseconds since epoch.
  int64 start = 3 [(gnostic.openapi.v3.property).example = {yaml: "1676282400000"}];
  // Query to this point in time, given in Milliseconds since epoch.
  int64 end = 4 [(gnostic.openapi.v3.property).example = {yaml: "1676289600000"}];
}

message LabelValuesResponse {
  repeated string names = 1;
}

message LabelNamesRequest {
  // List of Label selectors
  repeated string matchers = 1;
  // Query from this point in time, given in Milliseconds since epoch.
  int64 start = 2 [(gnostic.openapi.v3.property).example = {yaml: "1676282400000"}];
  // Query to this point in time, given in Milliseconds since epoch.
  int64 end = 3 [(gnostic.openapi.v3.property).example = {yaml: "1676289600000"}];
}

message LabelNamesResponse {
  repeated string names = 1;
}

message BlockInfo {
  string ulid = 1;
  int64 min_time = 2;
  int64 max_time = 3;
  BlockCompaction compaction = 4;
  repeated LabelPair labels = 5;
}

message BlockCompaction {
  int32 level = 1;
  repeated string sources = 2;
  repeated string parents = 3;
}

enum TimeSeriesAggregationType {
  TIME_SERIES_AGGREGATION_TYPE_SUM = 0;
  TIME_SERIES_AGGREGATION_TYPE_AVERAGE = 1;
}

// StackTraceSelector is used for filtering stack traces by locations.
message StackTraceSelector {
  // Stack trace of the call site. Root at call_site[0].
  // Only stack traces having the prefix provided will be selected.
  // If empty, the filter is ignored.
  repeated Location call_site = 1;
  // Stack trace selector for profiles purposed for Go PGO.
  // If set, call_site is ignored.
  GoPGO go_pgo = 2;
}

message Location {
  string name = 1;
}

message GoPGO {
  // Specifies the number of leaf locations to keep.
  uint32 keep_locations = 1;
  // Aggregate callees causes the leaf location line number to be ignored,
  // thus aggregating all callee samples (but not callers).
  bool aggregate_callees = 2;
}

message GetProfileStatsRequest {}

message GetProfileStatsResponse {
  // Whether we received any data at any time in the past.
  bool data_ingested = 1;
  // Milliseconds since epoch.
  int64 oldest_profile_time = 2;
  // Milliseconds since epoch.
  int64 newest_profile_time = 3;
}
