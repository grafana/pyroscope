syntax = "proto3";

package query.v1;

import "google/v1/profile.proto";
import "metastore/v1/metastore.proto";
import "types/v1/types.proto";

// QueryFrontendService is supposed to handle both access to the time series
// profiling data through the QueryBackendService and metadata queries through
// the MetastoreService. Example metadata queries: listing datasets (services)
// and their available profile types, accessing tenant statistics, analyzing
// the queries, etc. However, metadata queries should not be mixed with the
// time series profiling queries, therefore the API is to be extended.
//
// QueryFrontendService is supposed to be a public interface, available to
// the external clients, while QueryBackendService and MetastoreService are
// supposed to be private, accessed through the QueryFrontendService.

service QueryFrontendService {
  rpc Query(QueryRequest) returns (QueryResponse) {}
}

message QueryRequest {
  int64 start_time = 1;
  int64 end_time = 2;
  string label_selector = 3;
  repeated Query query = 4;
}

message QueryResponse {
  repeated Report reports = 1;
}

service QueryBackendService {
  rpc Invoke(InvokeRequest) returns (InvokeResponse) {}
}

message InvokeOptions {
  // Query workers might not have access to the tenant
  // overrides, therefore all the necessary options should
  // be listed in the request explicitly.
}

message InvokeRequest {
  repeated string tenant = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  string label_selector = 4;
  repeated Query query = 5;
  QueryPlan query_plan = 6;
  InvokeOptions options = 7;
}

// Query plan is represented by a DAG, where each node
// might be either "merge" or "read" (leaves). Each node
// references a range: merge nodes refer to other nodes,
// while read nodes refer to the blocks.
message QueryPlan {
  // Each node is encoded with 3 values:
  //  - node type: 0 - read, 1 - merge;
  //  - range offset;
  //  - range length.
  repeated uint32 graph = 1;

  // The blocks matching the query.
  repeated metastore.v1.BlockMeta blocks = 2;
  // TODO: Use opaque byte array to avoid unnecessary
  // proto encoding/decoding overhead in transient nodes.
  // Graph nodes reference ranges, thus each range could
  // be a blob of bytes:
  // repeated bytes block_ranges = 2;
}

message Query {
  QueryType query_type = 1;
  // Exactly one of the following fields should be set,
  // depending on the query type.
  LabelNamesQuery label_names = 2;
  LabelValuesQuery label_values = 3;
  SeriesLabelsQuery series_labels = 4;
  TimeSeriesQuery time_series = 5;
  TreeQuery tree = 6;
  PprofQuery pprof = 7;
  // function_details
  // call_graph
  // top_table
  // ...
}

enum QueryType {
  QUERY_UNSPECIFIED = 0;
  QUERY_LABEL_NAMES = 1;
  QUERY_LABEL_VALUES = 2;
  QUERY_SERIES_LABELS = 3;
  QUERY_TIME_SERIES = 4;
  QUERY_TREE = 5;
  QUERY_PPROF = 6;
}

message InvokeResponse {
  repeated Report reports = 1;
  Diagnostics diagnostics = 2;
}

// Diagnostic messages, events, statistics, analytics, etc.
message Diagnostics {}

message Report {
  ReportType report_type = 1;
  // Exactly one of the following fields should be set,
  // depending on the report type.
  LabelNamesReport label_names = 2;
  LabelValuesReport label_values = 3;
  SeriesLabelsReport series_labels = 4;
  TimeSeriesReport time_series = 5;
  TreeReport tree = 6;
  PprofReport pprof = 7;
}

enum ReportType {
  REPORT_UNSPECIFIED = 0;
  REPORT_LABEL_NAMES = 1;
  REPORT_LABEL_VALUES = 2;
  REPORT_SERIES_LABELS = 3;
  REPORT_TIME_SERIES = 4;
  REPORT_TREE = 5;
  REPORT_PPROF = 6;
}

message LabelNamesQuery {}

message LabelNamesReport {
  LabelNamesQuery query = 1;
  repeated string label_names = 2;
}

message LabelValuesQuery {
  string label_name = 1;
}

message LabelValuesReport {
  LabelValuesQuery query = 1;
  repeated string label_values = 2;
}

message SeriesLabelsQuery {
  repeated string label_names = 1;
}

message SeriesLabelsReport {
  SeriesLabelsQuery query = 1;
  repeated types.v1.Labels series_labels = 2;
}

message TimeSeriesQuery {
  double step = 1;
  repeated string group_by = 2;
  int64 limit = 3;
}

message TimeSeriesReport {
  TimeSeriesQuery query = 1;
  repeated types.v1.Series time_series = 2;
}

message TreeQuery {
  int64 max_nodes = 1;
}

message TreeReport {
  TreeQuery query = 1;
  bytes tree = 2;
}

message PprofQuery {
  int64 max_nodes = 1;
  // TODO(kolesnikovae): Go PGO options.
}

message PprofReport {
  PprofQuery query = 1;
  bytes pprof = 2;
}
