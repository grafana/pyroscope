// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: capabilities/v1/feature_flags.proto

package capabilitiesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/capabilities/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FeatureFlagsServiceName is the fully-qualified name of the FeatureFlagsService service.
	FeatureFlagsServiceName = "capabilities.v1.FeatureFlagsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeatureFlagsServiceGetFeatureFlagsProcedure is the fully-qualified name of the
	// FeatureFlagsService's GetFeatureFlags RPC.
	FeatureFlagsServiceGetFeatureFlagsProcedure = "/capabilities.v1.FeatureFlagsService/GetFeatureFlags"
)

// FeatureFlagsServiceClient is a client for the capabilities.v1.FeatureFlagsService service.
type FeatureFlagsServiceClient interface {
	// Retrieve feature flags that are enabled for a particular tenant
	GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error)
}

// NewFeatureFlagsServiceClient constructs a client for the capabilities.v1.FeatureFlagsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeatureFlagsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FeatureFlagsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	featureFlagsServiceMethods := v1.File_capabilities_v1_feature_flags_proto.Services().ByName("FeatureFlagsService").Methods()
	return &featureFlagsServiceClient{
		getFeatureFlags: connect.NewClient[v1.GetFeatureFlagsRequest, v1.GetFeatureFlagsResponse](
			httpClient,
			baseURL+FeatureFlagsServiceGetFeatureFlagsProcedure,
			connect.WithSchema(featureFlagsServiceMethods.ByName("GetFeatureFlags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// featureFlagsServiceClient implements FeatureFlagsServiceClient.
type featureFlagsServiceClient struct {
	getFeatureFlags *connect.Client[v1.GetFeatureFlagsRequest, v1.GetFeatureFlagsResponse]
}

// GetFeatureFlags calls capabilities.v1.FeatureFlagsService.GetFeatureFlags.
func (c *featureFlagsServiceClient) GetFeatureFlags(ctx context.Context, req *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error) {
	return c.getFeatureFlags.CallUnary(ctx, req)
}

// FeatureFlagsServiceHandler is an implementation of the capabilities.v1.FeatureFlagsService
// service.
type FeatureFlagsServiceHandler interface {
	// Retrieve feature flags that are enabled for a particular tenant
	GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error)
}

// NewFeatureFlagsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeatureFlagsServiceHandler(svc FeatureFlagsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	featureFlagsServiceMethods := v1.File_capabilities_v1_feature_flags_proto.Services().ByName("FeatureFlagsService").Methods()
	featureFlagsServiceGetFeatureFlagsHandler := connect.NewUnaryHandler(
		FeatureFlagsServiceGetFeatureFlagsProcedure,
		svc.GetFeatureFlags,
		connect.WithSchema(featureFlagsServiceMethods.ByName("GetFeatureFlags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/capabilities.v1.FeatureFlagsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeatureFlagsServiceGetFeatureFlagsProcedure:
			featureFlagsServiceGetFeatureFlagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeatureFlagsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeatureFlagsServiceHandler struct{}

func (UnimplementedFeatureFlagsServiceHandler) GetFeatureFlags(context.Context, *connect.Request[v1.GetFeatureFlagsRequest]) (*connect.Response[v1.GetFeatureFlagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("capabilities.v1.FeatureFlagsService.GetFeatureFlags is not implemented"))
}
