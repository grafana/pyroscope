// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: query/v1/query.proto

package queryv1

import (
	_ "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	v11 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_QUERY_UNSPECIFIED   QueryType = 0
	QueryType_QUERY_LABEL_NAMES   QueryType = 1
	QueryType_QUERY_LABEL_VALUES  QueryType = 2
	QueryType_QUERY_SERIES_LABELS QueryType = 3
	QueryType_QUERY_TIME_SERIES   QueryType = 4
	QueryType_QUERY_TREE          QueryType = 5
	QueryType_QUERY_PPROF         QueryType = 6
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_UNSPECIFIED",
		1: "QUERY_LABEL_NAMES",
		2: "QUERY_LABEL_VALUES",
		3: "QUERY_SERIES_LABELS",
		4: "QUERY_TIME_SERIES",
		5: "QUERY_TREE",
		6: "QUERY_PPROF",
	}
	QueryType_value = map[string]int32{
		"QUERY_UNSPECIFIED":   0,
		"QUERY_LABEL_NAMES":   1,
		"QUERY_LABEL_VALUES":  2,
		"QUERY_SERIES_LABELS": 3,
		"QUERY_TIME_SERIES":   4,
		"QUERY_TREE":          5,
		"QUERY_PPROF":         6,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_query_v1_query_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_query_v1_query_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{0}
}

type ReportType int32

const (
	ReportType_REPORT_UNSPECIFIED   ReportType = 0
	ReportType_REPORT_LABEL_NAMES   ReportType = 1
	ReportType_REPORT_LABEL_VALUES  ReportType = 2
	ReportType_REPORT_SERIES_LABELS ReportType = 3
	ReportType_REPORT_TIME_SERIES   ReportType = 4
	ReportType_REPORT_TREE          ReportType = 5
	ReportType_REPORT_PPROF         ReportType = 6
)

// Enum value maps for ReportType.
var (
	ReportType_name = map[int32]string{
		0: "REPORT_UNSPECIFIED",
		1: "REPORT_LABEL_NAMES",
		2: "REPORT_LABEL_VALUES",
		3: "REPORT_SERIES_LABELS",
		4: "REPORT_TIME_SERIES",
		5: "REPORT_TREE",
		6: "REPORT_PPROF",
	}
	ReportType_value = map[string]int32{
		"REPORT_UNSPECIFIED":   0,
		"REPORT_LABEL_NAMES":   1,
		"REPORT_LABEL_VALUES":  2,
		"REPORT_SERIES_LABELS": 3,
		"REPORT_TIME_SERIES":   4,
		"REPORT_TREE":          5,
		"REPORT_PPROF":         6,
	}
)

func (x ReportType) Enum() *ReportType {
	p := new(ReportType)
	*p = x
	return p
}

func (x ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_query_v1_query_proto_enumTypes[1].Descriptor()
}

func (ReportType) Type() protoreflect.EnumType {
	return &file_query_v1_query_proto_enumTypes[1]
}

func (x ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportType.Descriptor instead.
func (ReportType) EnumDescriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{1}
}

type QueryNode_Type int32

const (
	QueryNode_UNKNOWN QueryNode_Type = 0
	QueryNode_MERGE   QueryNode_Type = 1
	QueryNode_READ    QueryNode_Type = 2
)

// Enum value maps for QueryNode_Type.
var (
	QueryNode_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "MERGE",
		2: "READ",
	}
	QueryNode_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"MERGE":   1,
		"READ":    2,
	}
)

func (x QueryNode_Type) Enum() *QueryNode_Type {
	p := new(QueryNode_Type)
	*p = x
	return p
}

func (x QueryNode_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryNode_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_query_v1_query_proto_enumTypes[2].Descriptor()
}

func (QueryNode_Type) Type() protoreflect.EnumType {
	return &file_query_v1_query_proto_enumTypes[2]
}

func (x QueryNode_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryNode_Type.Descriptor instead.
func (QueryNode_Type) EnumDescriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{5, 0}
}

type QueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LabelSelector string                 `protobuf:"bytes,3,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Query         []*Query               `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_query_v1_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QueryRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *QueryRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *QueryRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reports       []*Report              `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	mi := &file_query_v1_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type InvokeOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query workers might not have access to the tenant
	// overrides, therefore all the necessary options should
	// be listed in the request explicitly.
	SanitizeOnMerge bool `protobuf:"varint,1,opt,name=sanitize_on_merge,json=sanitizeOnMerge,proto3" json:"sanitize_on_merge,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InvokeOptions) Reset() {
	*x = InvokeOptions{}
	mi := &file_query_v1_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeOptions) ProtoMessage() {}

func (x *InvokeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeOptions.ProtoReflect.Descriptor instead.
func (*InvokeOptions) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *InvokeOptions) GetSanitizeOnMerge() bool {
	if x != nil {
		return x.SanitizeOnMerge
	}
	return false
}

type InvokeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenant        []string               `protobuf:"bytes,1,rep,name=tenant,proto3" json:"tenant,omitempty"`
	StartTime     int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LabelSelector string                 `protobuf:"bytes,4,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Query         []*Query               `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
	QueryPlan     *QueryPlan             `protobuf:"bytes,6,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	Options       *InvokeOptions         `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	mi := &file_query_v1_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *InvokeRequest) GetTenant() []string {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *InvokeRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InvokeRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InvokeRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *InvokeRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *InvokeRequest) GetQueryPlan() *QueryPlan {
	if x != nil {
		return x.QueryPlan
	}
	return nil
}

func (x *InvokeRequest) GetOptions() *InvokeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// A query plan is represented by a directed acyclic graph (DAG),
// where each node is either a "merge" node or a "read" node.
//
// Merge nodes reference other nodes in the plan as their "children".
// Read nodes reference the blocks which contain the actual data to be processed.
type QueryPlan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Root          *QueryNode             `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryPlan) Reset() {
	*x = QueryPlan{}
	mi := &file_query_v1_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlan) ProtoMessage() {}

func (x *QueryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlan.ProtoReflect.Descriptor instead.
func (*QueryPlan) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPlan) GetRoot() *QueryNode {
	if x != nil {
		return x.Root
	}
	return nil
}

type QueryNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          QueryNode_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=query.v1.QueryNode_Type" json:"type,omitempty"`
	Children      []*QueryNode           `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	Blocks        []*v1.BlockMeta        `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNode) Reset() {
	*x = QueryNode{}
	mi := &file_query_v1_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNode) ProtoMessage() {}

func (x *QueryNode) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNode.ProtoReflect.Descriptor instead.
func (*QueryNode) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryNode) GetType() QueryNode_Type {
	if x != nil {
		return x.Type
	}
	return QueryNode_UNKNOWN
}

func (x *QueryNode) GetChildren() []*QueryNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *QueryNode) GetBlocks() []*v1.BlockMeta {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Query struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	QueryType QueryType              `protobuf:"varint,1,opt,name=query_type,json=queryType,proto3,enum=query.v1.QueryType" json:"query_type,omitempty"`
	// Exactly one of the following fields should be set,
	// depending on the query type.
	LabelNames    *LabelNamesQuery   `protobuf:"bytes,2,opt,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	LabelValues   *LabelValuesQuery  `protobuf:"bytes,3,opt,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	SeriesLabels  *SeriesLabelsQuery `protobuf:"bytes,4,opt,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
	TimeSeries    *TimeSeriesQuery   `protobuf:"bytes,5,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Tree          *TreeQuery         `protobuf:"bytes,6,opt,name=tree,proto3" json:"tree,omitempty"`
	Pprof         *PprofQuery        `protobuf:"bytes,7,opt,name=pprof,proto3" json:"pprof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_query_v1_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{6}
}

func (x *Query) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_QUERY_UNSPECIFIED
}

func (x *Query) GetLabelNames() *LabelNamesQuery {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *Query) GetLabelValues() *LabelValuesQuery {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Query) GetSeriesLabels() *SeriesLabelsQuery {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

func (x *Query) GetTimeSeries() *TimeSeriesQuery {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Query) GetTree() *TreeQuery {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *Query) GetPprof() *PprofQuery {
	if x != nil {
		return x.Pprof
	}
	return nil
}

type InvokeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reports       []*Report              `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Diagnostics   *Diagnostics           `protobuf:"bytes,2,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeResponse) Reset() {
	*x = InvokeResponse{}
	mi := &file_query_v1_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeResponse) ProtoMessage() {}

func (x *InvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeResponse.ProtoReflect.Descriptor instead.
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{7}
}

func (x *InvokeResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *InvokeResponse) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Diagnostic messages, events, statistics, analytics, etc.
type Diagnostics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueryPlan     *QueryPlan             `protobuf:"bytes,1,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	mi := &file_query_v1_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{8}
}

func (x *Diagnostics) GetQueryPlan() *QueryPlan {
	if x != nil {
		return x.QueryPlan
	}
	return nil
}

type Report struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ReportType ReportType             `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3,enum=query.v1.ReportType" json:"report_type,omitempty"`
	// Exactly one of the following fields should be set,
	// depending on the report type.
	LabelNames    *LabelNamesReport   `protobuf:"bytes,2,opt,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	LabelValues   *LabelValuesReport  `protobuf:"bytes,3,opt,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	SeriesLabels  *SeriesLabelsReport `protobuf:"bytes,4,opt,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
	TimeSeries    *TimeSeriesReport   `protobuf:"bytes,5,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Tree          *TreeReport         `protobuf:"bytes,6,opt,name=tree,proto3" json:"tree,omitempty"`
	Pprof         *PprofReport        `protobuf:"bytes,7,opt,name=pprof,proto3" json:"pprof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Report) Reset() {
	*x = Report{}
	mi := &file_query_v1_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{9}
}

func (x *Report) GetReportType() ReportType {
	if x != nil {
		return x.ReportType
	}
	return ReportType_REPORT_UNSPECIFIED
}

func (x *Report) GetLabelNames() *LabelNamesReport {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *Report) GetLabelValues() *LabelValuesReport {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Report) GetSeriesLabels() *SeriesLabelsReport {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

func (x *Report) GetTimeSeries() *TimeSeriesReport {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Report) GetTree() *TreeReport {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *Report) GetPprof() *PprofReport {
	if x != nil {
		return x.Pprof
	}
	return nil
}

type LabelNamesQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelNamesQuery) Reset() {
	*x = LabelNamesQuery{}
	mi := &file_query_v1_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelNamesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesQuery) ProtoMessage() {}

func (x *LabelNamesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesQuery.ProtoReflect.Descriptor instead.
func (*LabelNamesQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{10}
}

type LabelNamesReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *LabelNamesQuery       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelNames    []string               `protobuf:"bytes,2,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelNamesReport) Reset() {
	*x = LabelNamesReport{}
	mi := &file_query_v1_query_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelNamesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesReport) ProtoMessage() {}

func (x *LabelNamesReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesReport.ProtoReflect.Descriptor instead.
func (*LabelNamesReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{11}
}

func (x *LabelNamesReport) GetQuery() *LabelNamesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelNamesReport) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type LabelValuesQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LabelName     string                 `protobuf:"bytes,1,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelValuesQuery) Reset() {
	*x = LabelValuesQuery{}
	mi := &file_query_v1_query_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelValuesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesQuery) ProtoMessage() {}

func (x *LabelValuesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesQuery.ProtoReflect.Descriptor instead.
func (*LabelValuesQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{12}
}

func (x *LabelValuesQuery) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type LabelValuesReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *LabelValuesQuery      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelValues   []string               `protobuf:"bytes,2,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelValuesReport) Reset() {
	*x = LabelValuesReport{}
	mi := &file_query_v1_query_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelValuesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesReport) ProtoMessage() {}

func (x *LabelValuesReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesReport.ProtoReflect.Descriptor instead.
func (*LabelValuesReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{13}
}

func (x *LabelValuesReport) GetQuery() *LabelValuesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelValuesReport) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

type SeriesLabelsQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LabelNames    []string               `protobuf:"bytes,1,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesLabelsQuery) Reset() {
	*x = SeriesLabelsQuery{}
	mi := &file_query_v1_query_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesLabelsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsQuery) ProtoMessage() {}

func (x *SeriesLabelsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsQuery.ProtoReflect.Descriptor instead.
func (*SeriesLabelsQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{14}
}

func (x *SeriesLabelsQuery) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type SeriesLabelsReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *SeriesLabelsQuery     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SeriesLabels  []*v11.Labels          `protobuf:"bytes,2,rep,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesLabelsReport) Reset() {
	*x = SeriesLabelsReport{}
	mi := &file_query_v1_query_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesLabelsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsReport) ProtoMessage() {}

func (x *SeriesLabelsReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsReport.ProtoReflect.Descriptor instead.
func (*SeriesLabelsReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{15}
}

func (x *SeriesLabelsReport) GetQuery() *SeriesLabelsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SeriesLabelsReport) GetSeriesLabels() []*v11.Labels {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

type TimeSeriesQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Step          float64                `protobuf:"fixed64,1,opt,name=step,proto3" json:"step,omitempty"`
	GroupBy       []string               `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSeriesQuery) Reset() {
	*x = TimeSeriesQuery{}
	mi := &file_query_v1_query_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeriesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesQuery) ProtoMessage() {}

func (x *TimeSeriesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesQuery.ProtoReflect.Descriptor instead.
func (*TimeSeriesQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{16}
}

func (x *TimeSeriesQuery) GetStep() float64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TimeSeriesQuery) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *TimeSeriesQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TimeSeriesReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *TimeSeriesQuery       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	TimeSeries    []*v11.Series          `protobuf:"bytes,2,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSeriesReport) Reset() {
	*x = TimeSeriesReport{}
	mi := &file_query_v1_query_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeriesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesReport) ProtoMessage() {}

func (x *TimeSeriesReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesReport.ProtoReflect.Descriptor instead.
func (*TimeSeriesReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{17}
}

func (x *TimeSeriesReport) GetQuery() *TimeSeriesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TimeSeriesReport) GetTimeSeries() []*v11.Series {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

type TreeQuery struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	MaxNodes           int64                   `protobuf:"varint,1,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	SpanSelector       []string                `protobuf:"bytes,2,rep,name=span_selector,json=spanSelector,proto3" json:"span_selector,omitempty"`
	StackTraceSelector *v11.StackTraceSelector `protobuf:"bytes,3,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TreeQuery) Reset() {
	*x = TreeQuery{}
	mi := &file_query_v1_query_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeQuery) ProtoMessage() {}

func (x *TreeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeQuery.ProtoReflect.Descriptor instead.
func (*TreeQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{18}
}

func (x *TreeQuery) GetMaxNodes() int64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *TreeQuery) GetSpanSelector() []string {
	if x != nil {
		return x.SpanSelector
	}
	return nil
}

func (x *TreeQuery) GetStackTraceSelector() *v11.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

type TreeReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *TreeQuery             `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Tree          []byte                 `protobuf:"bytes,2,opt,name=tree,proto3" json:"tree,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeReport) Reset() {
	*x = TreeReport{}
	mi := &file_query_v1_query_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeReport) ProtoMessage() {}

func (x *TreeReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeReport.ProtoReflect.Descriptor instead.
func (*TreeReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{19}
}

func (x *TreeReport) GetQuery() *TreeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TreeReport) GetTree() []byte {
	if x != nil {
		return x.Tree
	}
	return nil
}

type PprofQuery struct {
	state              protoimpl.MessageState  `protogen:"open.v1"`
	MaxNodes           int64                   `protobuf:"varint,1,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	StackTraceSelector *v11.StackTraceSelector `protobuf:"bytes,2,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"` // TODO(kolesnikovae): Go PGO options.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PprofQuery) Reset() {
	*x = PprofQuery{}
	mi := &file_query_v1_query_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PprofQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PprofQuery) ProtoMessage() {}

func (x *PprofQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PprofQuery.ProtoReflect.Descriptor instead.
func (*PprofQuery) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{20}
}

func (x *PprofQuery) GetMaxNodes() int64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *PprofQuery) GetStackTraceSelector() *v11.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

type PprofReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *PprofQuery            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pprof         []byte                 `protobuf:"bytes,2,opt,name=pprof,proto3" json:"pprof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PprofReport) Reset() {
	*x = PprofReport{}
	mi := &file_query_v1_query_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PprofReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PprofReport) ProtoMessage() {}

func (x *PprofReport) ProtoReflect() protoreflect.Message {
	mi := &file_query_v1_query_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PprofReport.ProtoReflect.Descriptor instead.
func (*PprofReport) Descriptor() ([]byte, []int) {
	return file_query_v1_query_proto_rawDescGZIP(), []int{21}
}

func (x *PprofReport) GetQuery() *PprofQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PprofReport) GetPprof() []byte {
	if x != nil {
		return x.Pprof
	}
	return nil
}

var File_query_v1_query_proto protoreflect.FileDescriptor

const file_query_v1_query_proto_rawDesc = "" +
	"\n" +
	"\x14query/v1/query.proto\x12\bquery.v1\x1a\x17google/v1/profile.proto\x1a\x18metastore/v1/types.proto\x1a\x14types/v1/types.proto\"\x96\x01\n" +
	"\fQueryRequest\x12\x1d\n" +
	"\n" +
	"start_time\x18\x01 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x02 \x01(\x03R\aendTime\x12%\n" +
	"\x0elabel_selector\x18\x03 \x01(\tR\rlabelSelector\x12%\n" +
	"\x05query\x18\x04 \x03(\v2\x0f.query.v1.QueryR\x05query\";\n" +
	"\rQueryResponse\x12*\n" +
	"\areports\x18\x01 \x03(\v2\x10.query.v1.ReportR\areports\";\n" +
	"\rInvokeOptions\x12*\n" +
	"\x11sanitize_on_merge\x18\x01 \x01(\bR\x0fsanitizeOnMerge\"\x96\x02\n" +
	"\rInvokeRequest\x12\x16\n" +
	"\x06tenant\x18\x01 \x03(\tR\x06tenant\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x03 \x01(\x03R\aendTime\x12%\n" +
	"\x0elabel_selector\x18\x04 \x01(\tR\rlabelSelector\x12%\n" +
	"\x05query\x18\x05 \x03(\v2\x0f.query.v1.QueryR\x05query\x122\n" +
	"\n" +
	"query_plan\x18\x06 \x01(\v2\x13.query.v1.QueryPlanR\tqueryPlan\x121\n" +
	"\aoptions\x18\a \x01(\v2\x17.query.v1.InvokeOptionsR\aoptions\"4\n" +
	"\tQueryPlan\x12'\n" +
	"\x04root\x18\x01 \x01(\v2\x13.query.v1.QueryNodeR\x04root\"\xc5\x01\n" +
	"\tQueryNode\x12,\n" +
	"\x04type\x18\x01 \x01(\x0e2\x18.query.v1.QueryNode.TypeR\x04type\x12/\n" +
	"\bchildren\x18\x02 \x03(\v2\x13.query.v1.QueryNodeR\bchildren\x12/\n" +
	"\x06blocks\x18\x03 \x03(\v2\x17.metastore.v1.BlockMetaR\x06blocks\"(\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05MERGE\x10\x01\x12\b\n" +
	"\x04READ\x10\x02\"\x89\x03\n" +
	"\x05Query\x122\n" +
	"\n" +
	"query_type\x18\x01 \x01(\x0e2\x13.query.v1.QueryTypeR\tqueryType\x12:\n" +
	"\vlabel_names\x18\x02 \x01(\v2\x19.query.v1.LabelNamesQueryR\n" +
	"labelNames\x12=\n" +
	"\flabel_values\x18\x03 \x01(\v2\x1a.query.v1.LabelValuesQueryR\vlabelValues\x12@\n" +
	"\rseries_labels\x18\x04 \x01(\v2\x1b.query.v1.SeriesLabelsQueryR\fseriesLabels\x12:\n" +
	"\vtime_series\x18\x05 \x01(\v2\x19.query.v1.TimeSeriesQueryR\n" +
	"timeSeries\x12'\n" +
	"\x04tree\x18\x06 \x01(\v2\x13.query.v1.TreeQueryR\x04tree\x12*\n" +
	"\x05pprof\x18\a \x01(\v2\x14.query.v1.PprofQueryR\x05pprof\"u\n" +
	"\x0eInvokeResponse\x12*\n" +
	"\areports\x18\x01 \x03(\v2\x10.query.v1.ReportR\areports\x127\n" +
	"\vdiagnostics\x18\x02 \x01(\v2\x15.query.v1.DiagnosticsR\vdiagnostics\"A\n" +
	"\vDiagnostics\x122\n" +
	"\n" +
	"query_plan\x18\x01 \x01(\v2\x13.query.v1.QueryPlanR\tqueryPlan\"\x93\x03\n" +
	"\x06Report\x125\n" +
	"\vreport_type\x18\x01 \x01(\x0e2\x14.query.v1.ReportTypeR\n" +
	"reportType\x12;\n" +
	"\vlabel_names\x18\x02 \x01(\v2\x1a.query.v1.LabelNamesReportR\n" +
	"labelNames\x12>\n" +
	"\flabel_values\x18\x03 \x01(\v2\x1b.query.v1.LabelValuesReportR\vlabelValues\x12A\n" +
	"\rseries_labels\x18\x04 \x01(\v2\x1c.query.v1.SeriesLabelsReportR\fseriesLabels\x12;\n" +
	"\vtime_series\x18\x05 \x01(\v2\x1a.query.v1.TimeSeriesReportR\n" +
	"timeSeries\x12(\n" +
	"\x04tree\x18\x06 \x01(\v2\x14.query.v1.TreeReportR\x04tree\x12+\n" +
	"\x05pprof\x18\a \x01(\v2\x15.query.v1.PprofReportR\x05pprof\"\x11\n" +
	"\x0fLabelNamesQuery\"d\n" +
	"\x10LabelNamesReport\x12/\n" +
	"\x05query\x18\x01 \x01(\v2\x19.query.v1.LabelNamesQueryR\x05query\x12\x1f\n" +
	"\vlabel_names\x18\x02 \x03(\tR\n" +
	"labelNames\"1\n" +
	"\x10LabelValuesQuery\x12\x1d\n" +
	"\n" +
	"label_name\x18\x01 \x01(\tR\tlabelName\"h\n" +
	"\x11LabelValuesReport\x120\n" +
	"\x05query\x18\x01 \x01(\v2\x1a.query.v1.LabelValuesQueryR\x05query\x12!\n" +
	"\flabel_values\x18\x02 \x03(\tR\vlabelValues\"4\n" +
	"\x11SeriesLabelsQuery\x12\x1f\n" +
	"\vlabel_names\x18\x01 \x03(\tR\n" +
	"labelNames\"~\n" +
	"\x12SeriesLabelsReport\x121\n" +
	"\x05query\x18\x01 \x01(\v2\x1b.query.v1.SeriesLabelsQueryR\x05query\x125\n" +
	"\rseries_labels\x18\x02 \x03(\v2\x10.types.v1.LabelsR\fseriesLabels\"V\n" +
	"\x0fTimeSeriesQuery\x12\x12\n" +
	"\x04step\x18\x01 \x01(\x01R\x04step\x12\x19\n" +
	"\bgroup_by\x18\x02 \x03(\tR\agroupBy\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x03R\x05limit\"v\n" +
	"\x10TimeSeriesReport\x12/\n" +
	"\x05query\x18\x01 \x01(\v2\x19.query.v1.TimeSeriesQueryR\x05query\x121\n" +
	"\vtime_series\x18\x02 \x03(\v2\x10.types.v1.SeriesR\n" +
	"timeSeries\"\xbb\x01\n" +
	"\tTreeQuery\x12\x1b\n" +
	"\tmax_nodes\x18\x01 \x01(\x03R\bmaxNodes\x12#\n" +
	"\rspan_selector\x18\x02 \x03(\tR\fspanSelector\x12S\n" +
	"\x14stack_trace_selector\x18\x03 \x01(\v2\x1c.types.v1.StackTraceSelectorH\x00R\x12stackTraceSelector\x88\x01\x01B\x17\n" +
	"\x15_stack_trace_selector\"K\n" +
	"\n" +
	"TreeReport\x12)\n" +
	"\x05query\x18\x01 \x01(\v2\x13.query.v1.TreeQueryR\x05query\x12\x12\n" +
	"\x04tree\x18\x02 \x01(\fR\x04tree\"\x97\x01\n" +
	"\n" +
	"PprofQuery\x12\x1b\n" +
	"\tmax_nodes\x18\x01 \x01(\x03R\bmaxNodes\x12S\n" +
	"\x14stack_trace_selector\x18\x02 \x01(\v2\x1c.types.v1.StackTraceSelectorH\x00R\x12stackTraceSelector\x88\x01\x01B\x17\n" +
	"\x15_stack_trace_selector\"O\n" +
	"\vPprofReport\x12*\n" +
	"\x05query\x18\x01 \x01(\v2\x14.query.v1.PprofQueryR\x05query\x12\x14\n" +
	"\x05pprof\x18\x02 \x01(\fR\x05pprof*\xa2\x01\n" +
	"\tQueryType\x12\x15\n" +
	"\x11QUERY_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11QUERY_LABEL_NAMES\x10\x01\x12\x16\n" +
	"\x12QUERY_LABEL_VALUES\x10\x02\x12\x17\n" +
	"\x13QUERY_SERIES_LABELS\x10\x03\x12\x15\n" +
	"\x11QUERY_TIME_SERIES\x10\x04\x12\x0e\n" +
	"\n" +
	"QUERY_TREE\x10\x05\x12\x0f\n" +
	"\vQUERY_PPROF\x10\x06*\xaa\x01\n" +
	"\n" +
	"ReportType\x12\x16\n" +
	"\x12REPORT_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12REPORT_LABEL_NAMES\x10\x01\x12\x17\n" +
	"\x13REPORT_LABEL_VALUES\x10\x02\x12\x18\n" +
	"\x14REPORT_SERIES_LABELS\x10\x03\x12\x16\n" +
	"\x12REPORT_TIME_SERIES\x10\x04\x12\x0f\n" +
	"\vREPORT_TREE\x10\x05\x12\x10\n" +
	"\fREPORT_PPROF\x10\x062R\n" +
	"\x14QueryFrontendService\x12:\n" +
	"\x05Query\x12\x16.query.v1.QueryRequest\x1a\x17.query.v1.QueryResponse\"\x002T\n" +
	"\x13QueryBackendService\x12=\n" +
	"\x06Invoke\x12\x17.query.v1.InvokeRequest\x1a\x18.query.v1.InvokeResponse\"\x00B\x9b\x01\n" +
	"\fcom.query.v1B\n" +
	"QueryProtoP\x01Z>github.com/grafana/pyroscope/api/gen/proto/go/query/v1;queryv1\xa2\x02\x03QXX\xaa\x02\bQuery.V1\xca\x02\bQuery\\V1\xe2\x02\x14Query\\V1\\GPBMetadata\xea\x02\tQuery::V1b\x06proto3"

var (
	file_query_v1_query_proto_rawDescOnce sync.Once
	file_query_v1_query_proto_rawDescData []byte
)

func file_query_v1_query_proto_rawDescGZIP() []byte {
	file_query_v1_query_proto_rawDescOnce.Do(func() {
		file_query_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_query_v1_query_proto_rawDesc), len(file_query_v1_query_proto_rawDesc)))
	})
	return file_query_v1_query_proto_rawDescData
}

var file_query_v1_query_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_query_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_query_v1_query_proto_goTypes = []any{
	(QueryType)(0),                 // 0: query.v1.QueryType
	(ReportType)(0),                // 1: query.v1.ReportType
	(QueryNode_Type)(0),            // 2: query.v1.QueryNode.Type
	(*QueryRequest)(nil),           // 3: query.v1.QueryRequest
	(*QueryResponse)(nil),          // 4: query.v1.QueryResponse
	(*InvokeOptions)(nil),          // 5: query.v1.InvokeOptions
	(*InvokeRequest)(nil),          // 6: query.v1.InvokeRequest
	(*QueryPlan)(nil),              // 7: query.v1.QueryPlan
	(*QueryNode)(nil),              // 8: query.v1.QueryNode
	(*Query)(nil),                  // 9: query.v1.Query
	(*InvokeResponse)(nil),         // 10: query.v1.InvokeResponse
	(*Diagnostics)(nil),            // 11: query.v1.Diagnostics
	(*Report)(nil),                 // 12: query.v1.Report
	(*LabelNamesQuery)(nil),        // 13: query.v1.LabelNamesQuery
	(*LabelNamesReport)(nil),       // 14: query.v1.LabelNamesReport
	(*LabelValuesQuery)(nil),       // 15: query.v1.LabelValuesQuery
	(*LabelValuesReport)(nil),      // 16: query.v1.LabelValuesReport
	(*SeriesLabelsQuery)(nil),      // 17: query.v1.SeriesLabelsQuery
	(*SeriesLabelsReport)(nil),     // 18: query.v1.SeriesLabelsReport
	(*TimeSeriesQuery)(nil),        // 19: query.v1.TimeSeriesQuery
	(*TimeSeriesReport)(nil),       // 20: query.v1.TimeSeriesReport
	(*TreeQuery)(nil),              // 21: query.v1.TreeQuery
	(*TreeReport)(nil),             // 22: query.v1.TreeReport
	(*PprofQuery)(nil),             // 23: query.v1.PprofQuery
	(*PprofReport)(nil),            // 24: query.v1.PprofReport
	(*v1.BlockMeta)(nil),           // 25: metastore.v1.BlockMeta
	(*v11.Labels)(nil),             // 26: types.v1.Labels
	(*v11.Series)(nil),             // 27: types.v1.Series
	(*v11.StackTraceSelector)(nil), // 28: types.v1.StackTraceSelector
}
var file_query_v1_query_proto_depIdxs = []int32{
	9,  // 0: query.v1.QueryRequest.query:type_name -> query.v1.Query
	12, // 1: query.v1.QueryResponse.reports:type_name -> query.v1.Report
	9,  // 2: query.v1.InvokeRequest.query:type_name -> query.v1.Query
	7,  // 3: query.v1.InvokeRequest.query_plan:type_name -> query.v1.QueryPlan
	5,  // 4: query.v1.InvokeRequest.options:type_name -> query.v1.InvokeOptions
	8,  // 5: query.v1.QueryPlan.root:type_name -> query.v1.QueryNode
	2,  // 6: query.v1.QueryNode.type:type_name -> query.v1.QueryNode.Type
	8,  // 7: query.v1.QueryNode.children:type_name -> query.v1.QueryNode
	25, // 8: query.v1.QueryNode.blocks:type_name -> metastore.v1.BlockMeta
	0,  // 9: query.v1.Query.query_type:type_name -> query.v1.QueryType
	13, // 10: query.v1.Query.label_names:type_name -> query.v1.LabelNamesQuery
	15, // 11: query.v1.Query.label_values:type_name -> query.v1.LabelValuesQuery
	17, // 12: query.v1.Query.series_labels:type_name -> query.v1.SeriesLabelsQuery
	19, // 13: query.v1.Query.time_series:type_name -> query.v1.TimeSeriesQuery
	21, // 14: query.v1.Query.tree:type_name -> query.v1.TreeQuery
	23, // 15: query.v1.Query.pprof:type_name -> query.v1.PprofQuery
	12, // 16: query.v1.InvokeResponse.reports:type_name -> query.v1.Report
	11, // 17: query.v1.InvokeResponse.diagnostics:type_name -> query.v1.Diagnostics
	7,  // 18: query.v1.Diagnostics.query_plan:type_name -> query.v1.QueryPlan
	1,  // 19: query.v1.Report.report_type:type_name -> query.v1.ReportType
	14, // 20: query.v1.Report.label_names:type_name -> query.v1.LabelNamesReport
	16, // 21: query.v1.Report.label_values:type_name -> query.v1.LabelValuesReport
	18, // 22: query.v1.Report.series_labels:type_name -> query.v1.SeriesLabelsReport
	20, // 23: query.v1.Report.time_series:type_name -> query.v1.TimeSeriesReport
	22, // 24: query.v1.Report.tree:type_name -> query.v1.TreeReport
	24, // 25: query.v1.Report.pprof:type_name -> query.v1.PprofReport
	13, // 26: query.v1.LabelNamesReport.query:type_name -> query.v1.LabelNamesQuery
	15, // 27: query.v1.LabelValuesReport.query:type_name -> query.v1.LabelValuesQuery
	17, // 28: query.v1.SeriesLabelsReport.query:type_name -> query.v1.SeriesLabelsQuery
	26, // 29: query.v1.SeriesLabelsReport.series_labels:type_name -> types.v1.Labels
	19, // 30: query.v1.TimeSeriesReport.query:type_name -> query.v1.TimeSeriesQuery
	27, // 31: query.v1.TimeSeriesReport.time_series:type_name -> types.v1.Series
	28, // 32: query.v1.TreeQuery.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	21, // 33: query.v1.TreeReport.query:type_name -> query.v1.TreeQuery
	28, // 34: query.v1.PprofQuery.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	23, // 35: query.v1.PprofReport.query:type_name -> query.v1.PprofQuery
	3,  // 36: query.v1.QueryFrontendService.Query:input_type -> query.v1.QueryRequest
	6,  // 37: query.v1.QueryBackendService.Invoke:input_type -> query.v1.InvokeRequest
	4,  // 38: query.v1.QueryFrontendService.Query:output_type -> query.v1.QueryResponse
	10, // 39: query.v1.QueryBackendService.Invoke:output_type -> query.v1.InvokeResponse
	38, // [38:40] is the sub-list for method output_type
	36, // [36:38] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_query_v1_query_proto_init() }
func file_query_v1_query_proto_init() {
	if File_query_v1_query_proto != nil {
		return
	}
	file_query_v1_query_proto_msgTypes[18].OneofWrappers = []any{}
	file_query_v1_query_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_query_v1_query_proto_rawDesc), len(file_query_v1_query_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_query_v1_query_proto_goTypes,
		DependencyIndexes: file_query_v1_query_proto_depIdxs,
		EnumInfos:         file_query_v1_query_proto_enumTypes,
		MessageInfos:      file_query_v1_query_proto_msgTypes,
	}.Build()
	File_query_v1_query_proto = out.File
	file_query_v1_query_proto_goTypes = nil
	file_query_v1_query_proto_depIdxs = nil
}
