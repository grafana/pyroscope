// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: query/v1/query.proto

package queryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/query/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueryFrontendServiceName is the fully-qualified name of the QueryFrontendService service.
	QueryFrontendServiceName = "query.v1.QueryFrontendService"
	// QueryBackendServiceName is the fully-qualified name of the QueryBackendService service.
	QueryBackendServiceName = "query.v1.QueryBackendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueryFrontendServiceQueryProcedure is the fully-qualified name of the QueryFrontendService's
	// Query RPC.
	QueryFrontendServiceQueryProcedure = "/query.v1.QueryFrontendService/Query"
	// QueryBackendServiceInvokeProcedure is the fully-qualified name of the QueryBackendService's
	// Invoke RPC.
	QueryBackendServiceInvokeProcedure = "/query.v1.QueryBackendService/Invoke"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	queryFrontendServiceServiceDescriptor     = v1.File_query_v1_query_proto.Services().ByName("QueryFrontendService")
	queryFrontendServiceQueryMethodDescriptor = queryFrontendServiceServiceDescriptor.Methods().ByName("Query")
	queryBackendServiceServiceDescriptor      = v1.File_query_v1_query_proto.Services().ByName("QueryBackendService")
	queryBackendServiceInvokeMethodDescriptor = queryBackendServiceServiceDescriptor.Methods().ByName("Invoke")
)

// QueryFrontendServiceClient is a client for the query.v1.QueryFrontendService service.
type QueryFrontendServiceClient interface {
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewQueryFrontendServiceClient constructs a client for the query.v1.QueryFrontendService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryFrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryFrontendServiceClient{
		query: connect.NewClient[v1.QueryRequest, v1.QueryResponse](
			httpClient,
			baseURL+QueryFrontendServiceQueryProcedure,
			connect.WithSchema(queryFrontendServiceQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryFrontendServiceClient implements QueryFrontendServiceClient.
type queryFrontendServiceClient struct {
	query *connect.Client[v1.QueryRequest, v1.QueryResponse]
}

// Query calls query.v1.QueryFrontendService.Query.
func (c *queryFrontendServiceClient) Query(ctx context.Context, req *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// QueryFrontendServiceHandler is an implementation of the query.v1.QueryFrontendService service.
type QueryFrontendServiceHandler interface {
	Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error)
}

// NewQueryFrontendServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryFrontendServiceHandler(svc QueryFrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryFrontendServiceQueryHandler := connect.NewUnaryHandler(
		QueryFrontendServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(queryFrontendServiceQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/query.v1.QueryFrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryFrontendServiceQueryProcedure:
			queryFrontendServiceQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryFrontendServiceHandler struct{}

func (UnimplementedQueryFrontendServiceHandler) Query(context.Context, *connect.Request[v1.QueryRequest]) (*connect.Response[v1.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.QueryFrontendService.Query is not implemented"))
}

// QueryBackendServiceClient is a client for the query.v1.QueryBackendService service.
type QueryBackendServiceClient interface {
	Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
}

// NewQueryBackendServiceClient constructs a client for the query.v1.QueryBackendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueryBackendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueryBackendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queryBackendServiceClient{
		invoke: connect.NewClient[v1.InvokeRequest, v1.InvokeResponse](
			httpClient,
			baseURL+QueryBackendServiceInvokeProcedure,
			connect.WithSchema(queryBackendServiceInvokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// queryBackendServiceClient implements QueryBackendServiceClient.
type queryBackendServiceClient struct {
	invoke *connect.Client[v1.InvokeRequest, v1.InvokeResponse]
}

// Invoke calls query.v1.QueryBackendService.Invoke.
func (c *queryBackendServiceClient) Invoke(ctx context.Context, req *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return c.invoke.CallUnary(ctx, req)
}

// QueryBackendServiceHandler is an implementation of the query.v1.QueryBackendService service.
type QueryBackendServiceHandler interface {
	Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error)
}

// NewQueryBackendServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueryBackendServiceHandler(svc QueryBackendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queryBackendServiceInvokeHandler := connect.NewUnaryHandler(
		QueryBackendServiceInvokeProcedure,
		svc.Invoke,
		connect.WithSchema(queryBackendServiceInvokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/query.v1.QueryBackendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueryBackendServiceInvokeProcedure:
			queryBackendServiceInvokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueryBackendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueryBackendServiceHandler struct{}

func (UnimplementedQueryBackendServiceHandler) Invoke(context.Context, *connect.Request[v1.InvokeRequest]) (*connect.Response[v1.InvokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("query.v1.QueryBackendService.Invoke is not implemented"))
}
