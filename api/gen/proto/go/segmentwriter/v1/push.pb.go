// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: segmentwriter/v1/push.proto

package segmentwriterv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	mi := &file_segmentwriter_v1_push_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_segmentwriter_v1_push_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_segmentwriter_v1_push_proto_rawDescGZIP(), []int{0}
}

type PushRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the tenant submitting the request.
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Label KV pairs of the series the profile belongs to.
	Labels []*v1.LabelPair `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Profile data in binary format. Default format is pprof.
	Profile []byte `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// Unique identifier of the profile.
	ProfileId []byte `protobuf:"bytes,5,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// Shard identifier the profile belongs to.
	Shard uint32 `protobuf:"varint,6,opt,name=shard,proto3" json:"shard,omitempty"`
	// Profile annotations with additional metadata.
	Annotations []*v1.ProfileAnnotation `protobuf:"bytes,7,rep,name=annotations,proto3" json:"annotations,omitempty"`
	// Arrow format profile data (alternative to profile field)
	ArrowProfile  *ArrowProfileData `protobuf:"bytes,8,opt,name=arrow_profile,json=arrowProfile,proto3" json:"arrow_profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	mi := &file_segmentwriter_v1_push_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_segmentwriter_v1_push_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_segmentwriter_v1_push_proto_rawDescGZIP(), []int{1}
}

func (x *PushRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PushRequest) GetLabels() []*v1.LabelPair {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PushRequest) GetProfile() []byte {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *PushRequest) GetProfileId() []byte {
	if x != nil {
		return x.ProfileId
	}
	return nil
}

func (x *PushRequest) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *PushRequest) GetAnnotations() []*v1.ProfileAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *PushRequest) GetArrowProfile() *ArrowProfileData {
	if x != nil {
		return x.ArrowProfile
	}
	return nil
}

// ArrowProfileData contains profile data in Apache Arrow format
type ArrowProfileData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Profile metadata
	Metadata *ProfileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Arrow record batches serialized as bytes (Arrow IPC format)
	SamplesBatch   []byte `protobuf:"bytes,2,opt,name=samples_batch,json=samplesBatch,proto3" json:"samples_batch,omitempty"`
	LocationsBatch []byte `protobuf:"bytes,3,opt,name=locations_batch,json=locationsBatch,proto3" json:"locations_batch,omitempty"`
	FunctionsBatch []byte `protobuf:"bytes,4,opt,name=functions_batch,json=functionsBatch,proto3" json:"functions_batch,omitempty"`
	MappingsBatch  []byte `protobuf:"bytes,5,opt,name=mappings_batch,json=mappingsBatch,proto3" json:"mappings_batch,omitempty"`
	StringsBatch   []byte `protobuf:"bytes,6,opt,name=strings_batch,json=stringsBatch,proto3" json:"strings_batch,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ArrowProfileData) Reset() {
	*x = ArrowProfileData{}
	mi := &file_segmentwriter_v1_push_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrowProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowProfileData) ProtoMessage() {}

func (x *ArrowProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_segmentwriter_v1_push_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowProfileData.ProtoReflect.Descriptor instead.
func (*ArrowProfileData) Descriptor() ([]byte, []int) {
	return file_segmentwriter_v1_push_proto_rawDescGZIP(), []int{2}
}

func (x *ArrowProfileData) GetMetadata() *ProfileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ArrowProfileData) GetSamplesBatch() []byte {
	if x != nil {
		return x.SamplesBatch
	}
	return nil
}

func (x *ArrowProfileData) GetLocationsBatch() []byte {
	if x != nil {
		return x.LocationsBatch
	}
	return nil
}

func (x *ArrowProfileData) GetFunctionsBatch() []byte {
	if x != nil {
		return x.FunctionsBatch
	}
	return nil
}

func (x *ArrowProfileData) GetMappingsBatch() []byte {
	if x != nil {
		return x.MappingsBatch
	}
	return nil
}

func (x *ArrowProfileData) GetStringsBatch() []byte {
	if x != nil {
		return x.StringsBatch
	}
	return nil
}

// ProfileMetadata contains profile-level information
type ProfileMetadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TimeNanos         int64                  `protobuf:"varint,1,opt,name=time_nanos,json=timeNanos,proto3" json:"time_nanos,omitempty"`
	DurationNanos     int64                  `protobuf:"varint,2,opt,name=duration_nanos,json=durationNanos,proto3" json:"duration_nanos,omitempty"`
	Period            int64                  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	DropFrames        int64                  `protobuf:"varint,4,opt,name=drop_frames,json=dropFrames,proto3" json:"drop_frames,omitempty"`                        // Index into string table
	KeepFrames        int64                  `protobuf:"varint,5,opt,name=keep_frames,json=keepFrames,proto3" json:"keep_frames,omitempty"`                        // Index into string table
	DefaultSampleType int64                  `protobuf:"varint,6,opt,name=default_sample_type,json=defaultSampleType,proto3" json:"default_sample_type,omitempty"` // Index into string table
	SampleType        []*ValueType           `protobuf:"bytes,7,rep,name=sample_type,json=sampleType,proto3" json:"sample_type,omitempty"`
	PeriodType        *ValueType             `protobuf:"bytes,8,opt,name=period_type,json=periodType,proto3" json:"period_type,omitempty"`
	Comment           []int64                `protobuf:"varint,9,rep,packed,name=comment,proto3" json:"comment,omitempty"` // Indices into string table
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProfileMetadata) Reset() {
	*x = ProfileMetadata{}
	mi := &file_segmentwriter_v1_push_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileMetadata) ProtoMessage() {}

func (x *ProfileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_segmentwriter_v1_push_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileMetadata.ProtoReflect.Descriptor instead.
func (*ProfileMetadata) Descriptor() ([]byte, []int) {
	return file_segmentwriter_v1_push_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileMetadata) GetTimeNanos() int64 {
	if x != nil {
		return x.TimeNanos
	}
	return 0
}

func (x *ProfileMetadata) GetDurationNanos() int64 {
	if x != nil {
		return x.DurationNanos
	}
	return 0
}

func (x *ProfileMetadata) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ProfileMetadata) GetDropFrames() int64 {
	if x != nil {
		return x.DropFrames
	}
	return 0
}

func (x *ProfileMetadata) GetKeepFrames() int64 {
	if x != nil {
		return x.KeepFrames
	}
	return 0
}

func (x *ProfileMetadata) GetDefaultSampleType() int64 {
	if x != nil {
		return x.DefaultSampleType
	}
	return 0
}

func (x *ProfileMetadata) GetSampleType() []*ValueType {
	if x != nil {
		return x.SampleType
	}
	return nil
}

func (x *ProfileMetadata) GetPeriodType() *ValueType {
	if x != nil {
		return x.PeriodType
	}
	return nil
}

func (x *ProfileMetadata) GetComment() []int64 {
	if x != nil {
		return x.Comment
	}
	return nil
}

// ValueType describes the semantics and measurement units of a value
type ValueType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int64                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // Index into string table
	Unit          int64                  `protobuf:"varint,2,opt,name=unit,proto3" json:"unit,omitempty"` // Index into string table
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueType) Reset() {
	*x = ValueType{}
	mi := &file_segmentwriter_v1_push_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueType) ProtoMessage() {}

func (x *ValueType) ProtoReflect() protoreflect.Message {
	mi := &file_segmentwriter_v1_push_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueType.ProtoReflect.Descriptor instead.
func (*ValueType) Descriptor() ([]byte, []int) {
	return file_segmentwriter_v1_push_proto_rawDescGZIP(), []int{4}
}

func (x *ValueType) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ValueType) GetUnit() int64 {
	if x != nil {
		return x.Unit
	}
	return 0
}

var File_segmentwriter_v1_push_proto protoreflect.FileDescriptor

var file_segmentwriter_v1_push_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x94, 0x02, 0x0a,
	0x10, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x22, 0xf7, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x32, 0x5f, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0xd2, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x50, 0x75,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79,
	0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa,
	0x02, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_segmentwriter_v1_push_proto_rawDescOnce sync.Once
	file_segmentwriter_v1_push_proto_rawDescData []byte
)

func file_segmentwriter_v1_push_proto_rawDescGZIP() []byte {
	file_segmentwriter_v1_push_proto_rawDescOnce.Do(func() {
		file_segmentwriter_v1_push_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_segmentwriter_v1_push_proto_rawDesc), len(file_segmentwriter_v1_push_proto_rawDesc)))
	})
	return file_segmentwriter_v1_push_proto_rawDescData
}

var file_segmentwriter_v1_push_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_segmentwriter_v1_push_proto_goTypes = []any{
	(*PushResponse)(nil),         // 0: segmentwriter.v1.PushResponse
	(*PushRequest)(nil),          // 1: segmentwriter.v1.PushRequest
	(*ArrowProfileData)(nil),     // 2: segmentwriter.v1.ArrowProfileData
	(*ProfileMetadata)(nil),      // 3: segmentwriter.v1.ProfileMetadata
	(*ValueType)(nil),            // 4: segmentwriter.v1.ValueType
	(*v1.LabelPair)(nil),         // 5: types.v1.LabelPair
	(*v1.ProfileAnnotation)(nil), // 6: types.v1.ProfileAnnotation
}
var file_segmentwriter_v1_push_proto_depIdxs = []int32{
	5, // 0: segmentwriter.v1.PushRequest.labels:type_name -> types.v1.LabelPair
	6, // 1: segmentwriter.v1.PushRequest.annotations:type_name -> types.v1.ProfileAnnotation
	2, // 2: segmentwriter.v1.PushRequest.arrow_profile:type_name -> segmentwriter.v1.ArrowProfileData
	3, // 3: segmentwriter.v1.ArrowProfileData.metadata:type_name -> segmentwriter.v1.ProfileMetadata
	4, // 4: segmentwriter.v1.ProfileMetadata.sample_type:type_name -> segmentwriter.v1.ValueType
	4, // 5: segmentwriter.v1.ProfileMetadata.period_type:type_name -> segmentwriter.v1.ValueType
	1, // 6: segmentwriter.v1.SegmentWriterService.Push:input_type -> segmentwriter.v1.PushRequest
	0, // 7: segmentwriter.v1.SegmentWriterService.Push:output_type -> segmentwriter.v1.PushResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_segmentwriter_v1_push_proto_init() }
func file_segmentwriter_v1_push_proto_init() {
	if File_segmentwriter_v1_push_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_segmentwriter_v1_push_proto_rawDesc), len(file_segmentwriter_v1_push_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_segmentwriter_v1_push_proto_goTypes,
		DependencyIndexes: file_segmentwriter_v1_push_proto_depIdxs,
		MessageInfos:      file_segmentwriter_v1_push_proto_msgTypes,
	}.Build()
	File_segmentwriter_v1_push_proto = out.File
	file_segmentwriter_v1_push_proto_goTypes = nil
	file_segmentwriter_v1_push_proto_depIdxs = nil
}
