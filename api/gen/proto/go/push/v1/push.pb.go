// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: push/v1/push.proto

package pushv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushResponse) Reset() {
	*x = PushResponse{}
	mi := &file_push_v1_push_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResponse) ProtoMessage() {}

func (x *PushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_push_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResponse.ProtoReflect.Descriptor instead.
func (*PushResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_push_proto_rawDescGZIP(), []int{0}
}

// WriteRawRequest writes a pprof profile
type PushRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// series is a set raw pprof profiles and accompanying labels
	Series        []*RawProfileSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRequest) Reset() {
	*x = PushRequest{}
	mi := &file_push_v1_push_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRequest) ProtoMessage() {}

func (x *PushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_push_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRequest.ProtoReflect.Descriptor instead.
func (*PushRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_push_proto_rawDescGZIP(), []int{1}
}

func (x *PushRequest) GetSeries() []*RawProfileSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

// RawProfileSeries represents the pprof profile and its associated labels
type RawProfileSeries struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LabelPair is the key value pairs to identify the corresponding profile
	Labels []*v1.LabelPair `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// samples are the set of profile bytes
	Samples []*RawSample `protobuf:"bytes,2,rep,name=samples,proto3" json:"samples,omitempty"`
	// Annotations provide additional metadata for a profile.
	//
	// The main differences between labels and annotations are:
	//   - annotations cannot be used in query selectors
	//   - annotation keys don't have to be unique
	//
	// Currently annotations are applied internally by distributors,
	// any annotation passed via the push API will be dropped.
	Annotations   []*v1.ProfileAnnotation `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawProfileSeries) Reset() {
	*x = RawProfileSeries{}
	mi := &file_push_v1_push_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawProfileSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawProfileSeries) ProtoMessage() {}

func (x *RawProfileSeries) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_push_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawProfileSeries.ProtoReflect.Descriptor instead.
func (*RawProfileSeries) Descriptor() ([]byte, []int) {
	return file_push_v1_push_proto_rawDescGZIP(), []int{2}
}

func (x *RawProfileSeries) GetLabels() []*v1.LabelPair {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RawProfileSeries) GetSamples() []*RawSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *RawProfileSeries) GetAnnotations() []*v1.ProfileAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// RawSample is the set of bytes that correspond to a pprof profile
type RawSample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// raw_profile is the set of bytes of the pprof profile
	RawProfile []byte `protobuf:"bytes,1,opt,name=raw_profile,json=rawProfile,proto3" json:"raw_profile,omitempty"`
	// unique ID of the profile
	ID            string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RawSample) Reset() {
	*x = RawSample{}
	mi := &file_push_v1_push_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawSample) ProtoMessage() {}

func (x *RawSample) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_push_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawSample.ProtoReflect.Descriptor instead.
func (*RawSample) Descriptor() ([]byte, []int) {
	return file_push_v1_push_proto_rawDescGZIP(), []int{3}
}

func (x *RawSample) GetRawProfile() []byte {
	if x != nil {
		return x.RawProfile
	}
	return nil
}

func (x *RawSample) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

var File_push_v1_push_proto protoreflect.FileDescriptor

const file_push_v1_push_proto_rawDesc = "" +
	"\n" +
	"\x12push/v1/push.proto\x12\apush.v1\x1a\x14types/v1/types.proto\"\x0e\n" +
	"\fPushResponse\"@\n" +
	"\vPushRequest\x121\n" +
	"\x06series\x18\x01 \x03(\v2\x19.push.v1.RawProfileSeriesR\x06series\"\xac\x01\n" +
	"\x10RawProfileSeries\x12+\n" +
	"\x06labels\x18\x01 \x03(\v2\x13.types.v1.LabelPairR\x06labels\x12,\n" +
	"\asamples\x18\x02 \x03(\v2\x12.push.v1.RawSampleR\asamples\x12=\n" +
	"\vannotations\x18\x03 \x03(\v2\x1b.types.v1.ProfileAnnotationR\vannotations\"<\n" +
	"\tRawSample\x12\x1f\n" +
	"\vraw_profile\x18\x01 \x01(\fR\n" +
	"rawProfile\x12\x0e\n" +
	"\x02ID\x18\x02 \x01(\tR\x02ID2F\n" +
	"\rPusherService\x125\n" +
	"\x04Push\x12\x14.push.v1.PushRequest\x1a\x15.push.v1.PushResponse\"\x00B\x93\x01\n" +
	"\vcom.push.v1B\tPushProtoP\x01Z<github.com/grafana/pyroscope/api/gen/proto/go/push/v1;pushv1\xa2\x02\x03PXX\xaa\x02\aPush.V1\xca\x02\aPush\\V1\xe2\x02\x13Push\\V1\\GPBMetadata\xea\x02\bPush::V1b\x06proto3"

var (
	file_push_v1_push_proto_rawDescOnce sync.Once
	file_push_v1_push_proto_rawDescData []byte
)

func file_push_v1_push_proto_rawDescGZIP() []byte {
	file_push_v1_push_proto_rawDescOnce.Do(func() {
		file_push_v1_push_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_push_v1_push_proto_rawDesc), len(file_push_v1_push_proto_rawDesc)))
	})
	return file_push_v1_push_proto_rawDescData
}

var file_push_v1_push_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_push_v1_push_proto_goTypes = []any{
	(*PushResponse)(nil),         // 0: push.v1.PushResponse
	(*PushRequest)(nil),          // 1: push.v1.PushRequest
	(*RawProfileSeries)(nil),     // 2: push.v1.RawProfileSeries
	(*RawSample)(nil),            // 3: push.v1.RawSample
	(*v1.LabelPair)(nil),         // 4: types.v1.LabelPair
	(*v1.ProfileAnnotation)(nil), // 5: types.v1.ProfileAnnotation
}
var file_push_v1_push_proto_depIdxs = []int32{
	2, // 0: push.v1.PushRequest.series:type_name -> push.v1.RawProfileSeries
	4, // 1: push.v1.RawProfileSeries.labels:type_name -> types.v1.LabelPair
	3, // 2: push.v1.RawProfileSeries.samples:type_name -> push.v1.RawSample
	5, // 3: push.v1.RawProfileSeries.annotations:type_name -> types.v1.ProfileAnnotation
	1, // 4: push.v1.PusherService.Push:input_type -> push.v1.PushRequest
	0, // 5: push.v1.PusherService.Push:output_type -> push.v1.PushResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_push_v1_push_proto_init() }
func file_push_v1_push_proto_init() {
	if File_push_v1_push_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_push_v1_push_proto_rawDesc), len(file_push_v1_push_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_push_v1_push_proto_goTypes,
		DependencyIndexes: file_push_v1_push_proto_depIdxs,
		MessageInfos:      file_push_v1_push_proto_msgTypes,
	}.Build()
	File_push_v1_push_proto = out.File
	file_push_v1_push_proto_goTypes = nil
	file_push_v1_push_proto_depIdxs = nil
}
