// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: fuzz/types.proto

package fuzz

import (
	_ "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/settings/v1"
	_ "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IngestlimitsConfig struct {
	state                                   protoimpl.MessageState             `protogen:"open.v1"`
	PeriodType                              string                             `protobuf:"bytes,1,opt,name=PeriodType,proto3" json:"PeriodType,omitempty"`
	PeriodLimitMb                           int64                              `protobuf:"varint,2,opt,name=PeriodLimitMb,proto3" json:"PeriodLimitMb,omitempty"`
	LimitResetTime                          int64                              `protobuf:"varint,3,opt,name=LimitResetTime,proto3" json:"LimitResetTime,omitempty"`
	LimitReached                            bool                               `protobuf:"varint,4,opt,name=LimitReached,proto3" json:"LimitReached,omitempty"`
	IngestlimitsSamplingConfig__NumRequests int64                              `protobuf:"varint,5,opt,name=IngestlimitsSamplingConfig__NumRequests,json=IngestlimitsSamplingConfigNumRequests,proto3" json:"IngestlimitsSamplingConfig__NumRequests,omitempty"`
	IngestlimitsSamplingConfig__Period      int64                              `protobuf:"varint,6,opt,name=IngestlimitsSamplingConfig__Period,json=IngestlimitsSamplingConfigPeriod,proto3" json:"IngestlimitsSamplingConfig__Period,omitempty"`
	UsageGroups                             map[string]*IngestlimitsUsageGroup `protobuf:"bytes,7,rep,name=UsageGroups,proto3" json:"UsageGroups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *IngestlimitsConfig) Reset() {
	*x = IngestlimitsConfig{}
	mi := &file_fuzz_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestlimitsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestlimitsConfig) ProtoMessage() {}

func (x *IngestlimitsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestlimitsConfig.ProtoReflect.Descriptor instead.
func (*IngestlimitsConfig) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{0}
}

func (x *IngestlimitsConfig) GetPeriodType() string {
	if x != nil {
		return x.PeriodType
	}
	return ""
}

func (x *IngestlimitsConfig) GetPeriodLimitMb() int64 {
	if x != nil {
		return x.PeriodLimitMb
	}
	return 0
}

func (x *IngestlimitsConfig) GetLimitResetTime() int64 {
	if x != nil {
		return x.LimitResetTime
	}
	return 0
}

func (x *IngestlimitsConfig) GetLimitReached() bool {
	if x != nil {
		return x.LimitReached
	}
	return false
}

func (x *IngestlimitsConfig) GetIngestlimitsSamplingConfig__NumRequests() int64 {
	if x != nil {
		return x.IngestlimitsSamplingConfig__NumRequests
	}
	return 0
}

func (x *IngestlimitsConfig) GetIngestlimitsSamplingConfig__Period() int64 {
	if x != nil {
		return x.IngestlimitsSamplingConfig__Period
	}
	return 0
}

func (x *IngestlimitsConfig) GetUsageGroups() map[string]*IngestlimitsUsageGroup {
	if x != nil {
		return x.UsageGroups
	}
	return nil
}

type IngestlimitsUsageGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeriodLimitMb int64                  `protobuf:"varint,1,opt,name=PeriodLimitMb,proto3" json:"PeriodLimitMb,omitempty"`
	LimitReached  bool                   `protobuf:"varint,2,opt,name=LimitReached,proto3" json:"LimitReached,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestlimitsUsageGroup) Reset() {
	*x = IngestlimitsUsageGroup{}
	mi := &file_fuzz_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestlimitsUsageGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestlimitsUsageGroup) ProtoMessage() {}

func (x *IngestlimitsUsageGroup) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestlimitsUsageGroup.ProtoReflect.Descriptor instead.
func (*IngestlimitsUsageGroup) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{1}
}

func (x *IngestlimitsUsageGroup) GetPeriodLimitMb() int64 {
	if x != nil {
		return x.PeriodLimitMb
	}
	return 0
}

func (x *IngestlimitsUsageGroup) GetLimitReached() bool {
	if x != nil {
		return x.LimitReached
	}
	return false
}

type RelabelConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceLabels  []string               `protobuf:"bytes,1,rep,name=SourceLabels,proto3" json:"SourceLabels,omitempty"`
	Separator     string                 `protobuf:"bytes,2,opt,name=Separator,proto3" json:"Separator,omitempty"`
	Regex         string                 `protobuf:"bytes,3,opt,name=Regex,proto3" json:"Regex,omitempty"`
	Modulus       uint64                 `protobuf:"varint,4,opt,name=Modulus,proto3" json:"Modulus,omitempty"`
	TargetLabel   string                 `protobuf:"bytes,5,opt,name=TargetLabel,proto3" json:"TargetLabel,omitempty"`
	Replacement   string                 `protobuf:"bytes,6,opt,name=Replacement,proto3" json:"Replacement,omitempty"`
	Action        string                 `protobuf:"bytes,7,opt,name=Action,proto3" json:"Action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelabelConfig) Reset() {
	*x = RelabelConfig{}
	mi := &file_fuzz_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelabelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelabelConfig) ProtoMessage() {}

func (x *RelabelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelabelConfig.ProtoReflect.Descriptor instead.
func (*RelabelConfig) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{2}
}

func (x *RelabelConfig) GetSourceLabels() []string {
	if x != nil {
		return x.SourceLabels
	}
	return nil
}

func (x *RelabelConfig) GetSeparator() string {
	if x != nil {
		return x.Separator
	}
	return ""
}

func (x *RelabelConfig) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *RelabelConfig) GetModulus() uint64 {
	if x != nil {
		return x.Modulus
	}
	return 0
}

func (x *RelabelConfig) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *RelabelConfig) GetReplacement() string {
	if x != nil {
		return x.Replacement
	}
	return ""
}

func (x *RelabelConfig) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type SamplingConfig struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	UsageGroups   map[string]*SamplingUsageGroupSampling `protobuf:"bytes,1,rep,name=UsageGroups,proto3" json:"UsageGroups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SamplingConfig) Reset() {
	*x = SamplingConfig{}
	mi := &file_fuzz_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SamplingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingConfig) ProtoMessage() {}

func (x *SamplingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingConfig.ProtoReflect.Descriptor instead.
func (*SamplingConfig) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{3}
}

func (x *SamplingConfig) GetUsageGroups() map[string]*SamplingUsageGroupSampling {
	if x != nil {
		return x.UsageGroups
	}
	return nil
}

type SamplingUsageGroupSampling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Probability   float32                `protobuf:"fixed32,1,opt,name=Probability,proto3" json:"Probability,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SamplingUsageGroupSampling) Reset() {
	*x = SamplingUsageGroupSampling{}
	mi := &file_fuzz_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SamplingUsageGroupSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingUsageGroupSampling) ProtoMessage() {}

func (x *SamplingUsageGroupSampling) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingUsageGroupSampling.ProtoReflect.Descriptor instead.
func (*SamplingUsageGroupSampling) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{4}
}

func (x *SamplingUsageGroupSampling) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

type ValidationLimits struct {
	state                                                  protoimpl.MessageState `protogen:"open.v1"`
	IngestionRateMB                                        float32                `protobuf:"fixed32,1,opt,name=IngestionRateMB,proto3" json:"IngestionRateMB,omitempty"`
	IngestionBurstSizeMB                                   float32                `protobuf:"fixed32,2,opt,name=IngestionBurstSizeMB,proto3" json:"IngestionBurstSizeMB,omitempty"`
	IngestionLimit                                         *IngestlimitsConfig    `protobuf:"bytes,3,opt,name=IngestionLimit,proto3" json:"IngestionLimit,omitempty"`
	IngestionBodyLimitMB                                   float32                `protobuf:"fixed32,4,opt,name=IngestionBodyLimitMB,proto3" json:"IngestionBodyLimitMB,omitempty"`
	DistributorSampling                                    *SamplingConfig        `protobuf:"bytes,5,opt,name=DistributorSampling,proto3" json:"DistributorSampling,omitempty"`
	MaxLabelNameLength                                     int64                  `protobuf:"varint,6,opt,name=MaxLabelNameLength,proto3" json:"MaxLabelNameLength,omitempty"`
	MaxLabelValueLength                                    int64                  `protobuf:"varint,7,opt,name=MaxLabelValueLength,proto3" json:"MaxLabelValueLength,omitempty"`
	MaxLabelNamesPerSeries                                 int64                  `protobuf:"varint,8,opt,name=MaxLabelNamesPerSeries,proto3" json:"MaxLabelNamesPerSeries,omitempty"`
	MaxSessionsPerSeries                                   int64                  `protobuf:"varint,9,opt,name=MaxSessionsPerSeries,proto3" json:"MaxSessionsPerSeries,omitempty"`
	EnforceLabelsOrder                                     bool                   `protobuf:"varint,10,opt,name=EnforceLabelsOrder,proto3" json:"EnforceLabelsOrder,omitempty"`
	MaxProfileSizeBytes                                    int64                  `protobuf:"varint,11,opt,name=MaxProfileSizeBytes,proto3" json:"MaxProfileSizeBytes,omitempty"`
	MaxProfileStacktraceSamples                            int64                  `protobuf:"varint,12,opt,name=MaxProfileStacktraceSamples,proto3" json:"MaxProfileStacktraceSamples,omitempty"`
	MaxProfileStacktraceSampleLabels                       int64                  `protobuf:"varint,13,opt,name=MaxProfileStacktraceSampleLabels,proto3" json:"MaxProfileStacktraceSampleLabels,omitempty"`
	MaxProfileStacktraceDepth                              int64                  `protobuf:"varint,14,opt,name=MaxProfileStacktraceDepth,proto3" json:"MaxProfileStacktraceDepth,omitempty"`
	MaxProfileSymbolValueLength                            int64                  `protobuf:"varint,15,opt,name=MaxProfileSymbolValueLength,proto3" json:"MaxProfileSymbolValueLength,omitempty"`
	DistributorUsageGroups                                 map[string]string      `protobuf:"bytes,16,rep,name=DistributorUsageGroups,proto3" json:"DistributorUsageGroups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DistributorAggregationWindow                           int64                  `protobuf:"varint,17,opt,name=DistributorAggregationWindow,proto3" json:"DistributorAggregationWindow,omitempty"`
	DistributorAggregationPeriod                           int64                  `protobuf:"varint,18,opt,name=DistributorAggregationPeriod,proto3" json:"DistributorAggregationPeriod,omitempty"`
	IngestionRelabelingRules                               []*RelabelConfig       `protobuf:"bytes,19,rep,name=IngestionRelabelingRules,proto3" json:"IngestionRelabelingRules,omitempty"`
	IngestionRelabelingDefaultRulesPosition                string                 `protobuf:"bytes,20,opt,name=IngestionRelabelingDefaultRulesPosition,proto3" json:"IngestionRelabelingDefaultRulesPosition,omitempty"`
	IngestionTenantShardSize                               int64                  `protobuf:"varint,21,opt,name=IngestionTenantShardSize,proto3" json:"IngestionTenantShardSize,omitempty"`
	IngestionArtificialDelay                               int64                  `protobuf:"varint,22,opt,name=IngestionArtificialDelay,proto3" json:"IngestionArtificialDelay,omitempty"`
	MaxLocalSeriesPerTenant                                int64                  `protobuf:"varint,23,opt,name=MaxLocalSeriesPerTenant,proto3" json:"MaxLocalSeriesPerTenant,omitempty"`
	MaxGlobalSeriesPerTenant                               int64                  `protobuf:"varint,24,opt,name=MaxGlobalSeriesPerTenant,proto3" json:"MaxGlobalSeriesPerTenant,omitempty"`
	MaxQueryLookback                                       int64                  `protobuf:"varint,25,opt,name=MaxQueryLookback,proto3" json:"MaxQueryLookback,omitempty"`
	MaxQueryLength                                         int64                  `protobuf:"varint,26,opt,name=MaxQueryLength,proto3" json:"MaxQueryLength,omitempty"`
	MaxQueryParallelism                                    int64                  `protobuf:"varint,27,opt,name=MaxQueryParallelism,proto3" json:"MaxQueryParallelism,omitempty"`
	QueryAnalysisEnabled                                   bool                   `protobuf:"varint,28,opt,name=QueryAnalysisEnabled,proto3" json:"QueryAnalysisEnabled,omitempty"`
	QueryAnalysisSeriesEnabled                             bool                   `protobuf:"varint,29,opt,name=QueryAnalysisSeriesEnabled,proto3" json:"QueryAnalysisSeriesEnabled,omitempty"`
	MaxFlameGraphNodesDefault                              int64                  `protobuf:"varint,30,opt,name=MaxFlameGraphNodesDefault,proto3" json:"MaxFlameGraphNodesDefault,omitempty"`
	MaxFlameGraphNodesMax                                  int64                  `protobuf:"varint,31,opt,name=MaxFlameGraphNodesMax,proto3" json:"MaxFlameGraphNodesMax,omitempty"`
	StoreGatewayTenantShardSize                            int64                  `protobuf:"varint,32,opt,name=StoreGatewayTenantShardSize,proto3" json:"StoreGatewayTenantShardSize,omitempty"`
	QuerySplitDuration                                     int64                  `protobuf:"varint,33,opt,name=QuerySplitDuration,proto3" json:"QuerySplitDuration,omitempty"`
	CompactorBlocksRetentionPeriod                         int64                  `protobuf:"varint,34,opt,name=CompactorBlocksRetentionPeriod,proto3" json:"CompactorBlocksRetentionPeriod,omitempty"`
	CompactorSplitAndMergeShards                           int64                  `protobuf:"varint,35,opt,name=CompactorSplitAndMergeShards,proto3" json:"CompactorSplitAndMergeShards,omitempty"`
	CompactorSplitAndMergeStageSize                        int64                  `protobuf:"varint,36,opt,name=CompactorSplitAndMergeStageSize,proto3" json:"CompactorSplitAndMergeStageSize,omitempty"`
	CompactorSplitGroups                                   int64                  `protobuf:"varint,37,opt,name=CompactorSplitGroups,proto3" json:"CompactorSplitGroups,omitempty"`
	CompactorTenantShardSize                               int64                  `protobuf:"varint,38,opt,name=CompactorTenantShardSize,proto3" json:"CompactorTenantShardSize,omitempty"`
	CompactorPartialBlockDeletionDelay                     int64                  `protobuf:"varint,39,opt,name=CompactorPartialBlockDeletionDelay,proto3" json:"CompactorPartialBlockDeletionDelay,omitempty"`
	CompactorDownsamplerEnabled                            bool                   `protobuf:"varint,40,opt,name=CompactorDownsamplerEnabled,proto3" json:"CompactorDownsamplerEnabled,omitempty"`
	S3SSEType                                              string                 `protobuf:"bytes,41,opt,name=S3SSEType,proto3" json:"S3SSEType,omitempty"`
	S3SSEKMSKeyID                                          string                 `protobuf:"bytes,42,opt,name=S3SSEKMSKeyID,proto3" json:"S3SSEKMSKeyID,omitempty"`
	S3SSEKMSEncryptionContext                              string                 `protobuf:"bytes,43,opt,name=S3SSEKMSEncryptionContext,proto3" json:"S3SSEKMSEncryptionContext,omitempty"`
	RejectOlderThan                                        int64                  `protobuf:"varint,44,opt,name=RejectOlderThan,proto3" json:"RejectOlderThan,omitempty"`
	RejectNewerThan                                        int64                  `protobuf:"varint,45,opt,name=RejectNewerThan,proto3" json:"RejectNewerThan,omitempty"`
	WritepathConfig__WritePath                             string                 `protobuf:"bytes,46,opt,name=WritepathConfig__WritePath,json=WritepathConfigWritePath,proto3" json:"WritepathConfig__WritePath,omitempty"`
	WritepathConfig__IngesterWeight                        float32                `protobuf:"fixed32,47,opt,name=WritepathConfig__IngesterWeight,json=WritepathConfigIngesterWeight,proto3" json:"WritepathConfig__IngesterWeight,omitempty"`
	WritepathConfig__SegmentWriterWeight                   float32                `protobuf:"fixed32,48,opt,name=WritepathConfig__SegmentWriterWeight,json=WritepathConfigSegmentWriterWeight,proto3" json:"WritepathConfig__SegmentWriterWeight,omitempty"`
	WritepathConfig__SegmentWriterTimeout                  int64                  `protobuf:"varint,49,opt,name=WritepathConfig__SegmentWriterTimeout,json=WritepathConfigSegmentWriterTimeout,proto3" json:"WritepathConfig__SegmentWriterTimeout,omitempty"`
	WritepathConfig__Compression                           string                 `protobuf:"bytes,50,opt,name=WritepathConfig__Compression,json=WritepathConfigCompression,proto3" json:"WritepathConfig__Compression,omitempty"`
	WritepathConfig__AsyncIngest                           bool                   `protobuf:"varint,51,opt,name=WritepathConfig__AsyncIngest,json=WritepathConfigAsyncIngest,proto3" json:"WritepathConfig__AsyncIngest,omitempty"`
	ReadpathConfig__EnableQueryBackend                     bool                   `protobuf:"varint,52,opt,name=ReadpathConfig__EnableQueryBackend,json=ReadpathConfigEnableQueryBackend,proto3" json:"ReadpathConfig__EnableQueryBackend,omitempty"`
	ReadpathConfig__EnableQueryBackendFrom                 uint64                 `protobuf:"varint,53,opt,name=ReadpathConfig__EnableQueryBackendFrom,json=ReadpathConfigEnableQueryBackendFrom,proto3" json:"ReadpathConfig__EnableQueryBackendFrom,omitempty"`
	RetentionConfig__RetentionPeriod                       int64                  `protobuf:"varint,54,opt,name=RetentionConfig__RetentionPeriod,json=RetentionConfigRetentionPeriod,proto3" json:"RetentionConfig__RetentionPeriod,omitempty"`
	AdaptiveplacementPlacementLimits__TenantShards         uint64                 `protobuf:"varint,55,opt,name=AdaptiveplacementPlacementLimits__TenantShards,json=AdaptiveplacementPlacementLimitsTenantShards,proto3" json:"AdaptiveplacementPlacementLimits__TenantShards,omitempty"`
	AdaptiveplacementPlacementLimits__DefaultDatasetShards uint64                 `protobuf:"varint,56,opt,name=AdaptiveplacementPlacementLimits__DefaultDatasetShards,json=AdaptiveplacementPlacementLimitsDefaultDatasetShards,proto3" json:"AdaptiveplacementPlacementLimits__DefaultDatasetShards,omitempty"`
	AdaptiveplacementPlacementLimits__LoadBalancing        string                 `protobuf:"bytes,57,opt,name=AdaptiveplacementPlacementLimits__LoadBalancing,json=AdaptiveplacementPlacementLimitsLoadBalancing,proto3" json:"AdaptiveplacementPlacementLimits__LoadBalancing,omitempty"`
	AdaptiveplacementPlacementLimits__MinDatasetShards     uint64                 `protobuf:"varint,58,opt,name=AdaptiveplacementPlacementLimits__MinDatasetShards,json=AdaptiveplacementPlacementLimitsMinDatasetShards,proto3" json:"AdaptiveplacementPlacementLimits__MinDatasetShards,omitempty"`
	AdaptiveplacementPlacementLimits__MaxDatasetShards     uint64                 `protobuf:"varint,59,opt,name=AdaptiveplacementPlacementLimits__MaxDatasetShards,json=AdaptiveplacementPlacementLimitsMaxDatasetShards,proto3" json:"AdaptiveplacementPlacementLimits__MaxDatasetShards,omitempty"`
	AdaptiveplacementPlacementLimits__UnitSizeBytes        uint64                 `protobuf:"varint,60,opt,name=AdaptiveplacementPlacementLimits__UnitSizeBytes,json=AdaptiveplacementPlacementLimitsUnitSizeBytes,proto3" json:"AdaptiveplacementPlacementLimits__UnitSizeBytes,omitempty"`
	AdaptiveplacementPlacementLimits__BurstWindow          int64                  `protobuf:"varint,61,opt,name=AdaptiveplacementPlacementLimits__BurstWindow,json=AdaptiveplacementPlacementLimitsBurstWindow,proto3" json:"AdaptiveplacementPlacementLimits__BurstWindow,omitempty"`
	AdaptiveplacementPlacementLimits__DecayWindow          int64                  `protobuf:"varint,62,opt,name=AdaptiveplacementPlacementLimits__DecayWindow,json=AdaptiveplacementPlacementLimitsDecayWindow,proto3" json:"AdaptiveplacementPlacementLimits__DecayWindow,omitempty"`
	RecordingRules                                         []*v1.RecordingRule    `protobuf:"bytes,63,rep,name=RecordingRules,proto3" json:"RecordingRules,omitempty"`
	ValidationSymbolizer__Enabled                          bool                   `protobuf:"varint,64,opt,name=ValidationSymbolizer__Enabled,json=ValidationSymbolizerEnabled,proto3" json:"ValidationSymbolizer__Enabled,omitempty"`
	unknownFields                                          protoimpl.UnknownFields
	sizeCache                                              protoimpl.SizeCache
}

func (x *ValidationLimits) Reset() {
	*x = ValidationLimits{}
	mi := &file_fuzz_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationLimits) ProtoMessage() {}

func (x *ValidationLimits) ProtoReflect() protoreflect.Message {
	mi := &file_fuzz_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationLimits.ProtoReflect.Descriptor instead.
func (*ValidationLimits) Descriptor() ([]byte, []int) {
	return file_fuzz_types_proto_rawDescGZIP(), []int{5}
}

func (x *ValidationLimits) GetIngestionRateMB() float32 {
	if x != nil {
		return x.IngestionRateMB
	}
	return 0
}

func (x *ValidationLimits) GetIngestionBurstSizeMB() float32 {
	if x != nil {
		return x.IngestionBurstSizeMB
	}
	return 0
}

func (x *ValidationLimits) GetIngestionLimit() *IngestlimitsConfig {
	if x != nil {
		return x.IngestionLimit
	}
	return nil
}

func (x *ValidationLimits) GetIngestionBodyLimitMB() float32 {
	if x != nil {
		return x.IngestionBodyLimitMB
	}
	return 0
}

func (x *ValidationLimits) GetDistributorSampling() *SamplingConfig {
	if x != nil {
		return x.DistributorSampling
	}
	return nil
}

func (x *ValidationLimits) GetMaxLabelNameLength() int64 {
	if x != nil {
		return x.MaxLabelNameLength
	}
	return 0
}

func (x *ValidationLimits) GetMaxLabelValueLength() int64 {
	if x != nil {
		return x.MaxLabelValueLength
	}
	return 0
}

func (x *ValidationLimits) GetMaxLabelNamesPerSeries() int64 {
	if x != nil {
		return x.MaxLabelNamesPerSeries
	}
	return 0
}

func (x *ValidationLimits) GetMaxSessionsPerSeries() int64 {
	if x != nil {
		return x.MaxSessionsPerSeries
	}
	return 0
}

func (x *ValidationLimits) GetEnforceLabelsOrder() bool {
	if x != nil {
		return x.EnforceLabelsOrder
	}
	return false
}

func (x *ValidationLimits) GetMaxProfileSizeBytes() int64 {
	if x != nil {
		return x.MaxProfileSizeBytes
	}
	return 0
}

func (x *ValidationLimits) GetMaxProfileStacktraceSamples() int64 {
	if x != nil {
		return x.MaxProfileStacktraceSamples
	}
	return 0
}

func (x *ValidationLimits) GetMaxProfileStacktraceSampleLabels() int64 {
	if x != nil {
		return x.MaxProfileStacktraceSampleLabels
	}
	return 0
}

func (x *ValidationLimits) GetMaxProfileStacktraceDepth() int64 {
	if x != nil {
		return x.MaxProfileStacktraceDepth
	}
	return 0
}

func (x *ValidationLimits) GetMaxProfileSymbolValueLength() int64 {
	if x != nil {
		return x.MaxProfileSymbolValueLength
	}
	return 0
}

func (x *ValidationLimits) GetDistributorUsageGroups() map[string]string {
	if x != nil {
		return x.DistributorUsageGroups
	}
	return nil
}

func (x *ValidationLimits) GetDistributorAggregationWindow() int64 {
	if x != nil {
		return x.DistributorAggregationWindow
	}
	return 0
}

func (x *ValidationLimits) GetDistributorAggregationPeriod() int64 {
	if x != nil {
		return x.DistributorAggregationPeriod
	}
	return 0
}

func (x *ValidationLimits) GetIngestionRelabelingRules() []*RelabelConfig {
	if x != nil {
		return x.IngestionRelabelingRules
	}
	return nil
}

func (x *ValidationLimits) GetIngestionRelabelingDefaultRulesPosition() string {
	if x != nil {
		return x.IngestionRelabelingDefaultRulesPosition
	}
	return ""
}

func (x *ValidationLimits) GetIngestionTenantShardSize() int64 {
	if x != nil {
		return x.IngestionTenantShardSize
	}
	return 0
}

func (x *ValidationLimits) GetIngestionArtificialDelay() int64 {
	if x != nil {
		return x.IngestionArtificialDelay
	}
	return 0
}

func (x *ValidationLimits) GetMaxLocalSeriesPerTenant() int64 {
	if x != nil {
		return x.MaxLocalSeriesPerTenant
	}
	return 0
}

func (x *ValidationLimits) GetMaxGlobalSeriesPerTenant() int64 {
	if x != nil {
		return x.MaxGlobalSeriesPerTenant
	}
	return 0
}

func (x *ValidationLimits) GetMaxQueryLookback() int64 {
	if x != nil {
		return x.MaxQueryLookback
	}
	return 0
}

func (x *ValidationLimits) GetMaxQueryLength() int64 {
	if x != nil {
		return x.MaxQueryLength
	}
	return 0
}

func (x *ValidationLimits) GetMaxQueryParallelism() int64 {
	if x != nil {
		return x.MaxQueryParallelism
	}
	return 0
}

func (x *ValidationLimits) GetQueryAnalysisEnabled() bool {
	if x != nil {
		return x.QueryAnalysisEnabled
	}
	return false
}

func (x *ValidationLimits) GetQueryAnalysisSeriesEnabled() bool {
	if x != nil {
		return x.QueryAnalysisSeriesEnabled
	}
	return false
}

func (x *ValidationLimits) GetMaxFlameGraphNodesDefault() int64 {
	if x != nil {
		return x.MaxFlameGraphNodesDefault
	}
	return 0
}

func (x *ValidationLimits) GetMaxFlameGraphNodesMax() int64 {
	if x != nil {
		return x.MaxFlameGraphNodesMax
	}
	return 0
}

func (x *ValidationLimits) GetStoreGatewayTenantShardSize() int64 {
	if x != nil {
		return x.StoreGatewayTenantShardSize
	}
	return 0
}

func (x *ValidationLimits) GetQuerySplitDuration() int64 {
	if x != nil {
		return x.QuerySplitDuration
	}
	return 0
}

func (x *ValidationLimits) GetCompactorBlocksRetentionPeriod() int64 {
	if x != nil {
		return x.CompactorBlocksRetentionPeriod
	}
	return 0
}

func (x *ValidationLimits) GetCompactorSplitAndMergeShards() int64 {
	if x != nil {
		return x.CompactorSplitAndMergeShards
	}
	return 0
}

func (x *ValidationLimits) GetCompactorSplitAndMergeStageSize() int64 {
	if x != nil {
		return x.CompactorSplitAndMergeStageSize
	}
	return 0
}

func (x *ValidationLimits) GetCompactorSplitGroups() int64 {
	if x != nil {
		return x.CompactorSplitGroups
	}
	return 0
}

func (x *ValidationLimits) GetCompactorTenantShardSize() int64 {
	if x != nil {
		return x.CompactorTenantShardSize
	}
	return 0
}

func (x *ValidationLimits) GetCompactorPartialBlockDeletionDelay() int64 {
	if x != nil {
		return x.CompactorPartialBlockDeletionDelay
	}
	return 0
}

func (x *ValidationLimits) GetCompactorDownsamplerEnabled() bool {
	if x != nil {
		return x.CompactorDownsamplerEnabled
	}
	return false
}

func (x *ValidationLimits) GetS3SSEType() string {
	if x != nil {
		return x.S3SSEType
	}
	return ""
}

func (x *ValidationLimits) GetS3SSEKMSKeyID() string {
	if x != nil {
		return x.S3SSEKMSKeyID
	}
	return ""
}

func (x *ValidationLimits) GetS3SSEKMSEncryptionContext() string {
	if x != nil {
		return x.S3SSEKMSEncryptionContext
	}
	return ""
}

func (x *ValidationLimits) GetRejectOlderThan() int64 {
	if x != nil {
		return x.RejectOlderThan
	}
	return 0
}

func (x *ValidationLimits) GetRejectNewerThan() int64 {
	if x != nil {
		return x.RejectNewerThan
	}
	return 0
}

func (x *ValidationLimits) GetWritepathConfig__WritePath() string {
	if x != nil {
		return x.WritepathConfig__WritePath
	}
	return ""
}

func (x *ValidationLimits) GetWritepathConfig__IngesterWeight() float32 {
	if x != nil {
		return x.WritepathConfig__IngesterWeight
	}
	return 0
}

func (x *ValidationLimits) GetWritepathConfig__SegmentWriterWeight() float32 {
	if x != nil {
		return x.WritepathConfig__SegmentWriterWeight
	}
	return 0
}

func (x *ValidationLimits) GetWritepathConfig__SegmentWriterTimeout() int64 {
	if x != nil {
		return x.WritepathConfig__SegmentWriterTimeout
	}
	return 0
}

func (x *ValidationLimits) GetWritepathConfig__Compression() string {
	if x != nil {
		return x.WritepathConfig__Compression
	}
	return ""
}

func (x *ValidationLimits) GetWritepathConfig__AsyncIngest() bool {
	if x != nil {
		return x.WritepathConfig__AsyncIngest
	}
	return false
}

func (x *ValidationLimits) GetReadpathConfig__EnableQueryBackend() bool {
	if x != nil {
		return x.ReadpathConfig__EnableQueryBackend
	}
	return false
}

func (x *ValidationLimits) GetReadpathConfig__EnableQueryBackendFrom() uint64 {
	if x != nil {
		return x.ReadpathConfig__EnableQueryBackendFrom
	}
	return 0
}

func (x *ValidationLimits) GetRetentionConfig__RetentionPeriod() int64 {
	if x != nil {
		return x.RetentionConfig__RetentionPeriod
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__TenantShards() uint64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__TenantShards
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__DefaultDatasetShards() uint64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__DefaultDatasetShards
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__LoadBalancing() string {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__LoadBalancing
	}
	return ""
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__MinDatasetShards() uint64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__MinDatasetShards
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__MaxDatasetShards() uint64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__MaxDatasetShards
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__UnitSizeBytes() uint64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__UnitSizeBytes
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__BurstWindow() int64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__BurstWindow
	}
	return 0
}

func (x *ValidationLimits) GetAdaptiveplacementPlacementLimits__DecayWindow() int64 {
	if x != nil {
		return x.AdaptiveplacementPlacementLimits__DecayWindow
	}
	return 0
}

func (x *ValidationLimits) GetRecordingRules() []*v1.RecordingRule {
	if x != nil {
		return x.RecordingRules
	}
	return nil
}

func (x *ValidationLimits) GetValidationSymbolizer__Enabled() bool {
	if x != nil {
		return x.ValidationSymbolizer__Enabled
	}
	return false
}

var File_fuzz_types_proto protoreflect.FileDescriptor

var file_fuzz_types_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x66, 0x75, 0x7a, 0x7a, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x66, 0x75, 0x7a, 0x7a, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x56,
	0x0a, 0x27, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x4e, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x25, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x22, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x20, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x75, 0x7a, 0x7a,
	0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x1a, 0x5c, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x62, 0x0a, 0x16, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x12,
	0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x75,
	0x7a, 0x7a, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a,
	0x60, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3e, 0x0a, 0x1a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0xc8, 0x22, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x42,
	0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x4d, 0x42, 0x12, 0x40, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x75, 0x7a, 0x7a, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x42, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x42, 0x12, 0x46, 0x0a, 0x13, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x4d,
	0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x20,
	0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x40,
	0x0a, 0x1b, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x6a, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x1c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x42, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x18, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x18, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x69, 0x73, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x78, 0x46, 0x6c,
	0x61, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x4d, 0x61, 0x78, 0x46,
	0x6c, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x46, 0x6c, 0x61, 0x6d,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4d, 0x61, 0x78, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x40, 0x0a, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x22, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x33, 0x53, 0x53, 0x45, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x33, 0x53, 0x53, 0x45, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x33, 0x53, 0x53, 0x45, 0x4b, 0x4d, 0x53, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x33, 0x53, 0x53,
	0x45, 0x4b, 0x4d, 0x53, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x33, 0x53,
	0x53, 0x45, 0x4b, 0x4d, 0x53, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x53, 0x33,
	0x53, 0x53, 0x45, 0x4b, 0x4d, 0x53, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x77, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x65, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x1f, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x50, 0x0a, 0x24, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x22, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x52, 0x0a, 0x25, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x23, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x22, 0x52,
	0x65, 0x61, 0x64, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x26, 0x52, 0x65, 0x61,
	0x64, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x24, 0x52, 0x65, 0x61, 0x64, 0x70,
	0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x48, 0x0a, 0x20, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x5f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x52, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x64, 0x0a, 0x2e, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x5f, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x2c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x74, 0x0a, 0x36, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x34, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x2f, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2d,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a,
	0x32, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x5f, 0x5f, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x30, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x6c, 0x0a, 0x32, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f,
	0x5f, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x30, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x2f, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x2d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x2d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x5f, 0x42, 0x75, 0x72, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x2b, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x42, 0x75, 0x72, 0x73, 0x74, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x2d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x5f, 0x44, 0x65, 0x63, 0x61, 0x79,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x2b, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x44, 0x65,
	0x63, 0x61, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x3f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x1a, 0x49, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x7a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x7a, 0x7a, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x75, 0x7a, 0x7a, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58,
	0xaa, 0x02, 0x04, 0x46, 0x75, 0x7a, 0x7a, 0xca, 0x02, 0x04, 0x46, 0x75, 0x7a, 0x7a, 0xe2, 0x02,
	0x10, 0x46, 0x75, 0x7a, 0x7a, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x04, 0x46, 0x75, 0x7a, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_fuzz_types_proto_rawDescOnce sync.Once
	file_fuzz_types_proto_rawDescData []byte
)

func file_fuzz_types_proto_rawDescGZIP() []byte {
	file_fuzz_types_proto_rawDescOnce.Do(func() {
		file_fuzz_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fuzz_types_proto_rawDesc), len(file_fuzz_types_proto_rawDesc)))
	})
	return file_fuzz_types_proto_rawDescData
}

var file_fuzz_types_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_fuzz_types_proto_goTypes = []any{
	(*IngestlimitsConfig)(nil),         // 0: fuzz.IngestlimitsConfig
	(*IngestlimitsUsageGroup)(nil),     // 1: fuzz.IngestlimitsUsageGroup
	(*RelabelConfig)(nil),              // 2: fuzz.RelabelConfig
	(*SamplingConfig)(nil),             // 3: fuzz.SamplingConfig
	(*SamplingUsageGroupSampling)(nil), // 4: fuzz.SamplingUsageGroupSampling
	(*ValidationLimits)(nil),           // 5: fuzz.ValidationLimits
	nil,                                // 6: fuzz.IngestlimitsConfig.UsageGroupsEntry
	nil,                                // 7: fuzz.SamplingConfig.UsageGroupsEntry
	nil,                                // 8: fuzz.ValidationLimits.DistributorUsageGroupsEntry
	(*v1.RecordingRule)(nil),           // 9: settings.v1.RecordingRule
}
var file_fuzz_types_proto_depIdxs = []int32{
	6, // 0: fuzz.IngestlimitsConfig.UsageGroups:type_name -> fuzz.IngestlimitsConfig.UsageGroupsEntry
	7, // 1: fuzz.SamplingConfig.UsageGroups:type_name -> fuzz.SamplingConfig.UsageGroupsEntry
	0, // 2: fuzz.ValidationLimits.IngestionLimit:type_name -> fuzz.IngestlimitsConfig
	3, // 3: fuzz.ValidationLimits.DistributorSampling:type_name -> fuzz.SamplingConfig
	8, // 4: fuzz.ValidationLimits.DistributorUsageGroups:type_name -> fuzz.ValidationLimits.DistributorUsageGroupsEntry
	2, // 5: fuzz.ValidationLimits.IngestionRelabelingRules:type_name -> fuzz.RelabelConfig
	9, // 6: fuzz.ValidationLimits.RecordingRules:type_name -> settings.v1.RecordingRule
	1, // 7: fuzz.IngestlimitsConfig.UsageGroupsEntry.value:type_name -> fuzz.IngestlimitsUsageGroup
	4, // 8: fuzz.SamplingConfig.UsageGroupsEntry.value:type_name -> fuzz.SamplingUsageGroupSampling
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_fuzz_types_proto_init() }
func file_fuzz_types_proto_init() {
	if File_fuzz_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fuzz_types_proto_rawDesc), len(file_fuzz_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fuzz_types_proto_goTypes,
		DependencyIndexes: file_fuzz_types_proto_depIdxs,
		MessageInfos:      file_fuzz_types_proto_msgTypes,
	}.Build()
	File_fuzz_types_proto = out.File
	file_fuzz_types_proto_goTypes = nil
	file_fuzz_types_proto_depIdxs = nil
}
