// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: querier/v1/querier.proto

package querierv1

import (
	v11 "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_PROFILE_TYPES            QueryType = 0
	QueryType_LABEL_NAMES              QueryType = 1
	QueryType_LABEL_VALUES             QueryType = 2
	QueryType_SERIES                   QueryType = 3
	QueryType_FLAME_GRAPH              QueryType = 4
	QueryType_SPAN_PROFILE_FLAME_GRAPH QueryType = 5
	QueryType_PPROF                    QueryType = 6
	QueryType_TIME_SERIES              QueryType = 7
	QueryType_DIFF                     QueryType = 8
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "PROFILE_TYPES",
		1: "LABEL_NAMES",
		2: "LABEL_VALUES",
		3: "SERIES",
		4: "FLAME_GRAPH",
		5: "SPAN_PROFILE_FLAME_GRAPH",
		6: "PPROF",
		7: "TIME_SERIES",
		8: "DIFF",
	}
	QueryType_value = map[string]int32{
		"PROFILE_TYPES":            0,
		"LABEL_NAMES":              1,
		"LABEL_VALUES":             2,
		"SERIES":                   3,
		"FLAME_GRAPH":              4,
		"SPAN_PROFILE_FLAME_GRAPH": 5,
		"PPROF":                    6,
		"TIME_SERIES":              7,
		"DIFF":                     8,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_querier_v1_querier_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_querier_v1_querier_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{0}
}

type QueryImpactType int32

const (
	QueryImpactType_LOW    QueryImpactType = 0
	QueryImpactType_MEDIUM QueryImpactType = 1
	QueryImpactType_HIGH   QueryImpactType = 2
)

// Enum value maps for QueryImpactType.
var (
	QueryImpactType_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
	}
	QueryImpactType_value = map[string]int32{
		"LOW":    0,
		"MEDIUM": 1,
		"HIGH":   2,
	}
)

func (x QueryImpactType) Enum() *QueryImpactType {
	p := new(QueryImpactType)
	*p = x
	return p
}

func (x QueryImpactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryImpactType) Descriptor() protoreflect.EnumDescriptor {
	return file_querier_v1_querier_proto_enumTypes[1].Descriptor()
}

func (QueryImpactType) Type() protoreflect.EnumType {
	return &file_querier_v1_querier_proto_enumTypes[1]
}

func (x QueryImpactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryImpactType.Descriptor instead.
func (QueryImpactType) EnumDescriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{1}
}

type ProfileTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ProfileTypesRequest) Reset() {
	*x = ProfileTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesRequest) ProtoMessage() {}

func (x *ProfileTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTypesRequest.ProtoReflect.Descriptor instead.
func (*ProfileTypesRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileTypesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ProfileTypesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ProfileTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTypes []*v1.ProfileType `protobuf:"bytes,1,rep,name=profile_types,json=profileTypes,proto3" json:"profile_types,omitempty"`
}

func (x *ProfileTypesResponse) Reset() {
	*x = ProfileTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesResponse) ProtoMessage() {}

func (x *ProfileTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTypesResponse.ProtoReflect.Descriptor instead.
func (*ProfileTypesResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileTypesResponse) GetProfileTypes() []*v1.ProfileType {
	if x != nil {
		return x.ProfileTypes
	}
	return nil
}

type SeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers   []string `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
	LabelNames []string `protobuf:"bytes,2,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SeriesRequest) Reset() {
	*x = SeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesRequest) ProtoMessage() {}

func (x *SeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesRequest.ProtoReflect.Descriptor instead.
func (*SeriesRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{2}
}

func (x *SeriesRequest) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *SeriesRequest) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *SeriesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SeriesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type SeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelsSet []*v1.Labels `protobuf:"bytes,2,rep,name=labels_set,json=labelsSet,proto3" json:"labels_set,omitempty"`
}

func (x *SeriesResponse) Reset() {
	*x = SeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesResponse) ProtoMessage() {}

func (x *SeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesResponse.ProtoReflect.Descriptor instead.
func (*SeriesResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{3}
}

func (x *SeriesResponse) GetLabelsSet() []*v1.Labels {
	if x != nil {
		return x.LabelsSet
	}
	return nil
}

type SelectMergeStacktracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTypeID string `protobuf:"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3" json:"profile_typeID,omitempty"`
	LabelSelector string `protobuf:"bytes,2,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// Limit the nodes returned to only show the node with the max_node's biggest total
	MaxNodes *int64 `protobuf:"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
}

func (x *SelectMergeStacktracesRequest) Reset() {
	*x = SelectMergeStacktracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMergeStacktracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMergeStacktracesRequest) ProtoMessage() {}

func (x *SelectMergeStacktracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMergeStacktracesRequest.ProtoReflect.Descriptor instead.
func (*SelectMergeStacktracesRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{4}
}

func (x *SelectMergeStacktracesRequest) GetProfileTypeID() string {
	if x != nil {
		return x.ProfileTypeID
	}
	return ""
}

func (x *SelectMergeStacktracesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectMergeStacktracesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectMergeStacktracesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectMergeStacktracesRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

type SelectMergeStacktracesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flamegraph *FlameGraph `protobuf:"bytes,1,opt,name=flamegraph,proto3" json:"flamegraph,omitempty"`
}

func (x *SelectMergeStacktracesResponse) Reset() {
	*x = SelectMergeStacktracesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMergeStacktracesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMergeStacktracesResponse) ProtoMessage() {}

func (x *SelectMergeStacktracesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMergeStacktracesResponse.ProtoReflect.Descriptor instead.
func (*SelectMergeStacktracesResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{5}
}

func (x *SelectMergeStacktracesResponse) GetFlamegraph() *FlameGraph {
	if x != nil {
		return x.Flamegraph
	}
	return nil
}

type SelectMergeSpanProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTypeID string   `protobuf:"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3" json:"profile_typeID,omitempty"`
	LabelSelector string   `protobuf:"bytes,2,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	SpanSelector  []string `protobuf:"bytes,3,rep,name=span_selector,json=spanSelector,proto3" json:"span_selector,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// Limit the nodes returned to only show the node with the max_node's biggest total
	MaxNodes *int64 `protobuf:"varint,6,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
}

func (x *SelectMergeSpanProfileRequest) Reset() {
	*x = SelectMergeSpanProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMergeSpanProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMergeSpanProfileRequest) ProtoMessage() {}

func (x *SelectMergeSpanProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMergeSpanProfileRequest.ProtoReflect.Descriptor instead.
func (*SelectMergeSpanProfileRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{6}
}

func (x *SelectMergeSpanProfileRequest) GetProfileTypeID() string {
	if x != nil {
		return x.ProfileTypeID
	}
	return ""
}

func (x *SelectMergeSpanProfileRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectMergeSpanProfileRequest) GetSpanSelector() []string {
	if x != nil {
		return x.SpanSelector
	}
	return nil
}

func (x *SelectMergeSpanProfileRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectMergeSpanProfileRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectMergeSpanProfileRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

type SelectMergeSpanProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flamegraph *FlameGraph `protobuf:"bytes,1,opt,name=flamegraph,proto3" json:"flamegraph,omitempty"`
}

func (x *SelectMergeSpanProfileResponse) Reset() {
	*x = SelectMergeSpanProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMergeSpanProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMergeSpanProfileResponse) ProtoMessage() {}

func (x *SelectMergeSpanProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMergeSpanProfileResponse.ProtoReflect.Descriptor instead.
func (*SelectMergeSpanProfileResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{7}
}

func (x *SelectMergeSpanProfileResponse) GetFlamegraph() *FlameGraph {
	if x != nil {
		return x.Flamegraph
	}
	return nil
}

type DiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  *SelectMergeStacktracesRequest `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right *SelectMergeStacktracesRequest `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *DiffRequest) Reset() {
	*x = DiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffRequest) ProtoMessage() {}

func (x *DiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffRequest.ProtoReflect.Descriptor instead.
func (*DiffRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{8}
}

func (x *DiffRequest) GetLeft() *SelectMergeStacktracesRequest {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *DiffRequest) GetRight() *SelectMergeStacktracesRequest {
	if x != nil {
		return x.Right
	}
	return nil
}

type DiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flamegraph *FlameGraphDiff `protobuf:"bytes,1,opt,name=flamegraph,proto3" json:"flamegraph,omitempty"`
}

func (x *DiffResponse) Reset() {
	*x = DiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffResponse) ProtoMessage() {}

func (x *DiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffResponse.ProtoReflect.Descriptor instead.
func (*DiffResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{9}
}

func (x *DiffResponse) GetFlamegraph() *FlameGraphDiff {
	if x != nil {
		return x.Flamegraph
	}
	return nil
}

type FlameGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names   []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Levels  []*Level `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
	Total   int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	MaxSelf int64    `protobuf:"varint,4,opt,name=max_self,json=maxSelf,proto3" json:"max_self,omitempty"`
}

func (x *FlameGraph) Reset() {
	*x = FlameGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlameGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlameGraph) ProtoMessage() {}

func (x *FlameGraph) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlameGraph.ProtoReflect.Descriptor instead.
func (*FlameGraph) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{10}
}

func (x *FlameGraph) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FlameGraph) GetLevels() []*Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *FlameGraph) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FlameGraph) GetMaxSelf() int64 {
	if x != nil {
		return x.MaxSelf
	}
	return 0
}

type FlameGraphDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names      []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Levels     []*Level `protobuf:"bytes,2,rep,name=levels,proto3" json:"levels,omitempty"`
	Total      int64    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	MaxSelf    int64    `protobuf:"varint,4,opt,name=max_self,json=maxSelf,proto3" json:"max_self,omitempty"`
	LeftTicks  int64    `protobuf:"varint,5,opt,name=leftTicks,proto3" json:"leftTicks,omitempty"`
	RightTicks int64    `protobuf:"varint,6,opt,name=rightTicks,proto3" json:"rightTicks,omitempty"`
}

func (x *FlameGraphDiff) Reset() {
	*x = FlameGraphDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlameGraphDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlameGraphDiff) ProtoMessage() {}

func (x *FlameGraphDiff) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlameGraphDiff.ProtoReflect.Descriptor instead.
func (*FlameGraphDiff) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{11}
}

func (x *FlameGraphDiff) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *FlameGraphDiff) GetLevels() []*Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *FlameGraphDiff) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FlameGraphDiff) GetMaxSelf() int64 {
	if x != nil {
		return x.MaxSelf
	}
	return 0
}

func (x *FlameGraphDiff) GetLeftTicks() int64 {
	if x != nil {
		return x.LeftTicks
	}
	return 0
}

func (x *FlameGraphDiff) GetRightTicks() int64 {
	if x != nil {
		return x.RightTicks
	}
	return 0
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{12}
}

func (x *Level) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type SelectMergeProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTypeID string `protobuf:"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3" json:"profile_typeID,omitempty"`
	LabelSelector string `protobuf:"bytes,2,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// Limit the nodes returned to only show the node with the max_node's biggest total
	MaxNodes *int64 `protobuf:"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
	// Select stack traces that match the provided selector.
	StackTraceSelector *v1.StackTraceSelector `protobuf:"bytes,6,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"`
}

func (x *SelectMergeProfileRequest) Reset() {
	*x = SelectMergeProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectMergeProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectMergeProfileRequest) ProtoMessage() {}

func (x *SelectMergeProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectMergeProfileRequest.ProtoReflect.Descriptor instead.
func (*SelectMergeProfileRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{13}
}

func (x *SelectMergeProfileRequest) GetProfileTypeID() string {
	if x != nil {
		return x.ProfileTypeID
	}
	return ""
}

func (x *SelectMergeProfileRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectMergeProfileRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectMergeProfileRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectMergeProfileRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

func (x *SelectMergeProfileRequest) GetStackTraceSelector() *v1.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

type SelectSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileTypeID string `protobuf:"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3" json:"profile_typeID,omitempty"`
	LabelSelector string `protobuf:"bytes,2,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End     int64    `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	GroupBy []string `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Step    float64  `protobuf:"fixed64,6,opt,name=step,proto3" json:"step,omitempty"`
	// Query resolution step width in seconds
	Aggregation *v1.TimeSeriesAggregationType `protobuf:"varint,7,opt,name=aggregation,proto3,enum=types.v1.TimeSeriesAggregationType,oneof" json:"aggregation,omitempty"`
	// Select stack traces that match the provided selector.
	StackTraceSelector *v1.StackTraceSelector `protobuf:"bytes,8,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"`
}

func (x *SelectSeriesRequest) Reset() {
	*x = SelectSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSeriesRequest) ProtoMessage() {}

func (x *SelectSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSeriesRequest.ProtoReflect.Descriptor instead.
func (*SelectSeriesRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{14}
}

func (x *SelectSeriesRequest) GetProfileTypeID() string {
	if x != nil {
		return x.ProfileTypeID
	}
	return ""
}

func (x *SelectSeriesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectSeriesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectSeriesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectSeriesRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SelectSeriesRequest) GetStep() float64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *SelectSeriesRequest) GetAggregation() v1.TimeSeriesAggregationType {
	if x != nil && x.Aggregation != nil {
		return *x.Aggregation
	}
	return v1.TimeSeriesAggregationType(0)
}

func (x *SelectSeriesRequest) GetStackTraceSelector() *v1.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

type SelectSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*v1.Series `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *SelectSeriesResponse) Reset() {
	*x = SelectSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSeriesResponse) ProtoMessage() {}

func (x *SelectSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSeriesResponse.ProtoReflect.Descriptor instead.
func (*SelectSeriesResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{15}
}

func (x *SelectSeriesResponse) GetSeries() []*v1.Series {
	if x != nil {
		return x.Series
	}
	return nil
}

type AnalyzeQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                         QueryType                      `protobuf:"varint,1,opt,name=type,proto3,enum=querier.v1.QueryType" json:"type,omitempty"`
	ProfileTypesRequest          *ProfileTypesRequest           `protobuf:"bytes,2,opt,name=profile_types_request,json=profileTypesRequest,proto3" json:"profile_types_request,omitempty"`
	LabelNamesRequest            *v1.LabelNamesRequest          `protobuf:"bytes,3,opt,name=label_names_request,json=labelNamesRequest,proto3" json:"label_names_request,omitempty"`
	LabelValuesRequest           *v1.LabelValuesRequest         `protobuf:"bytes,4,opt,name=label_values_request,json=labelValuesRequest,proto3" json:"label_values_request,omitempty"`
	SeriesRequest                *SeriesRequest                 `protobuf:"bytes,5,opt,name=series_request,json=seriesRequest,proto3" json:"series_request,omitempty"`
	FlamegraphRequest            *SelectMergeStacktracesRequest `protobuf:"bytes,6,opt,name=flamegraph_request,json=flamegraphRequest,proto3" json:"flamegraph_request,omitempty"`
	SpanProfileFlamegraphRequest *SelectMergeSpanProfileRequest `protobuf:"bytes,7,opt,name=span_profile_flamegraph_request,json=spanProfileFlamegraphRequest,proto3" json:"span_profile_flamegraph_request,omitempty"`
	PprofRequest                 *SelectMergeProfileRequest     `protobuf:"bytes,8,opt,name=pprof_request,json=pprofRequest,proto3" json:"pprof_request,omitempty"`
	TimeseriesRequest            *SelectSeriesRequest           `protobuf:"bytes,9,opt,name=timeseries_request,json=timeseriesRequest,proto3" json:"timeseries_request,omitempty"`
	DiffRequest                  *DiffRequest                   `protobuf:"bytes,10,opt,name=diff_request,json=diffRequest,proto3" json:"diff_request,omitempty"`
}

func (x *AnalyzeQueryRequest) Reset() {
	*x = AnalyzeQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeQueryRequest) ProtoMessage() {}

func (x *AnalyzeQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeQueryRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeQueryRequest) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{16}
}

func (x *AnalyzeQueryRequest) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_PROFILE_TYPES
}

func (x *AnalyzeQueryRequest) GetProfileTypesRequest() *ProfileTypesRequest {
	if x != nil {
		return x.ProfileTypesRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetLabelNamesRequest() *v1.LabelNamesRequest {
	if x != nil {
		return x.LabelNamesRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetLabelValuesRequest() *v1.LabelValuesRequest {
	if x != nil {
		return x.LabelValuesRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetSeriesRequest() *SeriesRequest {
	if x != nil {
		return x.SeriesRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetFlamegraphRequest() *SelectMergeStacktracesRequest {
	if x != nil {
		return x.FlamegraphRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetSpanProfileFlamegraphRequest() *SelectMergeSpanProfileRequest {
	if x != nil {
		return x.SpanProfileFlamegraphRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetPprofRequest() *SelectMergeProfileRequest {
	if x != nil {
		return x.PprofRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetTimeseriesRequest() *SelectSeriesRequest {
	if x != nil {
		return x.TimeseriesRequest
	}
	return nil
}

func (x *AnalyzeQueryRequest) GetDiffRequest() *DiffRequest {
	if x != nil {
		return x.DiffRequest
	}
	return nil
}

type AnalyzeQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryValidationErrors []string      `protobuf:"bytes,1,rep,name=queryValidationErrors,proto3" json:"queryValidationErrors,omitempty"`
	QueryScopes           []*QueryScope `protobuf:"bytes,2,rep,name=query_scopes,json=queryScopes,proto3" json:"query_scopes,omitempty"` // detailed view of what the query will require
	QueryImpact           *QueryImpact  `protobuf:"bytes,3,opt,name=query_impact,json=queryImpact,proto3" json:"query_impact,omitempty"` // summary of the query impact / performance
}

func (x *AnalyzeQueryResponse) Reset() {
	*x = AnalyzeQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeQueryResponse) ProtoMessage() {}

func (x *AnalyzeQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeQueryResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeQueryResponse) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{17}
}

func (x *AnalyzeQueryResponse) GetQueryValidationErrors() []string {
	if x != nil {
		return x.QueryValidationErrors
	}
	return nil
}

func (x *AnalyzeQueryResponse) GetQueryScopes() []*QueryScope {
	if x != nil {
		return x.QueryScopes
	}
	return nil
}

func (x *AnalyzeQueryResponse) GetQueryImpact() *QueryImpact {
	if x != nil {
		return x.QueryImpact
	}
	return nil
}

type QueryScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType  string `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`     // high level, e.g., "short term" or "long term" storage
	ComponentCount int64  `protobuf:"varint,2,opt,name=component_count,json=componentCount,proto3" json:"component_count,omitempty"` // how many components of this type will work on the query
	NumBlocks      int64  `protobuf:"varint,3,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	NumSeries      int64  `protobuf:"varint,4,opt,name=num_series,json=numSeries,proto3" json:"num_series,omitempty"`
	NumProfiles    int64  `protobuf:"varint,5,opt,name=num_profiles,json=numProfiles,proto3" json:"num_profiles,omitempty"`
	NumSamples     int64  `protobuf:"varint,6,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
	IndexBytes     int64  `protobuf:"varint,7,opt,name=index_bytes,json=indexBytes,proto3" json:"index_bytes,omitempty"`
	ProfileBytes   int64  `protobuf:"varint,8,opt,name=profile_bytes,json=profileBytes,proto3" json:"profile_bytes,omitempty"`
	SymbolBytes    int64  `protobuf:"varint,9,opt,name=symbol_bytes,json=symbolBytes,proto3" json:"symbol_bytes,omitempty"`
}

func (x *QueryScope) Reset() {
	*x = QueryScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryScope) ProtoMessage() {}

func (x *QueryScope) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryScope.ProtoReflect.Descriptor instead.
func (*QueryScope) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{18}
}

func (x *QueryScope) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *QueryScope) GetComponentCount() int64 {
	if x != nil {
		return x.ComponentCount
	}
	return 0
}

func (x *QueryScope) GetNumBlocks() int64 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *QueryScope) GetNumSeries() int64 {
	if x != nil {
		return x.NumSeries
	}
	return 0
}

func (x *QueryScope) GetNumProfiles() int64 {
	if x != nil {
		return x.NumProfiles
	}
	return 0
}

func (x *QueryScope) GetNumSamples() int64 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

func (x *QueryScope) GetIndexBytes() int64 {
	if x != nil {
		return x.IndexBytes
	}
	return 0
}

func (x *QueryScope) GetProfileBytes() int64 {
	if x != nil {
		return x.ProfileBytes
	}
	return 0
}

func (x *QueryScope) GetSymbolBytes() int64 {
	if x != nil {
		return x.SymbolBytes
	}
	return 0
}

type QueryImpact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               QueryImpactType `protobuf:"varint,1,opt,name=type,proto3,enum=querier.v1.QueryImpactType" json:"type,omitempty"`
	SubQueryCount      int64           `protobuf:"varint,2,opt,name=sub_query_count,json=subQueryCount,proto3" json:"sub_query_count,omitempty"`
	TotalBytesRead     int64           `protobuf:"varint,3,opt,name=total_bytes_read,json=totalBytesRead,proto3" json:"total_bytes_read,omitempty"`
	EstimatedTimeNanos int64           `protobuf:"varint,4,opt,name=estimated_time_nanos,json=estimatedTimeNanos,proto3" json:"estimated_time_nanos,omitempty"` // not sure how we can do this yet, but it would be a formula based on the query scopes above
}

func (x *QueryImpact) Reset() {
	*x = QueryImpact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querier_v1_querier_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImpact) ProtoMessage() {}

func (x *QueryImpact) ProtoReflect() protoreflect.Message {
	mi := &file_querier_v1_querier_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImpact.ProtoReflect.Descriptor instead.
func (*QueryImpact) Descriptor() ([]byte, []int) {
	return file_querier_v1_querier_proto_rawDescGZIP(), []int{19}
}

func (x *QueryImpact) GetType() QueryImpactType {
	if x != nil {
		return x.Type
	}
	return QueryImpactType_LOW
}

func (x *QueryImpact) GetSubQueryCount() int64 {
	if x != nil {
		return x.SubQueryCount
	}
	return 0
}

func (x *QueryImpact) GetTotalBytesRead() int64 {
	if x != nil {
		return x.TotalBytesRead
	}
	return 0
}

func (x *QueryImpact) GetEstimatedTimeNanos() int64 {
	if x != nil {
		return x.EstimatedTimeNanos
	}
	return 0
}

var File_querier_v1_querier_proto protoreflect.FileDescriptor

var file_querier_v1_querier_proto_rawDesc = []byte{
	0x0a, 0x18, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x41,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x65,
	0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x1e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x66,
	0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x22, 0xea, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x58, 0x0a, 0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0a,
	0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x6c,
	0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x6d,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x6d,
	0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x7e, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x6c, 0x66, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x61, 0x6d, 0x65,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x65, 0x66, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x65, 0x66, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x1f, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x19, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x53, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x12,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x84, 0x03, 0x0a,
	0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x01, 0x52, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x98, 0x06, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x12,
	0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x11, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x73, 0x70, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x70, 0x72, 0x6f,
	0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc3, 0x01, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x39, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x2a, 0xa2, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x50, 0x48, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x41,
	0x50, 0x48, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x50, 0x52, 0x4f, 0x46, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x46, 0x46, 0x10, 0x08, 0x2a, 0x30, 0x0a, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x32, 0xbb, 0x07, 0x0a,
	0x0e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xab, 0x01, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x16, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_querier_v1_querier_proto_rawDescOnce sync.Once
	file_querier_v1_querier_proto_rawDescData = file_querier_v1_querier_proto_rawDesc
)

func file_querier_v1_querier_proto_rawDescGZIP() []byte {
	file_querier_v1_querier_proto_rawDescOnce.Do(func() {
		file_querier_v1_querier_proto_rawDescData = protoimpl.X.CompressGZIP(file_querier_v1_querier_proto_rawDescData)
	})
	return file_querier_v1_querier_proto_rawDescData
}

var file_querier_v1_querier_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_querier_v1_querier_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_querier_v1_querier_proto_goTypes = []interface{}{
	(QueryType)(0),                         // 0: querier.v1.QueryType
	(QueryImpactType)(0),                   // 1: querier.v1.QueryImpactType
	(*ProfileTypesRequest)(nil),            // 2: querier.v1.ProfileTypesRequest
	(*ProfileTypesResponse)(nil),           // 3: querier.v1.ProfileTypesResponse
	(*SeriesRequest)(nil),                  // 4: querier.v1.SeriesRequest
	(*SeriesResponse)(nil),                 // 5: querier.v1.SeriesResponse
	(*SelectMergeStacktracesRequest)(nil),  // 6: querier.v1.SelectMergeStacktracesRequest
	(*SelectMergeStacktracesResponse)(nil), // 7: querier.v1.SelectMergeStacktracesResponse
	(*SelectMergeSpanProfileRequest)(nil),  // 8: querier.v1.SelectMergeSpanProfileRequest
	(*SelectMergeSpanProfileResponse)(nil), // 9: querier.v1.SelectMergeSpanProfileResponse
	(*DiffRequest)(nil),                    // 10: querier.v1.DiffRequest
	(*DiffResponse)(nil),                   // 11: querier.v1.DiffResponse
	(*FlameGraph)(nil),                     // 12: querier.v1.FlameGraph
	(*FlameGraphDiff)(nil),                 // 13: querier.v1.FlameGraphDiff
	(*Level)(nil),                          // 14: querier.v1.Level
	(*SelectMergeProfileRequest)(nil),      // 15: querier.v1.SelectMergeProfileRequest
	(*SelectSeriesRequest)(nil),            // 16: querier.v1.SelectSeriesRequest
	(*SelectSeriesResponse)(nil),           // 17: querier.v1.SelectSeriesResponse
	(*AnalyzeQueryRequest)(nil),            // 18: querier.v1.AnalyzeQueryRequest
	(*AnalyzeQueryResponse)(nil),           // 19: querier.v1.AnalyzeQueryResponse
	(*QueryScope)(nil),                     // 20: querier.v1.QueryScope
	(*QueryImpact)(nil),                    // 21: querier.v1.QueryImpact
	(*v1.ProfileType)(nil),                 // 22: types.v1.ProfileType
	(*v1.Labels)(nil),                      // 23: types.v1.Labels
	(*v1.StackTraceSelector)(nil),          // 24: types.v1.StackTraceSelector
	(v1.TimeSeriesAggregationType)(0),      // 25: types.v1.TimeSeriesAggregationType
	(*v1.Series)(nil),                      // 26: types.v1.Series
	(*v1.LabelNamesRequest)(nil),           // 27: types.v1.LabelNamesRequest
	(*v1.LabelValuesRequest)(nil),          // 28: types.v1.LabelValuesRequest
	(*v1.GetProfileStatsRequest)(nil),      // 29: types.v1.GetProfileStatsRequest
	(*v1.LabelValuesResponse)(nil),         // 30: types.v1.LabelValuesResponse
	(*v1.LabelNamesResponse)(nil),          // 31: types.v1.LabelNamesResponse
	(*v11.Profile)(nil),                    // 32: google.v1.Profile
	(*v1.GetProfileStatsResponse)(nil),     // 33: types.v1.GetProfileStatsResponse
}
var file_querier_v1_querier_proto_depIdxs = []int32{
	22, // 0: querier.v1.ProfileTypesResponse.profile_types:type_name -> types.v1.ProfileType
	23, // 1: querier.v1.SeriesResponse.labels_set:type_name -> types.v1.Labels
	12, // 2: querier.v1.SelectMergeStacktracesResponse.flamegraph:type_name -> querier.v1.FlameGraph
	12, // 3: querier.v1.SelectMergeSpanProfileResponse.flamegraph:type_name -> querier.v1.FlameGraph
	6,  // 4: querier.v1.DiffRequest.left:type_name -> querier.v1.SelectMergeStacktracesRequest
	6,  // 5: querier.v1.DiffRequest.right:type_name -> querier.v1.SelectMergeStacktracesRequest
	13, // 6: querier.v1.DiffResponse.flamegraph:type_name -> querier.v1.FlameGraphDiff
	14, // 7: querier.v1.FlameGraph.levels:type_name -> querier.v1.Level
	14, // 8: querier.v1.FlameGraphDiff.levels:type_name -> querier.v1.Level
	24, // 9: querier.v1.SelectMergeProfileRequest.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	25, // 10: querier.v1.SelectSeriesRequest.aggregation:type_name -> types.v1.TimeSeriesAggregationType
	24, // 11: querier.v1.SelectSeriesRequest.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	26, // 12: querier.v1.SelectSeriesResponse.series:type_name -> types.v1.Series
	0,  // 13: querier.v1.AnalyzeQueryRequest.type:type_name -> querier.v1.QueryType
	2,  // 14: querier.v1.AnalyzeQueryRequest.profile_types_request:type_name -> querier.v1.ProfileTypesRequest
	27, // 15: querier.v1.AnalyzeQueryRequest.label_names_request:type_name -> types.v1.LabelNamesRequest
	28, // 16: querier.v1.AnalyzeQueryRequest.label_values_request:type_name -> types.v1.LabelValuesRequest
	4,  // 17: querier.v1.AnalyzeQueryRequest.series_request:type_name -> querier.v1.SeriesRequest
	6,  // 18: querier.v1.AnalyzeQueryRequest.flamegraph_request:type_name -> querier.v1.SelectMergeStacktracesRequest
	8,  // 19: querier.v1.AnalyzeQueryRequest.span_profile_flamegraph_request:type_name -> querier.v1.SelectMergeSpanProfileRequest
	15, // 20: querier.v1.AnalyzeQueryRequest.pprof_request:type_name -> querier.v1.SelectMergeProfileRequest
	16, // 21: querier.v1.AnalyzeQueryRequest.timeseries_request:type_name -> querier.v1.SelectSeriesRequest
	10, // 22: querier.v1.AnalyzeQueryRequest.diff_request:type_name -> querier.v1.DiffRequest
	20, // 23: querier.v1.AnalyzeQueryResponse.query_scopes:type_name -> querier.v1.QueryScope
	21, // 24: querier.v1.AnalyzeQueryResponse.query_impact:type_name -> querier.v1.QueryImpact
	1,  // 25: querier.v1.QueryImpact.type:type_name -> querier.v1.QueryImpactType
	2,  // 26: querier.v1.QuerierService.ProfileTypes:input_type -> querier.v1.ProfileTypesRequest
	28, // 27: querier.v1.QuerierService.LabelValues:input_type -> types.v1.LabelValuesRequest
	27, // 28: querier.v1.QuerierService.LabelNames:input_type -> types.v1.LabelNamesRequest
	4,  // 29: querier.v1.QuerierService.Series:input_type -> querier.v1.SeriesRequest
	6,  // 30: querier.v1.QuerierService.SelectMergeStacktraces:input_type -> querier.v1.SelectMergeStacktracesRequest
	8,  // 31: querier.v1.QuerierService.SelectMergeSpanProfile:input_type -> querier.v1.SelectMergeSpanProfileRequest
	15, // 32: querier.v1.QuerierService.SelectMergeProfile:input_type -> querier.v1.SelectMergeProfileRequest
	16, // 33: querier.v1.QuerierService.SelectSeries:input_type -> querier.v1.SelectSeriesRequest
	10, // 34: querier.v1.QuerierService.Diff:input_type -> querier.v1.DiffRequest
	29, // 35: querier.v1.QuerierService.GetProfileStats:input_type -> types.v1.GetProfileStatsRequest
	18, // 36: querier.v1.QuerierService.AnalyzeQuery:input_type -> querier.v1.AnalyzeQueryRequest
	3,  // 37: querier.v1.QuerierService.ProfileTypes:output_type -> querier.v1.ProfileTypesResponse
	30, // 38: querier.v1.QuerierService.LabelValues:output_type -> types.v1.LabelValuesResponse
	31, // 39: querier.v1.QuerierService.LabelNames:output_type -> types.v1.LabelNamesResponse
	5,  // 40: querier.v1.QuerierService.Series:output_type -> querier.v1.SeriesResponse
	7,  // 41: querier.v1.QuerierService.SelectMergeStacktraces:output_type -> querier.v1.SelectMergeStacktracesResponse
	9,  // 42: querier.v1.QuerierService.SelectMergeSpanProfile:output_type -> querier.v1.SelectMergeSpanProfileResponse
	32, // 43: querier.v1.QuerierService.SelectMergeProfile:output_type -> google.v1.Profile
	17, // 44: querier.v1.QuerierService.SelectSeries:output_type -> querier.v1.SelectSeriesResponse
	11, // 45: querier.v1.QuerierService.Diff:output_type -> querier.v1.DiffResponse
	33, // 46: querier.v1.QuerierService.GetProfileStats:output_type -> types.v1.GetProfileStatsResponse
	19, // 47: querier.v1.QuerierService.AnalyzeQuery:output_type -> querier.v1.AnalyzeQueryResponse
	37, // [37:48] is the sub-list for method output_type
	26, // [26:37] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_querier_v1_querier_proto_init() }
func file_querier_v1_querier_proto_init() {
	if File_querier_v1_querier_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_querier_v1_querier_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMergeStacktracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMergeStacktracesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMergeSpanProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMergeSpanProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlameGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlameGraphDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectMergeProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querier_v1_querier_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImpact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_querier_v1_querier_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_querier_v1_querier_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_querier_v1_querier_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_querier_v1_querier_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_querier_v1_querier_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_querier_v1_querier_proto_goTypes,
		DependencyIndexes: file_querier_v1_querier_proto_depIdxs,
		EnumInfos:         file_querier_v1_querier_proto_enumTypes,
		MessageInfos:      file_querier_v1_querier_proto_msgTypes,
	}.Build()
	File_querier_v1_querier_proto = out.File
	file_querier_v1_querier_proto_rawDesc = nil
	file_querier_v1_querier_proto_goTypes = nil
	file_querier_v1_querier_proto_depIdxs = nil
}
