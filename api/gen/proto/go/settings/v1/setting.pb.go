// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: settings/v1/setting.proto

package settingsv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CollectionRuleAction is the action to be performed on relabeling.
// aligns to https://github.com/prometheus/prometheus/blob/f24ce00320f8605add7c7c5e69f722193c066672/model/relabel/relabel.go#L40-L66
type CollectionRuleAction int32

const (
	CollectionRuleAction_COLLECTION_RULE_ACTION_UNSPECIFIED CollectionRuleAction = 0
	// Replace performs a regex replacement.
	CollectionRuleAction_COLLECTION_RULE_ACTION_REPLACE CollectionRuleAction = 1
	// Keep drops targets for which the input does not match the regex.
	CollectionRuleAction_COLLECTION_RULE_ACTION_KEEP CollectionRuleAction = 2
	// Drop drops targets for which the input does match the regex.
	CollectionRuleAction_COLLECTION_RULE_ACTION_DROP CollectionRuleAction = 3
	// KeepEqual drops targets for which the input does not match the target.
	CollectionRuleAction_COLLECTION_RULE_ACTION_KEEP_EQUAL CollectionRuleAction = 4
	// DropEqual drops targets for which the input does match the target.
	CollectionRuleAction_COLLECTION_RULE_ACTION_DROP_EQUAL CollectionRuleAction = 5
	// HashMod sets a label to the modulus of a hash of labels.
	CollectionRuleAction_COLLECTION_RULE_ACTION_HASHMOD CollectionRuleAction = 6
	// LabelMap copies labels to other labelnames based on a regex.
	CollectionRuleAction_COLLECTION_RULE_ACTION_LABELMAP CollectionRuleAction = 7
	// LabelDrop drops any label matching the regex.
	CollectionRuleAction_COLLECTION_RULE_ACTION_LABELDROP CollectionRuleAction = 8
	// LabelKeep drops any label not matching the regex.
	CollectionRuleAction_COLLECTION_RULE_ACTION_LABELKEEP CollectionRuleAction = 9
	// Lowercase maps input letters to their lower case.
	CollectionRuleAction_COLLECTION_RULE_ACTION_LOWERCASE CollectionRuleAction = 10
	// Uppercase maps input letters to their upper case.
	CollectionRuleAction_COLLECTION_RULE_ACTION_UPPERCASE CollectionRuleAction = 11
)

// Enum value maps for CollectionRuleAction.
var (
	CollectionRuleAction_name = map[int32]string{
		0:  "COLLECTION_RULE_ACTION_UNSPECIFIED",
		1:  "COLLECTION_RULE_ACTION_REPLACE",
		2:  "COLLECTION_RULE_ACTION_KEEP",
		3:  "COLLECTION_RULE_ACTION_DROP",
		4:  "COLLECTION_RULE_ACTION_KEEP_EQUAL",
		5:  "COLLECTION_RULE_ACTION_DROP_EQUAL",
		6:  "COLLECTION_RULE_ACTION_HASHMOD",
		7:  "COLLECTION_RULE_ACTION_LABELMAP",
		8:  "COLLECTION_RULE_ACTION_LABELDROP",
		9:  "COLLECTION_RULE_ACTION_LABELKEEP",
		10: "COLLECTION_RULE_ACTION_LOWERCASE",
		11: "COLLECTION_RULE_ACTION_UPPERCASE",
	}
	CollectionRuleAction_value = map[string]int32{
		"COLLECTION_RULE_ACTION_UNSPECIFIED": 0,
		"COLLECTION_RULE_ACTION_REPLACE":     1,
		"COLLECTION_RULE_ACTION_KEEP":        2,
		"COLLECTION_RULE_ACTION_DROP":        3,
		"COLLECTION_RULE_ACTION_KEEP_EQUAL":  4,
		"COLLECTION_RULE_ACTION_DROP_EQUAL":  5,
		"COLLECTION_RULE_ACTION_HASHMOD":     6,
		"COLLECTION_RULE_ACTION_LABELMAP":    7,
		"COLLECTION_RULE_ACTION_LABELDROP":   8,
		"COLLECTION_RULE_ACTION_LABELKEEP":   9,
		"COLLECTION_RULE_ACTION_LOWERCASE":   10,
		"COLLECTION_RULE_ACTION_UPPERCASE":   11,
	}
)

func (x CollectionRuleAction) Enum() *CollectionRuleAction {
	p := new(CollectionRuleAction)
	*p = x
	return p
}

func (x CollectionRuleAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionRuleAction) Descriptor() protoreflect.EnumDescriptor {
	return file_settings_v1_setting_proto_enumTypes[0].Descriptor()
}

func (CollectionRuleAction) Type() protoreflect.EnumType {
	return &file_settings_v1_setting_proto_enumTypes[0]
}

func (x CollectionRuleAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionRuleAction.Descriptor instead.
func (CollectionRuleAction) EnumDescriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{0}
}

type GetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{0}
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*Setting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{1}
}

func (x *GetSettingsResponse) GetSettings() []*Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type SetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *SetSettingsRequest) Reset() {
	*x = SetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingsRequest) ProtoMessage() {}

func (x *SetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{2}
}

func (x *SetSettingsRequest) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type SetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *SetSettingsResponse) Reset() {
	*x = SetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingsResponse) ProtoMessage() {}

func (x *SetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingsResponse.ProtoReflect.Descriptor instead.
func (*SetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{3}
}

func (x *SetSettingsResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ModifiedAt int64  `protobuf:"varint,3,opt,name=modifiedAt,proto3" json:"modifiedAt,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{4}
}

func (x *Setting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Setting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Setting) GetModifiedAt() int64 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

// CollectionRule is the configuration for relabeling of target label sets.
// aligns to https://github.com/prometheus/prometheus/blob/f24ce00320f8605add7c7c5e69f722193c066672/model/relabel/relabel.go#L82C1-L100C2
type CollectionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// A list of labels from which values are taken and concatenated
	// with the configured separator in order.
	SourceLabels []string `protobuf:"bytes,2,rep,name=source_labels,json=sourceLabels,proto3" json:"source_labels,omitempty"`
	// separator is the string between concatenated values from the source labels.
	Separator *string `protobuf:"bytes,3,opt,name=separator,proto3,oneof" json:"separator,omitempty"`
	// regex against which the concatenation is matched.
	Regex *string `protobuf:"bytes,4,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	// modulus to take of the hash of concatenated values from the source labels.
	Modulus *uint64 `protobuf:"varint,5,opt,name=modulus,proto3,oneof" json:"modulus,omitempty"`
	// target_label is the label to which the resulting string is written in a replacement.
	// Regexp interpolation is allowed for the replace action.
	TargetLabel *string `protobuf:"bytes,6,opt,name=target_label,json=targetLabel,proto3,oneof" json:"target_label,omitempty"`
	// replacement is the regex replacement pattern to be used.
	Replacement *string `protobuf:"bytes,7,opt,name=replacement,proto3,oneof" json:"replacement,omitempty"`
	// action is the action to be performed for the relabeling.
	Action CollectionRuleAction `protobuf:"varint,8,opt,name=action,proto3,enum=settings.v1.CollectionRuleAction" json:"action,omitempty"`
}

func (x *CollectionRule) Reset() {
	*x = CollectionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRule) ProtoMessage() {}

func (x *CollectionRule) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRule.ProtoReflect.Descriptor instead.
func (*CollectionRule) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionRule) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CollectionRule) GetSourceLabels() []string {
	if x != nil {
		return x.SourceLabels
	}
	return nil
}

func (x *CollectionRule) GetSeparator() string {
	if x != nil && x.Separator != nil {
		return *x.Separator
	}
	return ""
}

func (x *CollectionRule) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *CollectionRule) GetModulus() uint64 {
	if x != nil && x.Modulus != nil {
		return *x.Modulus
	}
	return 0
}

func (x *CollectionRule) GetTargetLabel() string {
	if x != nil && x.TargetLabel != nil {
		return *x.TargetLabel
	}
	return ""
}

func (x *CollectionRule) GetReplacement() string {
	if x != nil && x.Replacement != nil {
		return *x.Replacement
	}
	return ""
}

func (x *CollectionRule) GetAction() CollectionRuleAction {
	if x != nil {
		return x.Action
	}
	return CollectionRuleAction_COLLECTION_RULE_ACTION_UNSPECIFIED
}

type CollectionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*v1.LabelPair `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *CollectionTarget) Reset() {
	*x = CollectionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionTarget) ProtoMessage() {}

func (x *CollectionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionTarget.ProtoReflect.Descriptor instead.
func (*CollectionTarget) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{6}
}

func (x *CollectionTarget) GetLabels() []*v1.LabelPair {
	if x != nil {
		return x.Labels
	}
	return nil
}

// CollectionInstance represents a single instance of the collection agent (generally Grafana Alloy)
type CollectionInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string              `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Targets     []*CollectionTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	LastUpdated int64               `protobuf:"varint,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *CollectionInstance) Reset() {
	*x = CollectionInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInstance) ProtoMessage() {}

func (x *CollectionInstance) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInstance.ProtoReflect.Descriptor instead.
func (*CollectionInstance) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{7}
}

func (x *CollectionInstance) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CollectionInstance) GetTargets() []*CollectionTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *CollectionInstance) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type CollectionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Status, ID
	//
	// Types that are assignable to Payload:
	//
	//	*CollectionMessage_PayloadSubscribe
	//	*CollectionMessage_PayloadUnsubscribe
	//	*CollectionMessage_PayloadData
	//	*CollectionMessage_PayloadRuleInsert
	//	*CollectionMessage_PayloadRuleDelete
	Payload isCollectionMessage_Payload `protobuf_oneof:"payload"`
}

func (x *CollectionMessage) Reset() {
	*x = CollectionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionMessage) ProtoMessage() {}

func (x *CollectionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionMessage.ProtoReflect.Descriptor instead.
func (*CollectionMessage) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{8}
}

func (m *CollectionMessage) GetPayload() isCollectionMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CollectionMessage) GetPayloadSubscribe() *CollectionPayloadSubscribe {
	if x, ok := x.GetPayload().(*CollectionMessage_PayloadSubscribe); ok {
		return x.PayloadSubscribe
	}
	return nil
}

func (x *CollectionMessage) GetPayloadUnsubscribe() *CollectionPayloadSubscribe {
	if x, ok := x.GetPayload().(*CollectionMessage_PayloadUnsubscribe); ok {
		return x.PayloadUnsubscribe
	}
	return nil
}

func (x *CollectionMessage) GetPayloadData() *CollectionPayloadData {
	if x, ok := x.GetPayload().(*CollectionMessage_PayloadData); ok {
		return x.PayloadData
	}
	return nil
}

func (x *CollectionMessage) GetPayloadRuleInsert() *CollectionPayloadRuleInsert {
	if x, ok := x.GetPayload().(*CollectionMessage_PayloadRuleInsert); ok {
		return x.PayloadRuleInsert
	}
	return nil
}

func (x *CollectionMessage) GetPayloadRuleDelete() *CollectionPayloadRuleDelete {
	if x, ok := x.GetPayload().(*CollectionMessage_PayloadRuleDelete); ok {
		return x.PayloadRuleDelete
	}
	return nil
}

type isCollectionMessage_Payload interface {
	isCollectionMessage_Payload()
}

type CollectionMessage_PayloadSubscribe struct {
	PayloadSubscribe *CollectionPayloadSubscribe `protobuf:"bytes,1,opt,name=payload_subscribe,json=payloadSubscribe,proto3,oneof"`
}

type CollectionMessage_PayloadUnsubscribe struct {
	PayloadUnsubscribe *CollectionPayloadSubscribe `protobuf:"bytes,2,opt,name=payload_unsubscribe,json=payloadUnsubscribe,proto3,oneof"`
}

type CollectionMessage_PayloadData struct {
	PayloadData *CollectionPayloadData `protobuf:"bytes,3,opt,name=payload_data,json=payloadData,proto3,oneof"`
}

type CollectionMessage_PayloadRuleInsert struct {
	PayloadRuleInsert *CollectionPayloadRuleInsert `protobuf:"bytes,4,opt,name=payload_rule_insert,json=payloadRuleInsert,proto3,oneof"`
}

type CollectionMessage_PayloadRuleDelete struct {
	PayloadRuleDelete *CollectionPayloadRuleDelete `protobuf:"bytes,5,opt,name=payload_rule_delete,json=payloadRuleDelete,proto3,oneof"`
}

func (*CollectionMessage_PayloadSubscribe) isCollectionMessage_Payload() {}

func (*CollectionMessage_PayloadUnsubscribe) isCollectionMessage_Payload() {}

func (*CollectionMessage_PayloadData) isCollectionMessage_Payload() {}

func (*CollectionMessage_PayloadRuleInsert) isCollectionMessage_Payload() {}

func (*CollectionMessage_PayloadRuleDelete) isCollectionMessage_Payload() {}

type CollectionPayloadSubscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *CollectionPayloadSubscribe) Reset() {
	*x = CollectionPayloadSubscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionPayloadSubscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionPayloadSubscribe) ProtoMessage() {}

func (x *CollectionPayloadSubscribe) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionPayloadSubscribe.ProtoReflect.Descriptor instead.
func (*CollectionPayloadSubscribe) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{9}
}

func (x *CollectionPayloadSubscribe) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CollectionPayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules     []*CollectionRule     `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Instances []*CollectionInstance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *CollectionPayloadData) Reset() {
	*x = CollectionPayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionPayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionPayloadData) ProtoMessage() {}

func (x *CollectionPayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionPayloadData.ProtoReflect.Descriptor instead.
func (*CollectionPayloadData) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{10}
}

func (x *CollectionPayloadData) GetRules() []*CollectionRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CollectionPayloadData) GetInstances() []*CollectionInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CollectionPayloadRuleInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule  *CollectionRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	After *int64          `protobuf:"varint,2,opt,name=after,proto3,oneof" json:"after,omitempty"`
}

func (x *CollectionPayloadRuleInsert) Reset() {
	*x = CollectionPayloadRuleInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionPayloadRuleInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionPayloadRuleInsert) ProtoMessage() {}

func (x *CollectionPayloadRuleInsert) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionPayloadRuleInsert.ProtoReflect.Descriptor instead.
func (*CollectionPayloadRuleInsert) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{11}
}

func (x *CollectionPayloadRuleInsert) GetRule() *CollectionRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *CollectionPayloadRuleInsert) GetAfter() int64 {
	if x != nil && x.After != nil {
		return *x.After
	}
	return 0
}

type CollectionPayloadRuleDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CollectionPayloadRuleDelete) Reset() {
	*x = CollectionPayloadRuleDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_setting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionPayloadRuleDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionPayloadRuleDelete) ProtoMessage() {}

func (x *CollectionPayloadRuleDelete) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_setting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionPayloadRuleDelete.ProtoReflect.Descriptor instead.
func (*CollectionPayloadRuleDelete) Descriptor() ([]byte, []int) {
	return file_settings_v1_setting_proto_rawDescGZIP(), []int{12}
}

func (x *CollectionPayloadRuleDelete) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_settings_v1_setting_proto protoreflect.FileDescriptor

var file_settings_v1_setting_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x44, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x07, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xf1, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xd3, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22,
	0x89, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x1b, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x2a,
	0xd3, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b,
	0x45, 0x45, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x25, 0x0a,
	0x21, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x4d, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x4d, 0x41, 0x50, 0x10, 0x07, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x44, 0x52, 0x4f,
	0x50, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x12,
	0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x43,
	0x41, 0x53, 0x45, 0x10, 0x0b, 0x32, 0xa9, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x1f, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0xb2, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58,
	0x58, 0xaa, 0x02, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_settings_v1_setting_proto_rawDescOnce sync.Once
	file_settings_v1_setting_proto_rawDescData = file_settings_v1_setting_proto_rawDesc
)

func file_settings_v1_setting_proto_rawDescGZIP() []byte {
	file_settings_v1_setting_proto_rawDescOnce.Do(func() {
		file_settings_v1_setting_proto_rawDescData = protoimpl.X.CompressGZIP(file_settings_v1_setting_proto_rawDescData)
	})
	return file_settings_v1_setting_proto_rawDescData
}

var file_settings_v1_setting_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_settings_v1_setting_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_settings_v1_setting_proto_goTypes = []any{
	(CollectionRuleAction)(0),           // 0: settings.v1.CollectionRuleAction
	(*GetSettingsRequest)(nil),          // 1: settings.v1.GetSettingsRequest
	(*GetSettingsResponse)(nil),         // 2: settings.v1.GetSettingsResponse
	(*SetSettingsRequest)(nil),          // 3: settings.v1.SetSettingsRequest
	(*SetSettingsResponse)(nil),         // 4: settings.v1.SetSettingsResponse
	(*Setting)(nil),                     // 5: settings.v1.Setting
	(*CollectionRule)(nil),              // 6: settings.v1.CollectionRule
	(*CollectionTarget)(nil),            // 7: settings.v1.CollectionTarget
	(*CollectionInstance)(nil),          // 8: settings.v1.CollectionInstance
	(*CollectionMessage)(nil),           // 9: settings.v1.CollectionMessage
	(*CollectionPayloadSubscribe)(nil),  // 10: settings.v1.CollectionPayloadSubscribe
	(*CollectionPayloadData)(nil),       // 11: settings.v1.CollectionPayloadData
	(*CollectionPayloadRuleInsert)(nil), // 12: settings.v1.CollectionPayloadRuleInsert
	(*CollectionPayloadRuleDelete)(nil), // 13: settings.v1.CollectionPayloadRuleDelete
	(*v1.LabelPair)(nil),                // 14: types.v1.LabelPair
}
var file_settings_v1_setting_proto_depIdxs = []int32{
	5,  // 0: settings.v1.GetSettingsResponse.settings:type_name -> settings.v1.Setting
	5,  // 1: settings.v1.SetSettingsRequest.setting:type_name -> settings.v1.Setting
	5,  // 2: settings.v1.SetSettingsResponse.setting:type_name -> settings.v1.Setting
	0,  // 3: settings.v1.CollectionRule.action:type_name -> settings.v1.CollectionRuleAction
	14, // 4: settings.v1.CollectionTarget.labels:type_name -> types.v1.LabelPair
	7,  // 5: settings.v1.CollectionInstance.targets:type_name -> settings.v1.CollectionTarget
	10, // 6: settings.v1.CollectionMessage.payload_subscribe:type_name -> settings.v1.CollectionPayloadSubscribe
	10, // 7: settings.v1.CollectionMessage.payload_unsubscribe:type_name -> settings.v1.CollectionPayloadSubscribe
	11, // 8: settings.v1.CollectionMessage.payload_data:type_name -> settings.v1.CollectionPayloadData
	12, // 9: settings.v1.CollectionMessage.payload_rule_insert:type_name -> settings.v1.CollectionPayloadRuleInsert
	13, // 10: settings.v1.CollectionMessage.payload_rule_delete:type_name -> settings.v1.CollectionPayloadRuleDelete
	6,  // 11: settings.v1.CollectionPayloadData.rules:type_name -> settings.v1.CollectionRule
	8,  // 12: settings.v1.CollectionPayloadData.instances:type_name -> settings.v1.CollectionInstance
	6,  // 13: settings.v1.CollectionPayloadRuleInsert.rule:type_name -> settings.v1.CollectionRule
	1,  // 14: settings.v1.SettingsService.Get:input_type -> settings.v1.GetSettingsRequest
	3,  // 15: settings.v1.SettingsService.Set:input_type -> settings.v1.SetSettingsRequest
	2,  // 16: settings.v1.SettingsService.Get:output_type -> settings.v1.GetSettingsResponse
	4,  // 17: settings.v1.SettingsService.Set:output_type -> settings.v1.SetSettingsResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_settings_v1_setting_proto_init() }
func file_settings_v1_setting_proto_init() {
	if File_settings_v1_setting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_settings_v1_setting_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionPayloadSubscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionPayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionPayloadRuleInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_setting_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CollectionPayloadRuleDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_settings_v1_setting_proto_msgTypes[5].OneofWrappers = []any{}
	file_settings_v1_setting_proto_msgTypes[8].OneofWrappers = []any{
		(*CollectionMessage_PayloadSubscribe)(nil),
		(*CollectionMessage_PayloadUnsubscribe)(nil),
		(*CollectionMessage_PayloadData)(nil),
		(*CollectionMessage_PayloadRuleInsert)(nil),
		(*CollectionMessage_PayloadRuleDelete)(nil),
	}
	file_settings_v1_setting_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settings_v1_setting_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settings_v1_setting_proto_goTypes,
		DependencyIndexes: file_settings_v1_setting_proto_depIdxs,
		EnumInfos:         file_settings_v1_setting_proto_enumTypes,
		MessageInfos:      file_settings_v1_setting_proto_msgTypes,
	}.Build()
	File_settings_v1_setting_proto = out.File
	file_settings_v1_setting_proto_rawDesc = nil
	file_settings_v1_setting_proto_goTypes = nil
	file_settings_v1_setting_proto_depIdxs = nil
}
