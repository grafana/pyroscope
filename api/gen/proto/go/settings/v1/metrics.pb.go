// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: settings/v1/metrics.proto

package settingsv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordingRule2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName           string   `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ServiceName          string   `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ProfileType          string   `protobuf:"bytes,4,opt,name=profile_type,json=profileType,proto3" json:"profile_type,omitempty"`
	Matchers             []string `protobuf:"bytes,5,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string `protobuf:"bytes,6,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []string `protobuf:"bytes,7,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	PrometheusDataSource string   `protobuf:"bytes,8,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
	LastUpdated          int64    `protobuf:"varint,9,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *RecordingRule2) Reset() {
	*x = RecordingRule2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRule2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule2) ProtoMessage() {}

func (x *RecordingRule2) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule2.ProtoReflect.Descriptor instead.
func (*RecordingRule2) Descriptor() ([]byte, []int) {
	return file_settings_v1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *RecordingRule2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule2) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule2) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RecordingRule2) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *RecordingRule2) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule2) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule2) GetExternalLabels() []string {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRule2) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

func (x *RecordingRule2) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type ListRecordingRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRecordingRulesRequest) Reset() {
	*x = ListRecordingRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesRequest) ProtoMessage() {}

func (x *ListRecordingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_metrics_proto_rawDescGZIP(), []int{1}
}

type ListRecordingRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*RecordingRule2 `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListRecordingRulesResponse) Reset() {
	*x = ListRecordingRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesResponse) ProtoMessage() {}

func (x *ListRecordingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *ListRecordingRulesResponse) GetRules() []*RecordingRule2 {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RecordingRuleSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*RecordingRule2 `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RecordingRuleSetting) Reset() {
	*x = RecordingRuleSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRuleSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRuleSetting) ProtoMessage() {}

func (x *RecordingRuleSetting) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRuleSetting.ProtoReflect.Descriptor instead.
func (*RecordingRuleSetting) Descriptor() ([]byte, []int) {
	return file_settings_v1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *RecordingRuleSetting) GetRules() []*RecordingRule2 {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RecordingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the recording rule within the tenant.
	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName     string          `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Matchers       []string        `protobuf:"bytes,3,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy        []string        `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels []*v1.LabelPair `protobuf:"bytes,5,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
}

func (x *RecordingRule) Reset() {
	*x = RecordingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule) ProtoMessage() {}

func (x *RecordingRule) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule.ProtoReflect.Descriptor instead.
func (*RecordingRule) Descriptor() ([]byte, []int) {
	return file_settings_v1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *RecordingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

var File_settings_v1_metrics_proto protoreflect.FileDescriptor

var file_settings_v1_metrics_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0,
	0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x32, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x49, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x32, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x32, 0x80, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb2, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79,
	0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x17, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_settings_v1_metrics_proto_rawDescOnce sync.Once
	file_settings_v1_metrics_proto_rawDescData = file_settings_v1_metrics_proto_rawDesc
)

func file_settings_v1_metrics_proto_rawDescGZIP() []byte {
	file_settings_v1_metrics_proto_rawDescOnce.Do(func() {
		file_settings_v1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_settings_v1_metrics_proto_rawDescData)
	})
	return file_settings_v1_metrics_proto_rawDescData
}

var file_settings_v1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_settings_v1_metrics_proto_goTypes = []any{
	(*RecordingRule2)(nil),             // 0: settings.v1.RecordingRule2
	(*ListRecordingRulesRequest)(nil),  // 1: settings.v1.ListRecordingRulesRequest
	(*ListRecordingRulesResponse)(nil), // 2: settings.v1.ListRecordingRulesResponse
	(*RecordingRuleSetting)(nil),       // 3: settings.v1.RecordingRuleSetting
	(*RecordingRule)(nil),              // 4: settings.v1.RecordingRule
	(*v1.LabelPair)(nil),               // 5: types.v1.LabelPair
}
var file_settings_v1_metrics_proto_depIdxs = []int32{
	0, // 0: settings.v1.ListRecordingRulesResponse.rules:type_name -> settings.v1.RecordingRule2
	0, // 1: settings.v1.RecordingRuleSetting.rules:type_name -> settings.v1.RecordingRule2
	5, // 2: settings.v1.RecordingRule.external_labels:type_name -> types.v1.LabelPair
	1, // 3: settings.v1.RecordingRulesService.ListRecordingRules:input_type -> settings.v1.ListRecordingRulesRequest
	2, // 4: settings.v1.RecordingRulesService.ListRecordingRules:output_type -> settings.v1.ListRecordingRulesResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_settings_v1_metrics_proto_init() }
func file_settings_v1_metrics_proto_init() {
	if File_settings_v1_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_settings_v1_metrics_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRule2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_metrics_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecordingRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_metrics_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecordingRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_metrics_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRuleSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_metrics_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settings_v1_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settings_v1_metrics_proto_goTypes,
		DependencyIndexes: file_settings_v1_metrics_proto_depIdxs,
		MessageInfos:      file_settings_v1_metrics_proto_msgTypes,
	}.Build()
	File_settings_v1_metrics_proto = out.File
	file_settings_v1_metrics_proto_rawDesc = nil
	file_settings_v1_metrics_proto_goTypes = nil
	file_settings_v1_metrics_proto_depIdxs = nil
}
