// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: settings/v1/recording_rules.proto

package settingsv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricType int32

const (
	MetricType_TOTAL MetricType = 0
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "TOTAL",
	}
	MetricType_value = map[string]int32{
		"TOTAL": 0,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_settings_v1_recording_rules_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_settings_v1_recording_rules_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{0}
}

type GetRecordingRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordingRuleRequest) Reset() {
	*x = GetRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingRuleRequest) ProtoMessage() {}

func (x *GetRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{0}
}

func (x *GetRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *RecordingRule         `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordingRuleResponse) Reset() {
	*x = GetRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingRuleResponse) ProtoMessage() {}

func (x *GetRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*GetRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecordingRuleResponse) GetRule() *RecordingRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type ListRecordingRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecordingRulesRequest) Reset() {
	*x = ListRecordingRulesRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecordingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesRequest) ProtoMessage() {}

func (x *ListRecordingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{2}
}

type ListRecordingRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*RecordingRule       `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecordingRulesResponse) Reset() {
	*x = ListRecordingRulesResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecordingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesResponse) ProtoMessage() {}

func (x *ListRecordingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{3}
}

func (x *ListRecordingRulesResponse) GetRules() []*RecordingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type UpsertRecordingRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id of the recording rule. If an id is not provided, this will
	// create a new recording rule. If an id is provided, it will replace the
	// existing recording rule.
	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName     string          `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Matchers       []string        `protobuf:"bytes,3,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy        []string        `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels []*v1.LabelPair `protobuf:"bytes,5,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	// The observed generation of this recording rule. If this value does not
	// match the generation stored in the database, this upsert will be rejected.
	Generation       int64             `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	StacktraceFilter *StacktraceFilter `protobuf:"bytes,7,opt,name=stacktrace_filter,json=stacktraceFilter,proto3,oneof" json:"stacktrace_filter,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpsertRecordingRuleRequest) Reset() {
	*x = UpsertRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordingRuleRequest) ProtoMessage() {}

func (x *UpsertRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*UpsertRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertRecordingRuleRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *UpsertRecordingRuleRequest) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *UpsertRecordingRuleRequest) GetStacktraceFilter() *StacktraceFilter {
	if x != nil {
		return x.StacktraceFilter
	}
	return nil
}

type UpsertRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *RecordingRule         `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertRecordingRuleResponse) Reset() {
	*x = UpsertRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordingRuleResponse) ProtoMessage() {}

func (x *UpsertRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*UpsertRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertRecordingRuleResponse) GetRule() *RecordingRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type DeleteRecordingRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecordingRuleRequest) Reset() {
	*x = DeleteRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleRequest) ProtoMessage() {}

func (x *DeleteRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecordingRuleResponse) Reset() {
	*x = DeleteRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleResponse) ProtoMessage() {}

func (x *DeleteRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{7}
}

type RecordingRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id of the recording rule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the recording rule, this does not necessarily need to be
	// unique.
	MetricName string `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Used in the UI to display what type of profile type this recording rule is
	// generated from.
	//
	// This should be the standard format of:
	//
	//	<name>:<sample-type>:<sample-unit>:<period-type>:<period-unit>
	//
	// For example:
	//
	//	process_cpu:cpu:nanoseconds:cpu:nanoseconds
	ProfileType    string          `protobuf:"bytes,3,opt,name=profile_type,json=profileType,proto3" json:"profile_type,omitempty"`
	Matchers       []string        `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy        []string        `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels []*v1.LabelPair `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	// The observed generation of this recording rule. This value should be
	// provided when making updates to this record, to avoid conflicting
	// concurrent updates.
	Generation int64 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	// The stacktrace filter allows filtering on particular function names in the stacktrace.
	// This allows recording rules to focus on specific functions and calculate their "total"
	// resource usage.
	StacktraceFilter *StacktraceFilter `protobuf:"bytes,8,opt,name=stacktrace_filter,json=stacktraceFilter,proto3,oneof" json:"stacktrace_filter,omitempty"`
	// Provisioned rules are added by config and can't be Upsert or Deleted
	Provisioned   bool `protobuf:"varint,9,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingRule) Reset() {
	*x = RecordingRule{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule) ProtoMessage() {}

func (x *RecordingRule) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule.ProtoReflect.Descriptor instead.
func (*RecordingRule) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{8}
}

func (x *RecordingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *RecordingRule) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRule) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *RecordingRule) GetStacktraceFilter() *StacktraceFilter {
	if x != nil {
		return x.StacktraceFilter
	}
	return nil
}

func (x *RecordingRule) GetProvisioned() bool {
	if x != nil {
		return x.Provisioned
	}
	return false
}

type StacktraceFilter struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	FunctionName  *StacktraceFilterFunctionName `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3,oneof" json:"function_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StacktraceFilter) Reset() {
	*x = StacktraceFilter{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktraceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktraceFilter) ProtoMessage() {}

func (x *StacktraceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacktraceFilter.ProtoReflect.Descriptor instead.
func (*StacktraceFilter) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{9}
}

func (x *StacktraceFilter) GetFunctionName() *StacktraceFilterFunctionName {
	if x != nil {
		return x.FunctionName
	}
	return nil
}

type StacktraceFilterFunctionName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FunctionName  string                 `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	MetricType    MetricType             `protobuf:"varint,2,opt,name=metric_type,json=metricType,proto3,enum=settings.v1.MetricType" json:"metric_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StacktraceFilterFunctionName) Reset() {
	*x = StacktraceFilterFunctionName{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktraceFilterFunctionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktraceFilterFunctionName) ProtoMessage() {}

func (x *StacktraceFilterFunctionName) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacktraceFilterFunctionName.ProtoReflect.Descriptor instead.
func (*StacktraceFilterFunctionName) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{10}
}

func (x *StacktraceFilterFunctionName) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *StacktraceFilterFunctionName) GetMetricType() MetricType {
	if x != nil {
		return x.MetricType
	}
	return MetricType_TOTAL
}

type RecordingRuleStore struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName           string                 `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	PrometheusDataSource string                 `protobuf:"bytes,3,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
	Matchers             []string               `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string               `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []*v1.LabelPair        `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	Generation           int64                  `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	StacktraceFilter     *StacktraceFilter      `protobuf:"bytes,8,opt,name=stacktrace_filter,json=stacktraceFilter,proto3,oneof" json:"stacktrace_filter,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecordingRuleStore) Reset() {
	*x = RecordingRuleStore{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRuleStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRuleStore) ProtoMessage() {}

func (x *RecordingRuleStore) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRuleStore.ProtoReflect.Descriptor instead.
func (*RecordingRuleStore) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{11}
}

func (x *RecordingRuleStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRuleStore) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRuleStore) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

func (x *RecordingRuleStore) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRuleStore) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRuleStore) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRuleStore) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *RecordingRuleStore) GetStacktraceFilter() *StacktraceFilter {
	if x != nil {
		return x.StacktraceFilter
	}
	return nil
}

type RecordingRulesStore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*RecordingRuleStore  `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Generation    int64                  `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingRulesStore) Reset() {
	*x = RecordingRulesStore{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRulesStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRulesStore) ProtoMessage() {}

func (x *RecordingRulesStore) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRulesStore.ProtoReflect.Descriptor instead.
func (*RecordingRulesStore) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{12}
}

func (x *RecordingRulesStore) GetRules() []*RecordingRuleStore {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RecordingRulesStore) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

var File_settings_v1_recording_rules_proto protoreflect.FileDescriptor

const file_settings_v1_recording_rules_proto_rawDesc = "" +
	"\n" +
	"!settings/v1/recording_rules.proto\x12\vsettings.v1\x1a\x14types/v1/types.proto\")\n" +
	"\x17GetRecordingRuleRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"J\n" +
	"\x18GetRecordingRuleResponse\x12.\n" +
	"\x04rule\x18\x01 \x01(\v2\x1a.settings.v1.RecordingRuleR\x04rule\"\x1b\n" +
	"\x19ListRecordingRulesRequest\"N\n" +
	"\x1aListRecordingRulesResponse\x120\n" +
	"\x05rules\x18\x01 \x03(\v2\x1a.settings.v1.RecordingRuleR\x05rules\"\xc9\x02\n" +
	"\x1aUpsertRecordingRuleRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vmetric_name\x18\x02 \x01(\tR\n" +
	"metricName\x12\x1a\n" +
	"\bmatchers\x18\x03 \x03(\tR\bmatchers\x12\x19\n" +
	"\bgroup_by\x18\x04 \x03(\tR\agroupBy\x12<\n" +
	"\x0fexternal_labels\x18\x05 \x03(\v2\x13.types.v1.LabelPairR\x0eexternalLabels\x12\x1e\n" +
	"\n" +
	"generation\x18\x06 \x01(\x03R\n" +
	"generation\x12O\n" +
	"\x11stacktrace_filter\x18\a \x01(\v2\x1d.settings.v1.StacktraceFilterH\x00R\x10stacktraceFilter\x88\x01\x01B\x14\n" +
	"\x12_stacktrace_filter\"M\n" +
	"\x1bUpsertRecordingRuleResponse\x12.\n" +
	"\x04rule\x18\x01 \x01(\v2\x1a.settings.v1.RecordingRuleR\x04rule\",\n" +
	"\x1aDeleteRecordingRuleRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\x1d\n" +
	"\x1bDeleteRecordingRuleResponse\"\x81\x03\n" +
	"\rRecordingRule\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vmetric_name\x18\x02 \x01(\tR\n" +
	"metricName\x12!\n" +
	"\fprofile_type\x18\x03 \x01(\tR\vprofileType\x12\x1a\n" +
	"\bmatchers\x18\x04 \x03(\tR\bmatchers\x12\x19\n" +
	"\bgroup_by\x18\x05 \x03(\tR\agroupBy\x12<\n" +
	"\x0fexternal_labels\x18\x06 \x03(\v2\x13.types.v1.LabelPairR\x0eexternalLabels\x12\x1e\n" +
	"\n" +
	"generation\x18\a \x01(\x03R\n" +
	"generation\x12O\n" +
	"\x11stacktrace_filter\x18\b \x01(\v2\x1d.settings.v1.StacktraceFilterH\x00R\x10stacktraceFilter\x88\x01\x01\x12 \n" +
	"\vprovisioned\x18\t \x01(\bR\vprovisionedB\x14\n" +
	"\x12_stacktrace_filter\"y\n" +
	"\x10StacktraceFilter\x12S\n" +
	"\rfunction_name\x18\x01 \x01(\v2).settings.v1.StacktraceFilterFunctionNameH\x00R\ffunctionName\x88\x01\x01B\x10\n" +
	"\x0e_function_name\"}\n" +
	"\x1cStacktraceFilterFunctionName\x12#\n" +
	"\rfunction_name\x18\x01 \x01(\tR\ffunctionName\x128\n" +
	"\vmetric_type\x18\x02 \x01(\x0e2\x17.settings.v1.MetricTypeR\n" +
	"metricType\"\xf7\x02\n" +
	"\x12RecordingRuleStore\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vmetric_name\x18\x02 \x01(\tR\n" +
	"metricName\x124\n" +
	"\x16prometheus_data_source\x18\x03 \x01(\tR\x14prometheusDataSource\x12\x1a\n" +
	"\bmatchers\x18\x04 \x03(\tR\bmatchers\x12\x19\n" +
	"\bgroup_by\x18\x05 \x03(\tR\agroupBy\x12<\n" +
	"\x0fexternal_labels\x18\x06 \x03(\v2\x13.types.v1.LabelPairR\x0eexternalLabels\x12\x1e\n" +
	"\n" +
	"generation\x18\a \x01(\x03R\n" +
	"generation\x12O\n" +
	"\x11stacktrace_filter\x18\b \x01(\v2\x1d.settings.v1.StacktraceFilterH\x00R\x10stacktraceFilter\x88\x01\x01B\x14\n" +
	"\x12_stacktrace_filter\"l\n" +
	"\x13RecordingRulesStore\x125\n" +
	"\x05rules\x18\x01 \x03(\v2\x1f.settings.v1.RecordingRuleStoreR\x05rules\x12\x1e\n" +
	"\n" +
	"generation\x18\x02 \x01(\x03R\n" +
	"generation*\x17\n" +
	"\n" +
	"MetricType\x12\t\n" +
	"\x05TOTAL\x10\x002\xbb\x03\n" +
	"\x15RecordingRulesService\x12a\n" +
	"\x10GetRecordingRule\x12$.settings.v1.GetRecordingRuleRequest\x1a%.settings.v1.GetRecordingRuleResponse\"\x00\x12g\n" +
	"\x12ListRecordingRules\x12&.settings.v1.ListRecordingRulesRequest\x1a'.settings.v1.ListRecordingRulesResponse\"\x00\x12j\n" +
	"\x13UpsertRecordingRule\x12'.settings.v1.UpsertRecordingRuleRequest\x1a(.settings.v1.UpsertRecordingRuleResponse\"\x00\x12j\n" +
	"\x13DeleteRecordingRule\x12'.settings.v1.DeleteRecordingRuleRequest\x1a(.settings.v1.DeleteRecordingRuleResponse\"\x00B\xb9\x01\n" +
	"\x0fcom.settings.v1B\x13RecordingRulesProtoP\x01ZDgithub.com/grafana/pyroscope/api/gen/proto/go/settings/v1;settingsv1\xa2\x02\x03SXX\xaa\x02\vSettings.V1\xca\x02\vSettings\\V1\xe2\x02\x17Settings\\V1\\GPBMetadata\xea\x02\fSettings::V1b\x06proto3"

var (
	file_settings_v1_recording_rules_proto_rawDescOnce sync.Once
	file_settings_v1_recording_rules_proto_rawDescData []byte
)

func file_settings_v1_recording_rules_proto_rawDescGZIP() []byte {
	file_settings_v1_recording_rules_proto_rawDescOnce.Do(func() {
		file_settings_v1_recording_rules_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_settings_v1_recording_rules_proto_rawDesc), len(file_settings_v1_recording_rules_proto_rawDesc)))
	})
	return file_settings_v1_recording_rules_proto_rawDescData
}

var file_settings_v1_recording_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_settings_v1_recording_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_settings_v1_recording_rules_proto_goTypes = []any{
	(MetricType)(0),                      // 0: settings.v1.MetricType
	(*GetRecordingRuleRequest)(nil),      // 1: settings.v1.GetRecordingRuleRequest
	(*GetRecordingRuleResponse)(nil),     // 2: settings.v1.GetRecordingRuleResponse
	(*ListRecordingRulesRequest)(nil),    // 3: settings.v1.ListRecordingRulesRequest
	(*ListRecordingRulesResponse)(nil),   // 4: settings.v1.ListRecordingRulesResponse
	(*UpsertRecordingRuleRequest)(nil),   // 5: settings.v1.UpsertRecordingRuleRequest
	(*UpsertRecordingRuleResponse)(nil),  // 6: settings.v1.UpsertRecordingRuleResponse
	(*DeleteRecordingRuleRequest)(nil),   // 7: settings.v1.DeleteRecordingRuleRequest
	(*DeleteRecordingRuleResponse)(nil),  // 8: settings.v1.DeleteRecordingRuleResponse
	(*RecordingRule)(nil),                // 9: settings.v1.RecordingRule
	(*StacktraceFilter)(nil),             // 10: settings.v1.StacktraceFilter
	(*StacktraceFilterFunctionName)(nil), // 11: settings.v1.StacktraceFilterFunctionName
	(*RecordingRuleStore)(nil),           // 12: settings.v1.RecordingRuleStore
	(*RecordingRulesStore)(nil),          // 13: settings.v1.RecordingRulesStore
	(*v1.LabelPair)(nil),                 // 14: types.v1.LabelPair
}
var file_settings_v1_recording_rules_proto_depIdxs = []int32{
	9,  // 0: settings.v1.GetRecordingRuleResponse.rule:type_name -> settings.v1.RecordingRule
	9,  // 1: settings.v1.ListRecordingRulesResponse.rules:type_name -> settings.v1.RecordingRule
	14, // 2: settings.v1.UpsertRecordingRuleRequest.external_labels:type_name -> types.v1.LabelPair
	10, // 3: settings.v1.UpsertRecordingRuleRequest.stacktrace_filter:type_name -> settings.v1.StacktraceFilter
	9,  // 4: settings.v1.UpsertRecordingRuleResponse.rule:type_name -> settings.v1.RecordingRule
	14, // 5: settings.v1.RecordingRule.external_labels:type_name -> types.v1.LabelPair
	10, // 6: settings.v1.RecordingRule.stacktrace_filter:type_name -> settings.v1.StacktraceFilter
	11, // 7: settings.v1.StacktraceFilter.function_name:type_name -> settings.v1.StacktraceFilterFunctionName
	0,  // 8: settings.v1.StacktraceFilterFunctionName.metric_type:type_name -> settings.v1.MetricType
	14, // 9: settings.v1.RecordingRuleStore.external_labels:type_name -> types.v1.LabelPair
	10, // 10: settings.v1.RecordingRuleStore.stacktrace_filter:type_name -> settings.v1.StacktraceFilter
	12, // 11: settings.v1.RecordingRulesStore.rules:type_name -> settings.v1.RecordingRuleStore
	1,  // 12: settings.v1.RecordingRulesService.GetRecordingRule:input_type -> settings.v1.GetRecordingRuleRequest
	3,  // 13: settings.v1.RecordingRulesService.ListRecordingRules:input_type -> settings.v1.ListRecordingRulesRequest
	5,  // 14: settings.v1.RecordingRulesService.UpsertRecordingRule:input_type -> settings.v1.UpsertRecordingRuleRequest
	7,  // 15: settings.v1.RecordingRulesService.DeleteRecordingRule:input_type -> settings.v1.DeleteRecordingRuleRequest
	2,  // 16: settings.v1.RecordingRulesService.GetRecordingRule:output_type -> settings.v1.GetRecordingRuleResponse
	4,  // 17: settings.v1.RecordingRulesService.ListRecordingRules:output_type -> settings.v1.ListRecordingRulesResponse
	6,  // 18: settings.v1.RecordingRulesService.UpsertRecordingRule:output_type -> settings.v1.UpsertRecordingRuleResponse
	8,  // 19: settings.v1.RecordingRulesService.DeleteRecordingRule:output_type -> settings.v1.DeleteRecordingRuleResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_settings_v1_recording_rules_proto_init() }
func file_settings_v1_recording_rules_proto_init() {
	if File_settings_v1_recording_rules_proto != nil {
		return
	}
	file_settings_v1_recording_rules_proto_msgTypes[4].OneofWrappers = []any{}
	file_settings_v1_recording_rules_proto_msgTypes[8].OneofWrappers = []any{}
	file_settings_v1_recording_rules_proto_msgTypes[9].OneofWrappers = []any{}
	file_settings_v1_recording_rules_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_settings_v1_recording_rules_proto_rawDesc), len(file_settings_v1_recording_rules_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settings_v1_recording_rules_proto_goTypes,
		DependencyIndexes: file_settings_v1_recording_rules_proto_depIdxs,
		EnumInfos:         file_settings_v1_recording_rules_proto_enumTypes,
		MessageInfos:      file_settings_v1_recording_rules_proto_msgTypes,
	}.Build()
	File_settings_v1_recording_rules_proto = out.File
	file_settings_v1_recording_rules_proto_goTypes = nil
	file_settings_v1_recording_rules_proto_depIdxs = nil
}
