// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: settings/v1/recording_rules.proto

package settingsv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRecordingRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRecordingRulesRequest) Reset() {
	*x = ListRecordingRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesRequest) ProtoMessage() {}

func (x *ListRecordingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{0}
}

type ListRecordingRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*RecordingRule_API `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ListRecordingRulesResponse) Reset() {
	*x = ListRecordingRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecordingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesResponse) ProtoMessage() {}

func (x *ListRecordingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{1}
}

func (x *ListRecordingRulesResponse) GetRules() []*RecordingRule_API {
	if x != nil {
		return x.Rules
	}
	return nil
}

type InsertRecordingRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName           string          `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Matchers             []string        `protobuf:"bytes,2,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string        `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []*v1.LabelPair `protobuf:"bytes,4,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	PrometheusDataSource string          `protobuf:"bytes,5,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
}

func (x *InsertRecordingRuleRequest) Reset() {
	*x = InsertRecordingRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRecordingRuleRequest) ProtoMessage() {}

func (x *InsertRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*InsertRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{2}
}

func (x *InsertRecordingRuleRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *InsertRecordingRuleRequest) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *InsertRecordingRuleRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *InsertRecordingRuleRequest) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *InsertRecordingRuleRequest) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

type InsertRecordingRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *RecordingRule_API `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *InsertRecordingRuleResponse) Reset() {
	*x = InsertRecordingRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRecordingRuleResponse) ProtoMessage() {}

func (x *InsertRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*InsertRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{3}
}

func (x *InsertRecordingRuleResponse) GetRule() *RecordingRule_API {
	if x != nil {
		return x.Rule
	}
	return nil
}

type DeleteRecordingRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRecordingRuleRequest) Reset() {
	*x = DeleteRecordingRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleRequest) ProtoMessage() {}

func (x *DeleteRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRecordingRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRecordingRuleResponse) Reset() {
	*x = DeleteRecordingRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleResponse) ProtoMessage() {}

func (x *DeleteRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{5}
}

type RecordingRule_API struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName           string          `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ProfileType          string          `protobuf:"bytes,3,opt,name=profile_type,json=profileType,proto3" json:"profile_type,omitempty"`
	Matchers             []string        `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string        `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []*v1.LabelPair `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	PrometheusDataSource string          `protobuf:"bytes,7,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
}

func (x *RecordingRule_API) Reset() {
	*x = RecordingRule_API{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRule_API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule_API) ProtoMessage() {}

func (x *RecordingRule_API) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule_API.ProtoReflect.Descriptor instead.
func (*RecordingRule_API) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{6}
}

func (x *RecordingRule_API) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule_API) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule_API) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *RecordingRule_API) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule_API) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule_API) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRule_API) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

type RecordingRule_Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName           string          `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	PrometheusDataSource string          `protobuf:"bytes,3,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
	Matchers             []string        `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string        `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []*v1.LabelPair `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	Generation           int64           `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *RecordingRule_Store) Reset() {
	*x = RecordingRule_Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRule_Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule_Store) ProtoMessage() {}

func (x *RecordingRule_Store) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule_Store.ProtoReflect.Descriptor instead.
func (*RecordingRule_Store) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{7}
}

func (x *RecordingRule_Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule_Store) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule_Store) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

func (x *RecordingRule_Store) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule_Store) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule_Store) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRule_Store) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type RecordingRules_Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules      []*RecordingRule_Store `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Generation int64                  `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *RecordingRules_Store) Reset() {
	*x = RecordingRules_Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRules_Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRules_Store) ProtoMessage() {}

func (x *RecordingRules_Store) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRules_Store.ProtoReflect.Descriptor instead.
func (*RecordingRules_Store) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{8}
}

func (x *RecordingRules_Store) GetRules() []*RecordingRule_Store {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RecordingRules_Store) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

var File_settings_v1_recording_rules_proto protoreflect.FileDescriptor

var file_settings_v1_recording_rules_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x50, 0x49,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3c,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x5f, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xd8, 0x02, 0x0a, 0x15,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb9, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72,
	0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_settings_v1_recording_rules_proto_rawDescOnce sync.Once
	file_settings_v1_recording_rules_proto_rawDescData = file_settings_v1_recording_rules_proto_rawDesc
)

func file_settings_v1_recording_rules_proto_rawDescGZIP() []byte {
	file_settings_v1_recording_rules_proto_rawDescOnce.Do(func() {
		file_settings_v1_recording_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_settings_v1_recording_rules_proto_rawDescData)
	})
	return file_settings_v1_recording_rules_proto_rawDescData
}

var file_settings_v1_recording_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_settings_v1_recording_rules_proto_goTypes = []any{
	(*ListRecordingRulesRequest)(nil),   // 0: settings.v1.ListRecordingRulesRequest
	(*ListRecordingRulesResponse)(nil),  // 1: settings.v1.ListRecordingRulesResponse
	(*InsertRecordingRuleRequest)(nil),  // 2: settings.v1.InsertRecordingRuleRequest
	(*InsertRecordingRuleResponse)(nil), // 3: settings.v1.InsertRecordingRuleResponse
	(*DeleteRecordingRuleRequest)(nil),  // 4: settings.v1.DeleteRecordingRuleRequest
	(*DeleteRecordingRuleResponse)(nil), // 5: settings.v1.DeleteRecordingRuleResponse
	(*RecordingRule_API)(nil),           // 6: settings.v1.RecordingRule_API
	(*RecordingRule_Store)(nil),         // 7: settings.v1.RecordingRule_Store
	(*RecordingRules_Store)(nil),        // 8: settings.v1.RecordingRules_Store
	(*v1.LabelPair)(nil),                // 9: types.v1.LabelPair
}
var file_settings_v1_recording_rules_proto_depIdxs = []int32{
	6, // 0: settings.v1.ListRecordingRulesResponse.rules:type_name -> settings.v1.RecordingRule_API
	9, // 1: settings.v1.InsertRecordingRuleRequest.external_labels:type_name -> types.v1.LabelPair
	6, // 2: settings.v1.InsertRecordingRuleResponse.rule:type_name -> settings.v1.RecordingRule_API
	9, // 3: settings.v1.RecordingRule_API.external_labels:type_name -> types.v1.LabelPair
	9, // 4: settings.v1.RecordingRule_Store.external_labels:type_name -> types.v1.LabelPair
	7, // 5: settings.v1.RecordingRules_Store.rules:type_name -> settings.v1.RecordingRule_Store
	0, // 6: settings.v1.RecordingRulesService.ListRecordingRules:input_type -> settings.v1.ListRecordingRulesRequest
	2, // 7: settings.v1.RecordingRulesService.InsertRecordingRule:input_type -> settings.v1.InsertRecordingRuleRequest
	4, // 8: settings.v1.RecordingRulesService.DeleteRecordingRule:input_type -> settings.v1.DeleteRecordingRuleRequest
	1, // 9: settings.v1.RecordingRulesService.ListRecordingRules:output_type -> settings.v1.ListRecordingRulesResponse
	3, // 10: settings.v1.RecordingRulesService.InsertRecordingRule:output_type -> settings.v1.InsertRecordingRuleResponse
	5, // 11: settings.v1.RecordingRulesService.DeleteRecordingRule:output_type -> settings.v1.DeleteRecordingRuleResponse
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_settings_v1_recording_rules_proto_init() }
func file_settings_v1_recording_rules_proto_init() {
	if File_settings_v1_recording_rules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_settings_v1_recording_rules_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecordingRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecordingRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*InsertRecordingRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*InsertRecordingRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRecordingRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRecordingRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRule_API); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRule_Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_v1_recording_rules_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRules_Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settings_v1_recording_rules_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settings_v1_recording_rules_proto_goTypes,
		DependencyIndexes: file_settings_v1_recording_rules_proto_depIdxs,
		MessageInfos:      file_settings_v1_recording_rules_proto_msgTypes,
	}.Build()
	File_settings_v1_recording_rules_proto = out.File
	file_settings_v1_recording_rules_proto_rawDesc = nil
	file_settings_v1_recording_rules_proto_goTypes = nil
	file_settings_v1_recording_rules_proto_depIdxs = nil
}
