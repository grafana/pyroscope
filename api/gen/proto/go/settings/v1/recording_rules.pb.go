// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: settings/v1/recording_rules.proto

package settingsv1

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRecordingRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordingRuleRequest) Reset() {
	*x = GetRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingRuleRequest) ProtoMessage() {}

func (x *GetRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{0}
}

func (x *GetRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *RecordingRule         `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordingRuleResponse) Reset() {
	*x = GetRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingRuleResponse) ProtoMessage() {}

func (x *GetRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*GetRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecordingRuleResponse) GetRule() *RecordingRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type ListRecordingRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecordingRulesRequest) Reset() {
	*x = ListRecordingRulesRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecordingRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesRequest) ProtoMessage() {}

func (x *ListRecordingRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{2}
}

type ListRecordingRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*RecordingRule       `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecordingRulesResponse) Reset() {
	*x = ListRecordingRulesResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecordingRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecordingRulesResponse) ProtoMessage() {}

func (x *ListRecordingRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecordingRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRecordingRulesResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{3}
}

func (x *ListRecordingRulesResponse) GetRules() []*RecordingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type UpsertRecordingRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id of the recording rule. If an id is not provided, this will
	// create a new recording rule. If an id is provided, it will replace the
	// existing recording rule.
	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName     string          `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Matchers       []string        `protobuf:"bytes,3,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy        []string        `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels []*v1.LabelPair `protobuf:"bytes,5,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	// The observed generation of this recording rule. If this value does not
	// match the generation stored in the database, this upsert will be rejected.
	Generation    int64 `protobuf:"varint,6,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertRecordingRuleRequest) Reset() {
	*x = UpsertRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordingRuleRequest) ProtoMessage() {}

func (x *UpsertRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*UpsertRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpsertRecordingRuleRequest) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *UpsertRecordingRuleRequest) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *UpsertRecordingRuleRequest) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type UpsertRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *RecordingRule         `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertRecordingRuleResponse) Reset() {
	*x = UpsertRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordingRuleResponse) ProtoMessage() {}

func (x *UpsertRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*UpsertRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertRecordingRuleResponse) GetRule() *RecordingRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type DeleteRecordingRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecordingRuleRequest) Reset() {
	*x = DeleteRecordingRuleRequest{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecordingRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleRequest) ProtoMessage() {}

func (x *DeleteRecordingRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleRequest) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRecordingRuleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRecordingRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecordingRuleResponse) Reset() {
	*x = DeleteRecordingRuleResponse{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecordingRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordingRuleResponse) ProtoMessage() {}

func (x *DeleteRecordingRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordingRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecordingRuleResponse) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{7}
}

type RecordingRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique id of the recording rule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the recording rule, this does not necessarily need to be
	// unique.
	MetricName string `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Used in the UI to display what type of profile type this recording rule is
	// generated from.
	//
	// This should be the standard format of:
	//
	//	<name>:<sample-type>:<sample-unit>:<period-type>:<period-unit>
	//
	// For example:
	//
	//	process_cpu:cpu:nanoseconds:cpu:nanoseconds
	ProfileType    string          `protobuf:"bytes,3,opt,name=profile_type,json=profileType,proto3" json:"profile_type,omitempty"`
	Matchers       []string        `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy        []string        `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels []*v1.LabelPair `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	// The observed generation of this recording rule. This value should be
	// provided when making updates to this record, to avoid conflicting
	// concurrent updates.
	Generation    int64 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingRule) Reset() {
	*x = RecordingRule{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule) ProtoMessage() {}

func (x *RecordingRule) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule.ProtoReflect.Descriptor instead.
func (*RecordingRule) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{8}
}

func (x *RecordingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRule) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRule) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *RecordingRule) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRule) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRule) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRule) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type RecordingRuleStore struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetricName           string                 `protobuf:"bytes,2,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	PrometheusDataSource string                 `protobuf:"bytes,3,opt,name=prometheus_data_source,json=prometheusDataSource,proto3" json:"prometheus_data_source,omitempty"`
	Matchers             []string               `protobuf:"bytes,4,rep,name=matchers,proto3" json:"matchers,omitempty"`
	GroupBy              []string               `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	ExternalLabels       []*v1.LabelPair        `protobuf:"bytes,6,rep,name=external_labels,json=externalLabels,proto3" json:"external_labels,omitempty"`
	Generation           int64                  `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecordingRuleStore) Reset() {
	*x = RecordingRuleStore{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRuleStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRuleStore) ProtoMessage() {}

func (x *RecordingRuleStore) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRuleStore.ProtoReflect.Descriptor instead.
func (*RecordingRuleStore) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{9}
}

func (x *RecordingRuleStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecordingRuleStore) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *RecordingRuleStore) GetPrometheusDataSource() string {
	if x != nil {
		return x.PrometheusDataSource
	}
	return ""
}

func (x *RecordingRuleStore) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *RecordingRuleStore) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *RecordingRuleStore) GetExternalLabels() []*v1.LabelPair {
	if x != nil {
		return x.ExternalLabels
	}
	return nil
}

func (x *RecordingRuleStore) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type RecordingRulesStore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*RecordingRuleStore  `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Generation    int64                  `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordingRulesStore) Reset() {
	*x = RecordingRulesStore{}
	mi := &file_settings_v1_recording_rules_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordingRulesStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRulesStore) ProtoMessage() {}

func (x *RecordingRulesStore) ProtoReflect() protoreflect.Message {
	mi := &file_settings_v1_recording_rules_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRulesStore.ProtoReflect.Descriptor instead.
func (*RecordingRulesStore) Descriptor() ([]byte, []int) {
	return file_settings_v1_recording_rules_proto_rawDescGZIP(), []int{10}
}

func (x *RecordingRulesStore) GetRules() []*RecordingRuleStore {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RecordingRulesStore) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

var File_settings_v1_recording_rules_proto protoreflect.FileDescriptor

var file_settings_v1_recording_rules_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4d, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x2c,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xbb, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x27, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb9, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61,
	0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_settings_v1_recording_rules_proto_rawDescOnce sync.Once
	file_settings_v1_recording_rules_proto_rawDescData []byte
)

func file_settings_v1_recording_rules_proto_rawDescGZIP() []byte {
	file_settings_v1_recording_rules_proto_rawDescOnce.Do(func() {
		file_settings_v1_recording_rules_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_settings_v1_recording_rules_proto_rawDesc), len(file_settings_v1_recording_rules_proto_rawDesc)))
	})
	return file_settings_v1_recording_rules_proto_rawDescData
}

var file_settings_v1_recording_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_settings_v1_recording_rules_proto_goTypes = []any{
	(*GetRecordingRuleRequest)(nil),     // 0: settings.v1.GetRecordingRuleRequest
	(*GetRecordingRuleResponse)(nil),    // 1: settings.v1.GetRecordingRuleResponse
	(*ListRecordingRulesRequest)(nil),   // 2: settings.v1.ListRecordingRulesRequest
	(*ListRecordingRulesResponse)(nil),  // 3: settings.v1.ListRecordingRulesResponse
	(*UpsertRecordingRuleRequest)(nil),  // 4: settings.v1.UpsertRecordingRuleRequest
	(*UpsertRecordingRuleResponse)(nil), // 5: settings.v1.UpsertRecordingRuleResponse
	(*DeleteRecordingRuleRequest)(nil),  // 6: settings.v1.DeleteRecordingRuleRequest
	(*DeleteRecordingRuleResponse)(nil), // 7: settings.v1.DeleteRecordingRuleResponse
	(*RecordingRule)(nil),               // 8: settings.v1.RecordingRule
	(*RecordingRuleStore)(nil),          // 9: settings.v1.RecordingRuleStore
	(*RecordingRulesStore)(nil),         // 10: settings.v1.RecordingRulesStore
	(*v1.LabelPair)(nil),                // 11: types.v1.LabelPair
}
var file_settings_v1_recording_rules_proto_depIdxs = []int32{
	8,  // 0: settings.v1.GetRecordingRuleResponse.rule:type_name -> settings.v1.RecordingRule
	8,  // 1: settings.v1.ListRecordingRulesResponse.rules:type_name -> settings.v1.RecordingRule
	11, // 2: settings.v1.UpsertRecordingRuleRequest.external_labels:type_name -> types.v1.LabelPair
	8,  // 3: settings.v1.UpsertRecordingRuleResponse.rule:type_name -> settings.v1.RecordingRule
	11, // 4: settings.v1.RecordingRule.external_labels:type_name -> types.v1.LabelPair
	11, // 5: settings.v1.RecordingRuleStore.external_labels:type_name -> types.v1.LabelPair
	9,  // 6: settings.v1.RecordingRulesStore.rules:type_name -> settings.v1.RecordingRuleStore
	0,  // 7: settings.v1.RecordingRulesService.GetRecordingRule:input_type -> settings.v1.GetRecordingRuleRequest
	2,  // 8: settings.v1.RecordingRulesService.ListRecordingRules:input_type -> settings.v1.ListRecordingRulesRequest
	4,  // 9: settings.v1.RecordingRulesService.UpsertRecordingRule:input_type -> settings.v1.UpsertRecordingRuleRequest
	6,  // 10: settings.v1.RecordingRulesService.DeleteRecordingRule:input_type -> settings.v1.DeleteRecordingRuleRequest
	1,  // 11: settings.v1.RecordingRulesService.GetRecordingRule:output_type -> settings.v1.GetRecordingRuleResponse
	3,  // 12: settings.v1.RecordingRulesService.ListRecordingRules:output_type -> settings.v1.ListRecordingRulesResponse
	5,  // 13: settings.v1.RecordingRulesService.UpsertRecordingRule:output_type -> settings.v1.UpsertRecordingRuleResponse
	7,  // 14: settings.v1.RecordingRulesService.DeleteRecordingRule:output_type -> settings.v1.DeleteRecordingRuleResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_settings_v1_recording_rules_proto_init() }
func file_settings_v1_recording_rules_proto_init() {
	if File_settings_v1_recording_rules_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_settings_v1_recording_rules_proto_rawDesc), len(file_settings_v1_recording_rules_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settings_v1_recording_rules_proto_goTypes,
		DependencyIndexes: file_settings_v1_recording_rules_proto_depIdxs,
		MessageInfos:      file_settings_v1_recording_rules_proto_msgTypes,
	}.Build()
	File_settings_v1_recording_rules_proto = out.File
	file_settings_v1_recording_rules_proto_goTypes = nil
	file_settings_v1_recording_rules_proto_depIdxs = nil
}
