// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: settings/v1/recording_rules.proto

package settingsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/settings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecordingRulesServiceName is the fully-qualified name of the RecordingRulesService service.
	RecordingRulesServiceName = "settings.v1.RecordingRulesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecordingRulesServiceGetRecordingRuleProcedure is the fully-qualified name of the
	// RecordingRulesService's GetRecordingRule RPC.
	RecordingRulesServiceGetRecordingRuleProcedure = "/settings.v1.RecordingRulesService/GetRecordingRule"
	// RecordingRulesServiceListRecordingRulesProcedure is the fully-qualified name of the
	// RecordingRulesService's ListRecordingRules RPC.
	RecordingRulesServiceListRecordingRulesProcedure = "/settings.v1.RecordingRulesService/ListRecordingRules"
	// RecordingRulesServiceUpsertRecordingRuleProcedure is the fully-qualified name of the
	// RecordingRulesService's UpsertRecordingRule RPC.
	RecordingRulesServiceUpsertRecordingRuleProcedure = "/settings.v1.RecordingRulesService/UpsertRecordingRule"
	// RecordingRulesServiceDeleteRecordingRuleProcedure is the fully-qualified name of the
	// RecordingRulesService's DeleteRecordingRule RPC.
	RecordingRulesServiceDeleteRecordingRuleProcedure = "/settings.v1.RecordingRulesService/DeleteRecordingRule"
)

// RecordingRulesServiceClient is a client for the settings.v1.RecordingRulesService service.
type RecordingRulesServiceClient interface {
	GetRecordingRule(context.Context, *connect.Request[v1.GetRecordingRuleRequest]) (*connect.Response[v1.GetRecordingRuleResponse], error)
	ListRecordingRules(context.Context, *connect.Request[v1.ListRecordingRulesRequest]) (*connect.Response[v1.ListRecordingRulesResponse], error)
	UpsertRecordingRule(context.Context, *connect.Request[v1.UpsertRecordingRuleRequest]) (*connect.Response[v1.UpsertRecordingRuleResponse], error)
	DeleteRecordingRule(context.Context, *connect.Request[v1.DeleteRecordingRuleRequest]) (*connect.Response[v1.DeleteRecordingRuleResponse], error)
}

// NewRecordingRulesServiceClient constructs a client for the settings.v1.RecordingRulesService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecordingRulesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecordingRulesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	recordingRulesServiceMethods := v1.File_settings_v1_recording_rules_proto.Services().ByName("RecordingRulesService").Methods()
	return &recordingRulesServiceClient{
		getRecordingRule: connect.NewClient[v1.GetRecordingRuleRequest, v1.GetRecordingRuleResponse](
			httpClient,
			baseURL+RecordingRulesServiceGetRecordingRuleProcedure,
			connect.WithSchema(recordingRulesServiceMethods.ByName("GetRecordingRule")),
			connect.WithClientOptions(opts...),
		),
		listRecordingRules: connect.NewClient[v1.ListRecordingRulesRequest, v1.ListRecordingRulesResponse](
			httpClient,
			baseURL+RecordingRulesServiceListRecordingRulesProcedure,
			connect.WithSchema(recordingRulesServiceMethods.ByName("ListRecordingRules")),
			connect.WithClientOptions(opts...),
		),
		upsertRecordingRule: connect.NewClient[v1.UpsertRecordingRuleRequest, v1.UpsertRecordingRuleResponse](
			httpClient,
			baseURL+RecordingRulesServiceUpsertRecordingRuleProcedure,
			connect.WithSchema(recordingRulesServiceMethods.ByName("UpsertRecordingRule")),
			connect.WithClientOptions(opts...),
		),
		deleteRecordingRule: connect.NewClient[v1.DeleteRecordingRuleRequest, v1.DeleteRecordingRuleResponse](
			httpClient,
			baseURL+RecordingRulesServiceDeleteRecordingRuleProcedure,
			connect.WithSchema(recordingRulesServiceMethods.ByName("DeleteRecordingRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// recordingRulesServiceClient implements RecordingRulesServiceClient.
type recordingRulesServiceClient struct {
	getRecordingRule    *connect.Client[v1.GetRecordingRuleRequest, v1.GetRecordingRuleResponse]
	listRecordingRules  *connect.Client[v1.ListRecordingRulesRequest, v1.ListRecordingRulesResponse]
	upsertRecordingRule *connect.Client[v1.UpsertRecordingRuleRequest, v1.UpsertRecordingRuleResponse]
	deleteRecordingRule *connect.Client[v1.DeleteRecordingRuleRequest, v1.DeleteRecordingRuleResponse]
}

// GetRecordingRule calls settings.v1.RecordingRulesService.GetRecordingRule.
func (c *recordingRulesServiceClient) GetRecordingRule(ctx context.Context, req *connect.Request[v1.GetRecordingRuleRequest]) (*connect.Response[v1.GetRecordingRuleResponse], error) {
	return c.getRecordingRule.CallUnary(ctx, req)
}

// ListRecordingRules calls settings.v1.RecordingRulesService.ListRecordingRules.
func (c *recordingRulesServiceClient) ListRecordingRules(ctx context.Context, req *connect.Request[v1.ListRecordingRulesRequest]) (*connect.Response[v1.ListRecordingRulesResponse], error) {
	return c.listRecordingRules.CallUnary(ctx, req)
}

// UpsertRecordingRule calls settings.v1.RecordingRulesService.UpsertRecordingRule.
func (c *recordingRulesServiceClient) UpsertRecordingRule(ctx context.Context, req *connect.Request[v1.UpsertRecordingRuleRequest]) (*connect.Response[v1.UpsertRecordingRuleResponse], error) {
	return c.upsertRecordingRule.CallUnary(ctx, req)
}

// DeleteRecordingRule calls settings.v1.RecordingRulesService.DeleteRecordingRule.
func (c *recordingRulesServiceClient) DeleteRecordingRule(ctx context.Context, req *connect.Request[v1.DeleteRecordingRuleRequest]) (*connect.Response[v1.DeleteRecordingRuleResponse], error) {
	return c.deleteRecordingRule.CallUnary(ctx, req)
}

// RecordingRulesServiceHandler is an implementation of the settings.v1.RecordingRulesService
// service.
type RecordingRulesServiceHandler interface {
	GetRecordingRule(context.Context, *connect.Request[v1.GetRecordingRuleRequest]) (*connect.Response[v1.GetRecordingRuleResponse], error)
	ListRecordingRules(context.Context, *connect.Request[v1.ListRecordingRulesRequest]) (*connect.Response[v1.ListRecordingRulesResponse], error)
	UpsertRecordingRule(context.Context, *connect.Request[v1.UpsertRecordingRuleRequest]) (*connect.Response[v1.UpsertRecordingRuleResponse], error)
	DeleteRecordingRule(context.Context, *connect.Request[v1.DeleteRecordingRuleRequest]) (*connect.Response[v1.DeleteRecordingRuleResponse], error)
}

// NewRecordingRulesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecordingRulesServiceHandler(svc RecordingRulesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recordingRulesServiceMethods := v1.File_settings_v1_recording_rules_proto.Services().ByName("RecordingRulesService").Methods()
	recordingRulesServiceGetRecordingRuleHandler := connect.NewUnaryHandler(
		RecordingRulesServiceGetRecordingRuleProcedure,
		svc.GetRecordingRule,
		connect.WithSchema(recordingRulesServiceMethods.ByName("GetRecordingRule")),
		connect.WithHandlerOptions(opts...),
	)
	recordingRulesServiceListRecordingRulesHandler := connect.NewUnaryHandler(
		RecordingRulesServiceListRecordingRulesProcedure,
		svc.ListRecordingRules,
		connect.WithSchema(recordingRulesServiceMethods.ByName("ListRecordingRules")),
		connect.WithHandlerOptions(opts...),
	)
	recordingRulesServiceUpsertRecordingRuleHandler := connect.NewUnaryHandler(
		RecordingRulesServiceUpsertRecordingRuleProcedure,
		svc.UpsertRecordingRule,
		connect.WithSchema(recordingRulesServiceMethods.ByName("UpsertRecordingRule")),
		connect.WithHandlerOptions(opts...),
	)
	recordingRulesServiceDeleteRecordingRuleHandler := connect.NewUnaryHandler(
		RecordingRulesServiceDeleteRecordingRuleProcedure,
		svc.DeleteRecordingRule,
		connect.WithSchema(recordingRulesServiceMethods.ByName("DeleteRecordingRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/settings.v1.RecordingRulesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecordingRulesServiceGetRecordingRuleProcedure:
			recordingRulesServiceGetRecordingRuleHandler.ServeHTTP(w, r)
		case RecordingRulesServiceListRecordingRulesProcedure:
			recordingRulesServiceListRecordingRulesHandler.ServeHTTP(w, r)
		case RecordingRulesServiceUpsertRecordingRuleProcedure:
			recordingRulesServiceUpsertRecordingRuleHandler.ServeHTTP(w, r)
		case RecordingRulesServiceDeleteRecordingRuleProcedure:
			recordingRulesServiceDeleteRecordingRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecordingRulesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecordingRulesServiceHandler struct{}

func (UnimplementedRecordingRulesServiceHandler) GetRecordingRule(context.Context, *connect.Request[v1.GetRecordingRuleRequest]) (*connect.Response[v1.GetRecordingRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.RecordingRulesService.GetRecordingRule is not implemented"))
}

func (UnimplementedRecordingRulesServiceHandler) ListRecordingRules(context.Context, *connect.Request[v1.ListRecordingRulesRequest]) (*connect.Response[v1.ListRecordingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.RecordingRulesService.ListRecordingRules is not implemented"))
}

func (UnimplementedRecordingRulesServiceHandler) UpsertRecordingRule(context.Context, *connect.Request[v1.UpsertRecordingRuleRequest]) (*connect.Response[v1.UpsertRecordingRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.RecordingRulesService.UpsertRecordingRule is not implemented"))
}

func (UnimplementedRecordingRulesServiceHandler) DeleteRecordingRule(context.Context, *connect.Request[v1.DeleteRecordingRuleRequest]) (*connect.Response[v1.DeleteRecordingRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("settings.v1.RecordingRulesService.DeleteRecordingRule is not implemented"))
}
