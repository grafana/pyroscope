// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: querybackend/v1/querybackend.proto

package querybackendv1

import (
	_ "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	v11 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InvokeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Workers won't have access to the overrides,
	// therefore all the necessary options should be
	// passed in the request.
	MaxBlockReadsPerWorker  int64 `protobuf:"varint,1,opt,name=max_block_reads_per_worker,json=maxBlockReadsPerWorker,proto3" json:"max_block_reads_per_worker,omitempty"`
	MaxBlockMergesPerWorker int64 `protobuf:"varint,2,opt,name=max_block_merges_per_worker,json=maxBlockMergesPerWorker,proto3" json:"max_block_merges_per_worker,omitempty"`
}

func (x *InvokeOptions) Reset() {
	*x = InvokeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeOptions) ProtoMessage() {}

func (x *InvokeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeOptions.ProtoReflect.Descriptor instead.
func (*InvokeOptions) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{0}
}

func (x *InvokeOptions) GetMaxBlockReadsPerWorker() int64 {
	if x != nil {
		return x.MaxBlockReadsPerWorker
	}
	return 0
}

func (x *InvokeOptions) GetMaxBlockMergesPerWorker() int64 {
	if x != nil {
		return x.MaxBlockMergesPerWorker
	}
	return 0
}

type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant        []string        `protobuf:"bytes,1,rep,name=tenant,proto3" json:"tenant,omitempty"`
	StartTime     int64           `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64           `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LabelSelector string          `protobuf:"bytes,4,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Options       *InvokeOptions  `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	Blocks        []*v1.BlockMeta `protobuf:"bytes,6,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Query         []*Query        `protobuf:"bytes,7,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{1}
}

func (x *InvokeRequest) GetTenant() []string {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *InvokeRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InvokeRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InvokeRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *InvokeRequest) GetOptions() *InvokeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InvokeRequest) GetBlocks() []*v1.BlockMeta {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *InvokeRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type InvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *InvokeResponse) Reset() {
	*x = InvokeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeResponse) ProtoMessage() {}

func (x *InvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeResponse.ProtoReflect.Descriptor instead.
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{2}
}

func (x *InvokeResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryType:
	//
	//	*Query_LabelNames
	//	*Query_LabelValues
	//	*Query_SeriesLabels
	//	*Query_Metrics
	//	*Query_Tree
	QueryType isQuery_QueryType `protobuf_oneof:"query_type"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{3}
}

func (m *Query) GetQueryType() isQuery_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (x *Query) GetLabelNames() *LabelNamesQuery {
	if x, ok := x.GetQueryType().(*Query_LabelNames); ok {
		return x.LabelNames
	}
	return nil
}

func (x *Query) GetLabelValues() *LabelValuesQuery {
	if x, ok := x.GetQueryType().(*Query_LabelValues); ok {
		return x.LabelValues
	}
	return nil
}

func (x *Query) GetSeriesLabels() *SeriesLabelsQuery {
	if x, ok := x.GetQueryType().(*Query_SeriesLabels); ok {
		return x.SeriesLabels
	}
	return nil
}

func (x *Query) GetMetrics() *MetricsQuery {
	if x, ok := x.GetQueryType().(*Query_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (x *Query) GetTree() *TreeQuery {
	if x, ok := x.GetQueryType().(*Query_Tree); ok {
		return x.Tree
	}
	return nil
}

type isQuery_QueryType interface {
	isQuery_QueryType()
}

type Query_LabelNames struct {
	LabelNames *LabelNamesQuery `protobuf:"bytes,1,opt,name=label_names,json=labelNames,proto3,oneof"`
}

type Query_LabelValues struct {
	LabelValues *LabelValuesQuery `protobuf:"bytes,2,opt,name=label_values,json=labelValues,proto3,oneof"`
}

type Query_SeriesLabels struct {
	SeriesLabels *SeriesLabelsQuery `protobuf:"bytes,3,opt,name=series_labels,json=seriesLabels,proto3,oneof"`
}

type Query_Metrics struct {
	Metrics *MetricsQuery `protobuf:"bytes,4,opt,name=metrics,proto3,oneof"`
}

type Query_Tree struct {
	Tree *TreeQuery `protobuf:"bytes,5,opt,name=tree,proto3,oneof"`
}

func (*Query_LabelNames) isQuery_QueryType() {}

func (*Query_LabelValues) isQuery_QueryType() {}

func (*Query_SeriesLabels) isQuery_QueryType() {}

func (*Query_Metrics) isQuery_QueryType() {}

func (*Query_Tree) isQuery_QueryType() {}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReportType:
	//
	//	*Report_LabelNames
	//	*Report_LabelValues
	//	*Report_SeriesLabels
	//	*Report_Metrics
	//	*Report_Tree
	ReportType isReport_ReportType `protobuf_oneof:"report_type"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{4}
}

func (m *Report) GetReportType() isReport_ReportType {
	if m != nil {
		return m.ReportType
	}
	return nil
}

func (x *Report) GetLabelNames() *LabelNamesReport {
	if x, ok := x.GetReportType().(*Report_LabelNames); ok {
		return x.LabelNames
	}
	return nil
}

func (x *Report) GetLabelValues() *LabelValuesReport {
	if x, ok := x.GetReportType().(*Report_LabelValues); ok {
		return x.LabelValues
	}
	return nil
}

func (x *Report) GetSeriesLabels() *SeriesLabelsReport {
	if x, ok := x.GetReportType().(*Report_SeriesLabels); ok {
		return x.SeriesLabels
	}
	return nil
}

func (x *Report) GetMetrics() *MetricsReport {
	if x, ok := x.GetReportType().(*Report_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (x *Report) GetTree() *TreeReport {
	if x, ok := x.GetReportType().(*Report_Tree); ok {
		return x.Tree
	}
	return nil
}

type isReport_ReportType interface {
	isReport_ReportType()
}

type Report_LabelNames struct {
	LabelNames *LabelNamesReport `protobuf:"bytes,1,opt,name=label_names,json=labelNames,proto3,oneof"`
}

type Report_LabelValues struct {
	LabelValues *LabelValuesReport `protobuf:"bytes,2,opt,name=label_values,json=labelValues,proto3,oneof"`
}

type Report_SeriesLabels struct {
	SeriesLabels *SeriesLabelsReport `protobuf:"bytes,3,opt,name=series_labels,json=seriesLabels,proto3,oneof"`
}

type Report_Metrics struct {
	Metrics *MetricsReport `protobuf:"bytes,4,opt,name=metrics,proto3,oneof"`
}

type Report_Tree struct {
	Tree *TreeReport `protobuf:"bytes,5,opt,name=tree,proto3,oneof"`
}

func (*Report_LabelNames) isReport_ReportType() {}

func (*Report_LabelValues) isReport_ReportType() {}

func (*Report_SeriesLabels) isReport_ReportType() {}

func (*Report_Metrics) isReport_ReportType() {}

func (*Report_Tree) isReport_ReportType() {}

type LabelNamesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabelNamesQuery) Reset() {
	*x = LabelNamesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNamesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesQuery) ProtoMessage() {}

func (x *LabelNamesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesQuery.ProtoReflect.Descriptor instead.
func (*LabelNamesQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{5}
}

type LabelNamesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *LabelNamesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelNames []string         `protobuf:"bytes,2,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
}

func (x *LabelNamesReport) Reset() {
	*x = LabelNamesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNamesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesReport) ProtoMessage() {}

func (x *LabelNamesReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesReport.ProtoReflect.Descriptor instead.
func (*LabelNamesReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{6}
}

func (x *LabelNamesReport) GetQuery() *LabelNamesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelNamesReport) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type LabelValuesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelName string `protobuf:"bytes,1,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
}

func (x *LabelValuesQuery) Reset() {
	*x = LabelValuesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValuesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesQuery) ProtoMessage() {}

func (x *LabelValuesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesQuery.ProtoReflect.Descriptor instead.
func (*LabelValuesQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{7}
}

func (x *LabelValuesQuery) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type LabelValuesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query       *LabelValuesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelValues []string          `protobuf:"bytes,2,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
}

func (x *LabelValuesReport) Reset() {
	*x = LabelValuesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValuesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesReport) ProtoMessage() {}

func (x *LabelValuesReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesReport.ProtoReflect.Descriptor instead.
func (*LabelValuesReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{8}
}

func (x *LabelValuesReport) GetQuery() *LabelValuesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelValuesReport) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

type SeriesLabelsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelNames []string `protobuf:"bytes,1,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
}

func (x *SeriesLabelsQuery) Reset() {
	*x = SeriesLabelsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesLabelsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsQuery) ProtoMessage() {}

func (x *SeriesLabelsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsQuery.ProtoReflect.Descriptor instead.
func (*SeriesLabelsQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{9}
}

func (x *SeriesLabelsQuery) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type SeriesLabelsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *SeriesLabelsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SeriesLabels []*v11.Labels      `protobuf:"bytes,2,rep,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
}

func (x *SeriesLabelsReport) Reset() {
	*x = SeriesLabelsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesLabelsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsReport) ProtoMessage() {}

func (x *SeriesLabelsReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsReport.ProtoReflect.Descriptor instead.
func (*SeriesLabelsReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{10}
}

func (x *SeriesLabelsReport) GetQuery() *SeriesLabelsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SeriesLabelsReport) GetSeriesLabels() []*v11.Labels {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

type MetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step        float64                        `protobuf:"fixed64,1,opt,name=step,proto3" json:"step,omitempty"`
	GroupBy     []string                       `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregation *v11.TimeSeriesAggregationType `protobuf:"varint,3,opt,name=aggregation,proto3,enum=types.v1.TimeSeriesAggregationType,oneof" json:"aggregation,omitempty"`
}

func (x *MetricsQuery) Reset() {
	*x = MetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsQuery) ProtoMessage() {}

func (x *MetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsQuery.ProtoReflect.Descriptor instead.
func (*MetricsQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{11}
}

func (x *MetricsQuery) GetStep() float64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *MetricsQuery) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *MetricsQuery) GetAggregation() v11.TimeSeriesAggregationType {
	if x != nil && x.Aggregation != nil {
		return *x.Aggregation
	}
	return v11.TimeSeriesAggregationType(0)
}

type MetricsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Metrics model.
	Query   *MetricsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Metrics []*v11.Series `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricsReport) Reset() {
	*x = MetricsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsReport) ProtoMessage() {}

func (x *MetricsReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsReport.ProtoReflect.Descriptor instead.
func (*MetricsReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsReport) GetQuery() *MetricsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *MetricsReport) GetMetrics() []*v11.Series {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TreeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxNodes int64 `protobuf:"varint,1,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *TreeQuery) Reset() {
	*x = TreeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeQuery) ProtoMessage() {}

func (x *TreeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeQuery.ProtoReflect.Descriptor instead.
func (*TreeQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{13}
}

func (x *TreeQuery) GetMaxNodes() int64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type TreeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *TreeQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Data  []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TreeReport) Reset() {
	*x = TreeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeReport) ProtoMessage() {}

func (x *TreeReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeReport.ProtoReflect.Descriptor instead.
func (*TreeReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{14}
}

func (x *TreeReport) GetQuery() *TreeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TreeReport) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_querybackend_v1_querybackend_proto protoreflect.FileDescriptor

var file_querybackend_v1_querybackend_proto_rawDesc = []byte{
	0x0a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0xa1,
	0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x43, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x44, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x10, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x52, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x62, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xd3, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x42, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_querybackend_v1_querybackend_proto_rawDescOnce sync.Once
	file_querybackend_v1_querybackend_proto_rawDescData = file_querybackend_v1_querybackend_proto_rawDesc
)

func file_querybackend_v1_querybackend_proto_rawDescGZIP() []byte {
	file_querybackend_v1_querybackend_proto_rawDescOnce.Do(func() {
		file_querybackend_v1_querybackend_proto_rawDescData = protoimpl.X.CompressGZIP(file_querybackend_v1_querybackend_proto_rawDescData)
	})
	return file_querybackend_v1_querybackend_proto_rawDescData
}

var file_querybackend_v1_querybackend_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_querybackend_v1_querybackend_proto_goTypes = []interface{}{
	(*InvokeOptions)(nil),              // 0: querybackend.v1.InvokeOptions
	(*InvokeRequest)(nil),              // 1: querybackend.v1.InvokeRequest
	(*InvokeResponse)(nil),             // 2: querybackend.v1.InvokeResponse
	(*Query)(nil),                      // 3: querybackend.v1.Query
	(*Report)(nil),                     // 4: querybackend.v1.Report
	(*LabelNamesQuery)(nil),            // 5: querybackend.v1.LabelNamesQuery
	(*LabelNamesReport)(nil),           // 6: querybackend.v1.LabelNamesReport
	(*LabelValuesQuery)(nil),           // 7: querybackend.v1.LabelValuesQuery
	(*LabelValuesReport)(nil),          // 8: querybackend.v1.LabelValuesReport
	(*SeriesLabelsQuery)(nil),          // 9: querybackend.v1.SeriesLabelsQuery
	(*SeriesLabelsReport)(nil),         // 10: querybackend.v1.SeriesLabelsReport
	(*MetricsQuery)(nil),               // 11: querybackend.v1.MetricsQuery
	(*MetricsReport)(nil),              // 12: querybackend.v1.MetricsReport
	(*TreeQuery)(nil),                  // 13: querybackend.v1.TreeQuery
	(*TreeReport)(nil),                 // 14: querybackend.v1.TreeReport
	(*v1.BlockMeta)(nil),               // 15: metastore.v1.BlockMeta
	(*v11.Labels)(nil),                 // 16: types.v1.Labels
	(v11.TimeSeriesAggregationType)(0), // 17: types.v1.TimeSeriesAggregationType
	(*v11.Series)(nil),                 // 18: types.v1.Series
}
var file_querybackend_v1_querybackend_proto_depIdxs = []int32{
	0,  // 0: querybackend.v1.InvokeRequest.options:type_name -> querybackend.v1.InvokeOptions
	15, // 1: querybackend.v1.InvokeRequest.blocks:type_name -> metastore.v1.BlockMeta
	3,  // 2: querybackend.v1.InvokeRequest.query:type_name -> querybackend.v1.Query
	4,  // 3: querybackend.v1.InvokeResponse.reports:type_name -> querybackend.v1.Report
	5,  // 4: querybackend.v1.Query.label_names:type_name -> querybackend.v1.LabelNamesQuery
	7,  // 5: querybackend.v1.Query.label_values:type_name -> querybackend.v1.LabelValuesQuery
	9,  // 6: querybackend.v1.Query.series_labels:type_name -> querybackend.v1.SeriesLabelsQuery
	11, // 7: querybackend.v1.Query.metrics:type_name -> querybackend.v1.MetricsQuery
	13, // 8: querybackend.v1.Query.tree:type_name -> querybackend.v1.TreeQuery
	6,  // 9: querybackend.v1.Report.label_names:type_name -> querybackend.v1.LabelNamesReport
	8,  // 10: querybackend.v1.Report.label_values:type_name -> querybackend.v1.LabelValuesReport
	10, // 11: querybackend.v1.Report.series_labels:type_name -> querybackend.v1.SeriesLabelsReport
	12, // 12: querybackend.v1.Report.metrics:type_name -> querybackend.v1.MetricsReport
	14, // 13: querybackend.v1.Report.tree:type_name -> querybackend.v1.TreeReport
	5,  // 14: querybackend.v1.LabelNamesReport.query:type_name -> querybackend.v1.LabelNamesQuery
	7,  // 15: querybackend.v1.LabelValuesReport.query:type_name -> querybackend.v1.LabelValuesQuery
	9,  // 16: querybackend.v1.SeriesLabelsReport.query:type_name -> querybackend.v1.SeriesLabelsQuery
	16, // 17: querybackend.v1.SeriesLabelsReport.series_labels:type_name -> types.v1.Labels
	17, // 18: querybackend.v1.MetricsQuery.aggregation:type_name -> types.v1.TimeSeriesAggregationType
	11, // 19: querybackend.v1.MetricsReport.query:type_name -> querybackend.v1.MetricsQuery
	18, // 20: querybackend.v1.MetricsReport.metrics:type_name -> types.v1.Series
	13, // 21: querybackend.v1.TreeReport.query:type_name -> querybackend.v1.TreeQuery
	1,  // 22: querybackend.v1.QueryBackendService.Invoke:input_type -> querybackend.v1.InvokeRequest
	2,  // 23: querybackend.v1.QueryBackendService.Invoke:output_type -> querybackend.v1.InvokeResponse
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_querybackend_v1_querybackend_proto_init() }
func file_querybackend_v1_querybackend_proto_init() {
	if File_querybackend_v1_querybackend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_querybackend_v1_querybackend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNamesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelNamesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValuesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelValuesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesLabelsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeriesLabelsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_querybackend_v1_querybackend_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Query_LabelNames)(nil),
		(*Query_LabelValues)(nil),
		(*Query_SeriesLabels)(nil),
		(*Query_Metrics)(nil),
		(*Query_Tree)(nil),
	}
	file_querybackend_v1_querybackend_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Report_LabelNames)(nil),
		(*Report_LabelValues)(nil),
		(*Report_SeriesLabels)(nil),
		(*Report_Metrics)(nil),
		(*Report_Tree)(nil),
	}
	file_querybackend_v1_querybackend_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_querybackend_v1_querybackend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_querybackend_v1_querybackend_proto_goTypes,
		DependencyIndexes: file_querybackend_v1_querybackend_proto_depIdxs,
		MessageInfos:      file_querybackend_v1_querybackend_proto_msgTypes,
	}.Build()
	File_querybackend_v1_querybackend_proto = out.File
	file_querybackend_v1_querybackend_proto_rawDesc = nil
	file_querybackend_v1_querybackend_proto_goTypes = nil
	file_querybackend_v1_querybackend_proto_depIdxs = nil
}
