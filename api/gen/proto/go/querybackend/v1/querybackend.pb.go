// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: querybackend/v1/querybackend.proto

package querybackendv1

import (
	_ "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	v11 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_QUERY_UNSPECIFIED   QueryType = 0
	QueryType_QUERY_LABEL_NAMES   QueryType = 1
	QueryType_QUERY_LABEL_VALUES  QueryType = 2
	QueryType_QUERY_SERIES_LABELS QueryType = 3
	QueryType_QUERY_TIME_SERIES   QueryType = 4
	QueryType_QUERY_TREE          QueryType = 5
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_UNSPECIFIED",
		1: "QUERY_LABEL_NAMES",
		2: "QUERY_LABEL_VALUES",
		3: "QUERY_SERIES_LABELS",
		4: "QUERY_TIME_SERIES",
		5: "QUERY_TREE",
	}
	QueryType_value = map[string]int32{
		"QUERY_UNSPECIFIED":   0,
		"QUERY_LABEL_NAMES":   1,
		"QUERY_LABEL_VALUES":  2,
		"QUERY_SERIES_LABELS": 3,
		"QUERY_TIME_SERIES":   4,
		"QUERY_TREE":          5,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_querybackend_v1_querybackend_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_querybackend_v1_querybackend_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{0}
}

type ReportType int32

const (
	ReportType_REPORT_UNSPECIFIED   ReportType = 0
	ReportType_REPORT_LABEL_NAMES   ReportType = 1
	ReportType_REPORT_LABEL_VALUES  ReportType = 2
	ReportType_REPORT_SERIES_LABELS ReportType = 3
	ReportType_REPORT_TIME_SERIES   ReportType = 4
	ReportType_REPORT_TREE          ReportType = 5
)

// Enum value maps for ReportType.
var (
	ReportType_name = map[int32]string{
		0: "REPORT_UNSPECIFIED",
		1: "REPORT_LABEL_NAMES",
		2: "REPORT_LABEL_VALUES",
		3: "REPORT_SERIES_LABELS",
		4: "REPORT_TIME_SERIES",
		5: "REPORT_TREE",
	}
	ReportType_value = map[string]int32{
		"REPORT_UNSPECIFIED":   0,
		"REPORT_LABEL_NAMES":   1,
		"REPORT_LABEL_VALUES":  2,
		"REPORT_SERIES_LABELS": 3,
		"REPORT_TIME_SERIES":   4,
		"REPORT_TREE":          5,
	}
)

func (x ReportType) Enum() *ReportType {
	p := new(ReportType)
	*p = x
	return p
}

func (x ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_querybackend_v1_querybackend_proto_enumTypes[1].Descriptor()
}

func (ReportType) Type() protoreflect.EnumType {
	return &file_querybackend_v1_querybackend_proto_enumTypes[1]
}

func (x ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportType.Descriptor instead.
func (ReportType) EnumDescriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{1}
}

type InvokeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvokeOptions) Reset() {
	*x = InvokeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeOptions) ProtoMessage() {}

func (x *InvokeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeOptions.ProtoReflect.Descriptor instead.
func (*InvokeOptions) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{0}
}

type InvokeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant        []string       `protobuf:"bytes,1,rep,name=tenant,proto3" json:"tenant,omitempty"`
	StartTime     int64          `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64          `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LabelSelector string         `protobuf:"bytes,4,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Query         []*Query       `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
	QueryPlan     *QueryPlan     `protobuf:"bytes,6,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	Options       *InvokeOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *InvokeRequest) Reset() {
	*x = InvokeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeRequest) ProtoMessage() {}

func (x *InvokeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeRequest.ProtoReflect.Descriptor instead.
func (*InvokeRequest) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{1}
}

func (x *InvokeRequest) GetTenant() []string {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *InvokeRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *InvokeRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *InvokeRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *InvokeRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *InvokeRequest) GetQueryPlan() *QueryPlan {
	if x != nil {
		return x.QueryPlan
	}
	return nil
}

func (x *InvokeRequest) GetOptions() *InvokeOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Query plan is represented by a DAG, where each node
// might be either "merge" or "read" (leaves). Each node
// references a range: merge nodes refer to other nodes,
// while read nodes refer to the blocks.
type QueryPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each node is encoded with 3 values:
	//   - node type: 0 - read, 1 - merge;
	//   - range offset;
	//   - range length.
	Graph []uint32 `protobuf:"varint,1,rep,packed,name=graph,proto3" json:"graph,omitempty"`
	// The blocks matching the query.
	Blocks []*v1.BlockMeta `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *QueryPlan) Reset() {
	*x = QueryPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPlan) ProtoMessage() {}

func (x *QueryPlan) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPlan.ProtoReflect.Descriptor instead.
func (*QueryPlan) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{2}
}

func (x *QueryPlan) GetGraph() []uint32 {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *QueryPlan) GetBlocks() []*v1.BlockMeta {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryType QueryType `protobuf:"varint,1,opt,name=query_type,json=queryType,proto3,enum=querybackend.v1.QueryType" json:"query_type,omitempty"`
	// Exactly one of the following fields should be set,
	// depending on the query type.
	LabelNames   *LabelNamesQuery   `protobuf:"bytes,2,opt,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	LabelValues  *LabelValuesQuery  `protobuf:"bytes,3,opt,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	SeriesLabels *SeriesLabelsQuery `protobuf:"bytes,4,opt,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
	TimeSeries   *TimeSeriesQuery   `protobuf:"bytes,5,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Tree         *TreeQuery         `protobuf:"bytes,6,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_QUERY_UNSPECIFIED
}

func (x *Query) GetLabelNames() *LabelNamesQuery {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *Query) GetLabelValues() *LabelValuesQuery {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Query) GetSeriesLabels() *SeriesLabelsQuery {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

func (x *Query) GetTimeSeries() *TimeSeriesQuery {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Query) GetTree() *TreeQuery {
	if x != nil {
		return x.Tree
	}
	return nil
}

type InvokeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports     []*Report    `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Diagnostics *Diagnostics `protobuf:"bytes,2,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *InvokeResponse) Reset() {
	*x = InvokeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeResponse) ProtoMessage() {}

func (x *InvokeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeResponse.ProtoReflect.Descriptor instead.
func (*InvokeResponse) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{4}
}

func (x *InvokeResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *InvokeResponse) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

// Diagnostic messages, events, statistics, analytics, etc.
type Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Diagnostics) Reset() {
	*x = Diagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostics) ProtoMessage() {}

func (x *Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostics.ProtoReflect.Descriptor instead.
func (*Diagnostics) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{5}
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportType ReportType `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3,enum=querybackend.v1.ReportType" json:"report_type,omitempty"`
	// Exactly one of the following fields should be set,
	// depending on the report type.
	LabelNames   *LabelNamesReport   `protobuf:"bytes,2,opt,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	LabelValues  *LabelValuesReport  `protobuf:"bytes,3,opt,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	SeriesLabels *SeriesLabelsReport `protobuf:"bytes,4,opt,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
	TimeSeries   *TimeSeriesReport   `protobuf:"bytes,5,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Tree         *TreeReport         `protobuf:"bytes,6,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{6}
}

func (x *Report) GetReportType() ReportType {
	if x != nil {
		return x.ReportType
	}
	return ReportType_REPORT_UNSPECIFIED
}

func (x *Report) GetLabelNames() *LabelNamesReport {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *Report) GetLabelValues() *LabelValuesReport {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Report) GetSeriesLabels() *SeriesLabelsReport {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

func (x *Report) GetTimeSeries() *TimeSeriesReport {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Report) GetTree() *TreeReport {
	if x != nil {
		return x.Tree
	}
	return nil
}

type LabelNamesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabelNamesQuery) Reset() {
	*x = LabelNamesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNamesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesQuery) ProtoMessage() {}

func (x *LabelNamesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesQuery.ProtoReflect.Descriptor instead.
func (*LabelNamesQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{7}
}

type LabelNamesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *LabelNamesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelNames []string         `protobuf:"bytes,2,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
}

func (x *LabelNamesReport) Reset() {
	*x = LabelNamesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNamesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNamesReport) ProtoMessage() {}

func (x *LabelNamesReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNamesReport.ProtoReflect.Descriptor instead.
func (*LabelNamesReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{8}
}

func (x *LabelNamesReport) GetQuery() *LabelNamesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelNamesReport) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type LabelValuesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelName string `protobuf:"bytes,1,opt,name=label_name,json=labelName,proto3" json:"label_name,omitempty"`
}

func (x *LabelValuesQuery) Reset() {
	*x = LabelValuesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValuesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesQuery) ProtoMessage() {}

func (x *LabelValuesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesQuery.ProtoReflect.Descriptor instead.
func (*LabelValuesQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{9}
}

func (x *LabelValuesQuery) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type LabelValuesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query       *LabelValuesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LabelValues []string          `protobuf:"bytes,2,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
}

func (x *LabelValuesReport) Reset() {
	*x = LabelValuesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelValuesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelValuesReport) ProtoMessage() {}

func (x *LabelValuesReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelValuesReport.ProtoReflect.Descriptor instead.
func (*LabelValuesReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{10}
}

func (x *LabelValuesReport) GetQuery() *LabelValuesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LabelValuesReport) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

type SeriesLabelsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelNames []string `protobuf:"bytes,1,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
}

func (x *SeriesLabelsQuery) Reset() {
	*x = SeriesLabelsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesLabelsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsQuery) ProtoMessage() {}

func (x *SeriesLabelsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsQuery.ProtoReflect.Descriptor instead.
func (*SeriesLabelsQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{11}
}

func (x *SeriesLabelsQuery) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

type SeriesLabelsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *SeriesLabelsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SeriesLabels []*v11.Labels      `protobuf:"bytes,2,rep,name=series_labels,json=seriesLabels,proto3" json:"series_labels,omitempty"`
}

func (x *SeriesLabelsReport) Reset() {
	*x = SeriesLabelsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeriesLabelsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesLabelsReport) ProtoMessage() {}

func (x *SeriesLabelsReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesLabelsReport.ProtoReflect.Descriptor instead.
func (*SeriesLabelsReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{12}
}

func (x *SeriesLabelsReport) GetQuery() *SeriesLabelsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SeriesLabelsReport) GetSeriesLabels() []*v11.Labels {
	if x != nil {
		return x.SeriesLabels
	}
	return nil
}

type TimeSeriesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step        float64                        `protobuf:"fixed64,1,opt,name=step,proto3" json:"step,omitempty"`
	GroupBy     []string                       `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregation *v11.TimeSeriesAggregationType `protobuf:"varint,3,opt,name=aggregation,proto3,enum=types.v1.TimeSeriesAggregationType,oneof" json:"aggregation,omitempty"`
}

func (x *TimeSeriesQuery) Reset() {
	*x = TimeSeriesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesQuery) ProtoMessage() {}

func (x *TimeSeriesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesQuery.ProtoReflect.Descriptor instead.
func (*TimeSeriesQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{13}
}

func (x *TimeSeriesQuery) GetStep() float64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TimeSeriesQuery) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *TimeSeriesQuery) GetAggregation() v11.TimeSeriesAggregationType {
	if x != nil && x.Aggregation != nil {
		return *x.Aggregation
	}
	return v11.TimeSeriesAggregationType(0)
}

type TimeSeriesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *TimeSeriesQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	TimeSeries []*v11.Series    `protobuf:"bytes,2,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
}

func (x *TimeSeriesReport) Reset() {
	*x = TimeSeriesReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesReport) ProtoMessage() {}

func (x *TimeSeriesReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesReport.ProtoReflect.Descriptor instead.
func (*TimeSeriesReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{14}
}

func (x *TimeSeriesReport) GetQuery() *TimeSeriesQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TimeSeriesReport) GetTimeSeries() []*v11.Series {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

type TreeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxNodes int64 `protobuf:"varint,1,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *TreeQuery) Reset() {
	*x = TreeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeQuery) ProtoMessage() {}

func (x *TreeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeQuery.ProtoReflect.Descriptor instead.
func (*TreeQuery) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{15}
}

func (x *TreeQuery) GetMaxNodes() int64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type TreeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *TreeQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Tree  []byte     `protobuf:"bytes,2,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *TreeReport) Reset() {
	*x = TreeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_querybackend_v1_querybackend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeReport) ProtoMessage() {}

func (x *TreeReport) ProtoReflect() protoreflect.Message {
	mi := &file_querybackend_v1_querybackend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeReport.ProtoReflect.Descriptor instead.
func (*TreeReport) Descriptor() ([]byte, []int) {
	return file_querybackend_v1_querybackend_proto_rawDescGZIP(), []int{16}
}

func (x *TreeReport) GetQuery() *TreeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *TreeReport) GetTree() []byte {
	if x != nil {
		return x.Tree
	}
	return nil
}

var File_querybackend_v1_querybackend_proto protoreflect.FileDescriptor

var file_querybackend_v1_querybackend_proto_rawDesc = []byte{
	0x0a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x52, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22,
	0x83, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0x90, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6b, 0x0a, 0x10, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x4a, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x52, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x2a, 0x91, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x05, 0x2a, 0x98, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x45, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45,
	0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x52,
	0x45, 0x45, 0x10, 0x05, 0x32, 0x62, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x49,
	0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xd3, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x42, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x51, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_querybackend_v1_querybackend_proto_rawDescOnce sync.Once
	file_querybackend_v1_querybackend_proto_rawDescData = file_querybackend_v1_querybackend_proto_rawDesc
)

func file_querybackend_v1_querybackend_proto_rawDescGZIP() []byte {
	file_querybackend_v1_querybackend_proto_rawDescOnce.Do(func() {
		file_querybackend_v1_querybackend_proto_rawDescData = protoimpl.X.CompressGZIP(file_querybackend_v1_querybackend_proto_rawDescData)
	})
	return file_querybackend_v1_querybackend_proto_rawDescData
}

var file_querybackend_v1_querybackend_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_querybackend_v1_querybackend_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_querybackend_v1_querybackend_proto_goTypes = []any{
	(QueryType)(0),                     // 0: querybackend.v1.QueryType
	(ReportType)(0),                    // 1: querybackend.v1.ReportType
	(*InvokeOptions)(nil),              // 2: querybackend.v1.InvokeOptions
	(*InvokeRequest)(nil),              // 3: querybackend.v1.InvokeRequest
	(*QueryPlan)(nil),                  // 4: querybackend.v1.QueryPlan
	(*Query)(nil),                      // 5: querybackend.v1.Query
	(*InvokeResponse)(nil),             // 6: querybackend.v1.InvokeResponse
	(*Diagnostics)(nil),                // 7: querybackend.v1.Diagnostics
	(*Report)(nil),                     // 8: querybackend.v1.Report
	(*LabelNamesQuery)(nil),            // 9: querybackend.v1.LabelNamesQuery
	(*LabelNamesReport)(nil),           // 10: querybackend.v1.LabelNamesReport
	(*LabelValuesQuery)(nil),           // 11: querybackend.v1.LabelValuesQuery
	(*LabelValuesReport)(nil),          // 12: querybackend.v1.LabelValuesReport
	(*SeriesLabelsQuery)(nil),          // 13: querybackend.v1.SeriesLabelsQuery
	(*SeriesLabelsReport)(nil),         // 14: querybackend.v1.SeriesLabelsReport
	(*TimeSeriesQuery)(nil),            // 15: querybackend.v1.TimeSeriesQuery
	(*TimeSeriesReport)(nil),           // 16: querybackend.v1.TimeSeriesReport
	(*TreeQuery)(nil),                  // 17: querybackend.v1.TreeQuery
	(*TreeReport)(nil),                 // 18: querybackend.v1.TreeReport
	(*v1.BlockMeta)(nil),               // 19: metastore.v1.BlockMeta
	(*v11.Labels)(nil),                 // 20: types.v1.Labels
	(v11.TimeSeriesAggregationType)(0), // 21: types.v1.TimeSeriesAggregationType
	(*v11.Series)(nil),                 // 22: types.v1.Series
}
var file_querybackend_v1_querybackend_proto_depIdxs = []int32{
	5,  // 0: querybackend.v1.InvokeRequest.query:type_name -> querybackend.v1.Query
	4,  // 1: querybackend.v1.InvokeRequest.query_plan:type_name -> querybackend.v1.QueryPlan
	2,  // 2: querybackend.v1.InvokeRequest.options:type_name -> querybackend.v1.InvokeOptions
	19, // 3: querybackend.v1.QueryPlan.blocks:type_name -> metastore.v1.BlockMeta
	0,  // 4: querybackend.v1.Query.query_type:type_name -> querybackend.v1.QueryType
	9,  // 5: querybackend.v1.Query.label_names:type_name -> querybackend.v1.LabelNamesQuery
	11, // 6: querybackend.v1.Query.label_values:type_name -> querybackend.v1.LabelValuesQuery
	13, // 7: querybackend.v1.Query.series_labels:type_name -> querybackend.v1.SeriesLabelsQuery
	15, // 8: querybackend.v1.Query.time_series:type_name -> querybackend.v1.TimeSeriesQuery
	17, // 9: querybackend.v1.Query.tree:type_name -> querybackend.v1.TreeQuery
	8,  // 10: querybackend.v1.InvokeResponse.reports:type_name -> querybackend.v1.Report
	7,  // 11: querybackend.v1.InvokeResponse.diagnostics:type_name -> querybackend.v1.Diagnostics
	1,  // 12: querybackend.v1.Report.report_type:type_name -> querybackend.v1.ReportType
	10, // 13: querybackend.v1.Report.label_names:type_name -> querybackend.v1.LabelNamesReport
	12, // 14: querybackend.v1.Report.label_values:type_name -> querybackend.v1.LabelValuesReport
	14, // 15: querybackend.v1.Report.series_labels:type_name -> querybackend.v1.SeriesLabelsReport
	16, // 16: querybackend.v1.Report.time_series:type_name -> querybackend.v1.TimeSeriesReport
	18, // 17: querybackend.v1.Report.tree:type_name -> querybackend.v1.TreeReport
	9,  // 18: querybackend.v1.LabelNamesReport.query:type_name -> querybackend.v1.LabelNamesQuery
	11, // 19: querybackend.v1.LabelValuesReport.query:type_name -> querybackend.v1.LabelValuesQuery
	13, // 20: querybackend.v1.SeriesLabelsReport.query:type_name -> querybackend.v1.SeriesLabelsQuery
	20, // 21: querybackend.v1.SeriesLabelsReport.series_labels:type_name -> types.v1.Labels
	21, // 22: querybackend.v1.TimeSeriesQuery.aggregation:type_name -> types.v1.TimeSeriesAggregationType
	15, // 23: querybackend.v1.TimeSeriesReport.query:type_name -> querybackend.v1.TimeSeriesQuery
	22, // 24: querybackend.v1.TimeSeriesReport.time_series:type_name -> types.v1.Series
	17, // 25: querybackend.v1.TreeReport.query:type_name -> querybackend.v1.TreeQuery
	3,  // 26: querybackend.v1.QueryBackendService.Invoke:input_type -> querybackend.v1.InvokeRequest
	6,  // 27: querybackend.v1.QueryBackendService.Invoke:output_type -> querybackend.v1.InvokeResponse
	27, // [27:28] is the sub-list for method output_type
	26, // [26:27] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_querybackend_v1_querybackend_proto_init() }
func file_querybackend_v1_querybackend_proto_init() {
	if File_querybackend_v1_querybackend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_querybackend_v1_querybackend_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InvokeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*InvokeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QueryPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InvokeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Diagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*LabelNamesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*LabelNamesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*LabelValuesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*LabelValuesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SeriesLabelsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SeriesLabelsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSeriesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TimeSeriesReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TreeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_querybackend_v1_querybackend_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TreeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_querybackend_v1_querybackend_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_querybackend_v1_querybackend_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_querybackend_v1_querybackend_proto_goTypes,
		DependencyIndexes: file_querybackend_v1_querybackend_proto_depIdxs,
		EnumInfos:         file_querybackend_v1_querybackend_proto_enumTypes,
		MessageInfos:      file_querybackend_v1_querybackend_proto_msgTypes,
	}.Build()
	File_querybackend_v1_querybackend_proto = out.File
	file_querybackend_v1_querybackend_proto_rawDesc = nil
	file_querybackend_v1_querybackend_proto_goTypes = nil
	file_querybackend_v1_querybackend_proto_depIdxs = nil
}
