// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: status/v1/status.proto

package statusv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/status/v1"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StatusServiceName is the fully-qualified name of the StatusService service.
	StatusServiceName = "status.v1.StatusService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StatusServiceGetBuildInfoProcedure is the fully-qualified name of the StatusService's
	// GetBuildInfo RPC.
	StatusServiceGetBuildInfoProcedure = "/status.v1.StatusService/GetBuildInfo"
	// StatusServiceGetConfigProcedure is the fully-qualified name of the StatusService's GetConfig RPC.
	StatusServiceGetConfigProcedure = "/status.v1.StatusService/GetConfig"
	// StatusServiceGetDiffConfigProcedure is the fully-qualified name of the StatusService's
	// GetDiffConfig RPC.
	StatusServiceGetDiffConfigProcedure = "/status.v1.StatusService/GetDiffConfig"
	// StatusServiceGetDefaultConfigProcedure is the fully-qualified name of the StatusService's
	// GetDefaultConfig RPC.
	StatusServiceGetDefaultConfigProcedure = "/status.v1.StatusService/GetDefaultConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	statusServiceServiceDescriptor                = v1.File_status_v1_status_proto.Services().ByName("StatusService")
	statusServiceGetBuildInfoMethodDescriptor     = statusServiceServiceDescriptor.Methods().ByName("GetBuildInfo")
	statusServiceGetConfigMethodDescriptor        = statusServiceServiceDescriptor.Methods().ByName("GetConfig")
	statusServiceGetDiffConfigMethodDescriptor    = statusServiceServiceDescriptor.Methods().ByName("GetDiffConfig")
	statusServiceGetDefaultConfigMethodDescriptor = statusServiceServiceDescriptor.Methods().ByName("GetDefaultConfig")
)

// StatusServiceClient is a client for the status.v1.StatusService service.
type StatusServiceClient interface {
	// Retrieve build information about the binary
	GetBuildInfo(context.Context, *connect.Request[v1.GetBuildInfoRequest]) (*connect.Response[v1.GetBuildInfoResponse], error)
	// Retrieve the running config
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
	// Retrieve the diff config to the defaults
	GetDiffConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
	GetDefaultConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
}

// NewStatusServiceClient constructs a client for the status.v1.StatusService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StatusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &statusServiceClient{
		getBuildInfo: connect.NewClient[v1.GetBuildInfoRequest, v1.GetBuildInfoResponse](
			httpClient,
			baseURL+StatusServiceGetBuildInfoProcedure,
			connect.WithSchema(statusServiceGetBuildInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[v1.GetConfigRequest, httpbody.HttpBody](
			httpClient,
			baseURL+StatusServiceGetConfigProcedure,
			connect.WithSchema(statusServiceGetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDiffConfig: connect.NewClient[v1.GetConfigRequest, httpbody.HttpBody](
			httpClient,
			baseURL+StatusServiceGetDiffConfigProcedure,
			connect.WithSchema(statusServiceGetDiffConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDefaultConfig: connect.NewClient[v1.GetConfigRequest, httpbody.HttpBody](
			httpClient,
			baseURL+StatusServiceGetDefaultConfigProcedure,
			connect.WithSchema(statusServiceGetDefaultConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// statusServiceClient implements StatusServiceClient.
type statusServiceClient struct {
	getBuildInfo     *connect.Client[v1.GetBuildInfoRequest, v1.GetBuildInfoResponse]
	getConfig        *connect.Client[v1.GetConfigRequest, httpbody.HttpBody]
	getDiffConfig    *connect.Client[v1.GetConfigRequest, httpbody.HttpBody]
	getDefaultConfig *connect.Client[v1.GetConfigRequest, httpbody.HttpBody]
}

// GetBuildInfo calls status.v1.StatusService.GetBuildInfo.
func (c *statusServiceClient) GetBuildInfo(ctx context.Context, req *connect.Request[v1.GetBuildInfoRequest]) (*connect.Response[v1.GetBuildInfoResponse], error) {
	return c.getBuildInfo.CallUnary(ctx, req)
}

// GetConfig calls status.v1.StatusService.GetConfig.
func (c *statusServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetDiffConfig calls status.v1.StatusService.GetDiffConfig.
func (c *statusServiceClient) GetDiffConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return c.getDiffConfig.CallUnary(ctx, req)
}

// GetDefaultConfig calls status.v1.StatusService.GetDefaultConfig.
func (c *statusServiceClient) GetDefaultConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return c.getDefaultConfig.CallUnary(ctx, req)
}

// StatusServiceHandler is an implementation of the status.v1.StatusService service.
type StatusServiceHandler interface {
	// Retrieve build information about the binary
	GetBuildInfo(context.Context, *connect.Request[v1.GetBuildInfoRequest]) (*connect.Response[v1.GetBuildInfoResponse], error)
	// Retrieve the running config
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
	// Retrieve the diff config to the defaults
	GetDiffConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
	GetDefaultConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error)
}

// NewStatusServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatusServiceHandler(svc StatusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	statusServiceGetBuildInfoHandler := connect.NewUnaryHandler(
		StatusServiceGetBuildInfoProcedure,
		svc.GetBuildInfo,
		connect.WithSchema(statusServiceGetBuildInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	statusServiceGetConfigHandler := connect.NewUnaryHandler(
		StatusServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(statusServiceGetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	statusServiceGetDiffConfigHandler := connect.NewUnaryHandler(
		StatusServiceGetDiffConfigProcedure,
		svc.GetDiffConfig,
		connect.WithSchema(statusServiceGetDiffConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	statusServiceGetDefaultConfigHandler := connect.NewUnaryHandler(
		StatusServiceGetDefaultConfigProcedure,
		svc.GetDefaultConfig,
		connect.WithSchema(statusServiceGetDefaultConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/status.v1.StatusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StatusServiceGetBuildInfoProcedure:
			statusServiceGetBuildInfoHandler.ServeHTTP(w, r)
		case StatusServiceGetConfigProcedure:
			statusServiceGetConfigHandler.ServeHTTP(w, r)
		case StatusServiceGetDiffConfigProcedure:
			statusServiceGetDiffConfigHandler.ServeHTTP(w, r)
		case StatusServiceGetDefaultConfigProcedure:
			statusServiceGetDefaultConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStatusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStatusServiceHandler struct{}

func (UnimplementedStatusServiceHandler) GetBuildInfo(context.Context, *connect.Request[v1.GetBuildInfoRequest]) (*connect.Response[v1.GetBuildInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("status.v1.StatusService.GetBuildInfo is not implemented"))
}

func (UnimplementedStatusServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("status.v1.StatusService.GetConfig is not implemented"))
}

func (UnimplementedStatusServiceHandler) GetDiffConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("status.v1.StatusService.GetDiffConfig is not implemented"))
}

func (UnimplementedStatusServiceHandler) GetDefaultConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[httpbody.HttpBody], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("status.v1.StatusService.GetDefaultConfig is not implemented"))
}
