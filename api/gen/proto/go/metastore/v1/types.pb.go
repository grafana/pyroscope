// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: metastore/v1/types.proto

package metastorev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockMeta is a metadata entry that describes the block's contents. A block
// is a collection of datasets that share certain properties, such as shard ID,
// compaction level, tenant ID, time range, creation time, and more.
//
// The block content's format denotes the binary format of the datasets and the
// metadata entry (to address logical dependencies). Each dataset has its own
// table of contents that lists the sections within the dataset. Each dataset
// has its own set of attributes (labels) that describe its specific contents.
type BlockMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FormatVersion uint32                 `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	// Block ID is a unique identifier for the block.
	// This is the only field that is not included into
	// the string table.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// If empty, datasets belong to distinct tenants.
	Tenant          int32      `protobuf:"varint,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Shard           uint32     `protobuf:"varint,4,opt,name=shard,proto3" json:"shard,omitempty"`
	CompactionLevel uint32     `protobuf:"varint,5,opt,name=compaction_level,json=compactionLevel,proto3" json:"compaction_level,omitempty"`
	MinTime         int64      `protobuf:"varint,6,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime         int64      `protobuf:"varint,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	CreatedBy       int32      `protobuf:"varint,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	MetadataOffset  uint64     `protobuf:"varint,12,opt,name=metadata_offset,json=metadataOffset,proto3" json:"metadata_offset,omitempty"`
	Size            uint64     `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Datasets        []*Dataset `protobuf:"bytes,10,rep,name=datasets,proto3" json:"datasets,omitempty"`
	// String table contains strings of the block.
	// By convention, the first string is always an empty string.
	StringTable   []string `protobuf:"bytes,11,rep,name=string_table,json=stringTable,proto3" json:"string_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMeta) Reset() {
	*x = BlockMeta{}
	mi := &file_metastore_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMeta) ProtoMessage() {}

func (x *BlockMeta) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMeta.ProtoReflect.Descriptor instead.
func (*BlockMeta) Descriptor() ([]byte, []int) {
	return file_metastore_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *BlockMeta) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *BlockMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockMeta) GetTenant() int32 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *BlockMeta) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *BlockMeta) GetCompactionLevel() uint32 {
	if x != nil {
		return x.CompactionLevel
	}
	return 0
}

func (x *BlockMeta) GetMinTime() int64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *BlockMeta) GetMaxTime() int64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *BlockMeta) GetCreatedBy() int32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *BlockMeta) GetMetadataOffset() uint64 {
	if x != nil {
		return x.MetadataOffset
	}
	return 0
}

func (x *BlockMeta) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockMeta) GetDatasets() []*Dataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *BlockMeta) GetStringTable() []string {
	if x != nil {
		return x.StringTable
	}
	return nil
}

type Dataset struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Format  uint32                 `protobuf:"varint,9,opt,name=format,proto3" json:"format,omitempty"`
	Tenant  int32                  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Name    int32                  `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	MinTime int64                  `protobuf:"varint,3,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime int64                  `protobuf:"varint,4,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	// Table of contents lists data sections within the tenant
	// service region. The offsets are absolute.
	//
	// The interpretation of the table of contents is specific
	// to the format.
	//
	// By default (format 0), the sections are:
	//   - 0: profiles.parquet
	//   - 1: index.tsdb
	//   - 2: symbols.symdb
	//
	// Format 1 corresponds to the tenant-wide index:
	//   - 0: index.tsdb (dataset index)
	TableOfContents []uint64 `protobuf:"varint,5,rep,packed,name=table_of_contents,json=tableOfContents,proto3" json:"table_of_contents,omitempty"`
	// Size of the dataset in bytes.
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Length prefixed label key-value pairs.
	//
	// Multiple label sets can be associated with a dataset to denote relationships
	// across multiple dimensions. For example, each dataset currently stores data
	// for multiple profile types:
	//   - service_name=A, profile_type=cpu
	//   - service_name=A, profile_type=memory
	//
	// Labels are primarily used to filter datasets based on their attributes.
	// For instance, labels can be used to select datasets containing a specific
	// service.
	//
	// The set of attributes is extensible and can grow over time. For example, a
	// namespace attribute could be added to datasets:
	//   - service_name=A, profile_type=cpu
	//   - service_name=A, profile_type=memory
	//   - service_name=B, namespace=N, profile_type=cpu
	//   - service_name=B, namespace=N, profile_type=memory
	//   - service_name=C, namespace=N, profile_type=cpu
	//   - service_name=C, namespace=N, profile_type=memory
	//
	// This organization enables querying datasets by namespace without accessing
	// the block contents, which significantly improves performance.
	//
	// Metadata labels are not required to be included in the block's TSDB index
	// and may be orthogonal to the data dimensions. Generally, attributes serve
	// two primary purposes:
	//   - To create data scopes that span multiple service, reducing the need to
	//     scan the entire set of block satisfying the query expression, i.e.,
	//     the time range and tenant ID.
	//   - To provide additional information about datasets without altering the
	//     storage schema or access methods.
	//
	// For example, this approach can support cost attribution or similar breakdown
	// analyses. It can also handle data dependencies (e.g., links to external data)
	// using labels.
	//
	// The cardinality of the labels is expected to remain relatively low (fewer
	// than a million unique combinations globally). However, this depends on the
	// metadata storage system.
	//
	// Metadata labels are represented as a slice of `int32` values that refer to
	// strings in the metadata entry's string table. The slice is a sequence of
	// length-prefixed key-value (KV) pairs:
	//
	// len(2) | k1 | v1 | k2 | v2 | len(3) | k1 | v3 | k2 | v4 | k3 | v5
	//
	// The order of KV pairs is not defined. The format is optimized for indexing
	// rather than querying, and it is not intended to be the most space-efficient
	// representation. Since entries are supposed to be indexed, the redundancy of
	// denormalized relationships is not a concern.
	Labels        []int32 `protobuf:"varint,8,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_metastore_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_metastore_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *Dataset) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Dataset) GetTenant() int32 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *Dataset) GetName() int32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *Dataset) GetMinTime() int64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *Dataset) GetMaxTime() int64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *Dataset) GetTableOfContents() []uint64 {
	if x != nil {
		return x.TableOfContents
	}
	return nil
}

func (x *Dataset) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Dataset) GetLabels() []int32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

type BlockList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tenant        string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Shard         uint32                 `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Blocks        []string               `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockList) Reset() {
	*x = BlockList{}
	mi := &file_metastore_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockList) ProtoMessage() {}

func (x *BlockList) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockList.ProtoReflect.Descriptor instead.
func (*BlockList) Descriptor() ([]byte, []int) {
	return file_metastore_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *BlockList) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *BlockList) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *BlockList) GetBlocks() []string {
	if x != nil {
		return x.Blocks
	}
	return nil
}

var File_metastore_v1_types_proto protoreflect.FileDescriptor

const file_metastore_v1_types_proto_rawDesc = "" +
	"\n" +
	"\x18metastore/v1/types.proto\x12\fmetastore.v1\"\x83\x03\n" +
	"\tBlockMeta\x12%\n" +
	"\x0eformat_version\x18\x01 \x01(\rR\rformatVersion\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x16\n" +
	"\x06tenant\x18\x03 \x01(\x05R\x06tenant\x12\x14\n" +
	"\x05shard\x18\x04 \x01(\rR\x05shard\x12)\n" +
	"\x10compaction_level\x18\x05 \x01(\rR\x0fcompactionLevel\x12\x19\n" +
	"\bmin_time\x18\x06 \x01(\x03R\aminTime\x12\x19\n" +
	"\bmax_time\x18\a \x01(\x03R\amaxTime\x12\x1d\n" +
	"\n" +
	"created_by\x18\b \x01(\x05R\tcreatedBy\x12'\n" +
	"\x0fmetadata_offset\x18\f \x01(\x04R\x0emetadataOffset\x12\x12\n" +
	"\x04size\x18\t \x01(\x04R\x04size\x121\n" +
	"\bdatasets\x18\n" +
	" \x03(\v2\x15.metastore.v1.DatasetR\bdatasets\x12!\n" +
	"\fstring_table\x18\v \x03(\tR\vstringTable\"\xe1\x01\n" +
	"\aDataset\x12\x16\n" +
	"\x06format\x18\t \x01(\rR\x06format\x12\x16\n" +
	"\x06tenant\x18\x01 \x01(\x05R\x06tenant\x12\x12\n" +
	"\x04name\x18\x02 \x01(\x05R\x04name\x12\x19\n" +
	"\bmin_time\x18\x03 \x01(\x03R\aminTime\x12\x19\n" +
	"\bmax_time\x18\x04 \x01(\x03R\amaxTime\x12*\n" +
	"\x11table_of_contents\x18\x05 \x03(\x04R\x0ftableOfContents\x12\x12\n" +
	"\x04size\x18\x06 \x01(\x04R\x04size\x12\x16\n" +
	"\x06labels\x18\b \x03(\x05R\x06labelsJ\x04\b\a\x10\b\"Q\n" +
	"\tBlockList\x12\x16\n" +
	"\x06tenant\x18\x01 \x01(\tR\x06tenant\x12\x14\n" +
	"\x05shard\x18\x02 \x01(\rR\x05shard\x12\x16\n" +
	"\x06blocks\x18\x03 \x03(\tR\x06blocksB\xb7\x01\n" +
	"\x10com.metastore.v1B\n" +
	"TypesProtoP\x01ZFgithub.com/grafana/pyroscope/api/gen/proto/go/metastore/v1;metastorev1\xa2\x02\x03MXX\xaa\x02\fMetastore.V1\xca\x02\fMetastore\\V1\xe2\x02\x18Metastore\\V1\\GPBMetadata\xea\x02\rMetastore::V1b\x06proto3"

var (
	file_metastore_v1_types_proto_rawDescOnce sync.Once
	file_metastore_v1_types_proto_rawDescData []byte
)

func file_metastore_v1_types_proto_rawDescGZIP() []byte {
	file_metastore_v1_types_proto_rawDescOnce.Do(func() {
		file_metastore_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metastore_v1_types_proto_rawDesc), len(file_metastore_v1_types_proto_rawDesc)))
	})
	return file_metastore_v1_types_proto_rawDescData
}

var file_metastore_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_metastore_v1_types_proto_goTypes = []any{
	(*BlockMeta)(nil), // 0: metastore.v1.BlockMeta
	(*Dataset)(nil),   // 1: metastore.v1.Dataset
	(*BlockList)(nil), // 2: metastore.v1.BlockList
}
var file_metastore_v1_types_proto_depIdxs = []int32{
	1, // 0: metastore.v1.BlockMeta.datasets:type_name -> metastore.v1.Dataset
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_metastore_v1_types_proto_init() }
func file_metastore_v1_types_proto_init() {
	if File_metastore_v1_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metastore_v1_types_proto_rawDesc), len(file_metastore_v1_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metastore_v1_types_proto_goTypes,
		DependencyIndexes: file_metastore_v1_types_proto_depIdxs,
		MessageInfos:      file_metastore_v1_types_proto_msgTypes,
	}.Build()
	File_metastore_v1_types_proto = out.File
	file_metastore_v1_types_proto_goTypes = nil
	file_metastore_v1_types_proto_depIdxs = nil
}
