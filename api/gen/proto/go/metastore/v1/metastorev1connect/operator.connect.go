// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metastore/v1/operator.proto

package metastorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OperatorServiceName is the fully-qualified name of the OperatorService service.
	OperatorServiceName = "metastore.v1.OperatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OperatorServiceInfoProcedure is the fully-qualified name of the OperatorService's Info RPC.
	OperatorServiceInfoProcedure = "/metastore.v1.OperatorService/Info"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	operatorServiceServiceDescriptor    = v1.File_metastore_v1_operator_proto.Services().ByName("OperatorService")
	operatorServiceInfoMethodDescriptor = operatorServiceServiceDescriptor.Methods().ByName("Info")
)

// OperatorServiceClient is a client for the metastore.v1.OperatorService service.
type OperatorServiceClient interface {
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
}

// NewOperatorServiceClient constructs a client for the metastore.v1.OperatorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OperatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operatorServiceClient{
		info: connect.NewClient[v1.InfoRequest, v1.InfoResponse](
			httpClient,
			baseURL+OperatorServiceInfoProcedure,
			connect.WithSchema(operatorServiceInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// operatorServiceClient implements OperatorServiceClient.
type operatorServiceClient struct {
	info *connect.Client[v1.InfoRequest, v1.InfoResponse]
}

// Info calls metastore.v1.OperatorService.Info.
func (c *operatorServiceClient) Info(ctx context.Context, req *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return c.info.CallUnary(ctx, req)
}

// OperatorServiceHandler is an implementation of the metastore.v1.OperatorService service.
type OperatorServiceHandler interface {
	Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error)
}

// NewOperatorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperatorServiceHandler(svc OperatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	operatorServiceInfoHandler := connect.NewUnaryHandler(
		OperatorServiceInfoProcedure,
		svc.Info,
		connect.WithSchema(operatorServiceInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metastore.v1.OperatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OperatorServiceInfoProcedure:
			operatorServiceInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOperatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOperatorServiceHandler struct{}

func (UnimplementedOperatorServiceHandler) Info(context.Context, *connect.Request[v1.InfoRequest]) (*connect.Response[v1.InfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.OperatorService.Info is not implemented"))
}
