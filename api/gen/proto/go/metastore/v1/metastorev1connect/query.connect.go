// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metastore/v1/query.proto

package metastorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetadataQueryServiceName is the fully-qualified name of the MetadataQueryService service.
	MetadataQueryServiceName = "metastore.v1.MetadataQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetadataQueryServiceQueryMetadataProcedure is the fully-qualified name of the
	// MetadataQueryService's QueryMetadata RPC.
	MetadataQueryServiceQueryMetadataProcedure = "/metastore.v1.MetadataQueryService/QueryMetadata"
	// MetadataQueryServiceQueryMetadataLabelsProcedure is the fully-qualified name of the
	// MetadataQueryService's QueryMetadataLabels RPC.
	MetadataQueryServiceQueryMetadataLabelsProcedure = "/metastore.v1.MetadataQueryService/QueryMetadataLabels"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	metadataQueryServiceServiceDescriptor                   = v1.File_metastore_v1_query_proto.Services().ByName("MetadataQueryService")
	metadataQueryServiceQueryMetadataMethodDescriptor       = metadataQueryServiceServiceDescriptor.Methods().ByName("QueryMetadata")
	metadataQueryServiceQueryMetadataLabelsMethodDescriptor = metadataQueryServiceServiceDescriptor.Methods().ByName("QueryMetadataLabels")
)

// MetadataQueryServiceClient is a client for the metastore.v1.MetadataQueryService service.
type MetadataQueryServiceClient interface {
	QueryMetadata(context.Context, *connect.Request[v1.QueryMetadataRequest]) (*connect.Response[v1.QueryMetadataResponse], error)
	QueryMetadataLabels(context.Context, *connect.Request[v1.QueryMetadataLabelsRequest]) (*connect.Response[v1.QueryMetadataLabelsResponse], error)
}

// NewMetadataQueryServiceClient constructs a client for the metastore.v1.MetadataQueryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetadataQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetadataQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metadataQueryServiceClient{
		queryMetadata: connect.NewClient[v1.QueryMetadataRequest, v1.QueryMetadataResponse](
			httpClient,
			baseURL+MetadataQueryServiceQueryMetadataProcedure,
			connect.WithSchema(metadataQueryServiceQueryMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		queryMetadataLabels: connect.NewClient[v1.QueryMetadataLabelsRequest, v1.QueryMetadataLabelsResponse](
			httpClient,
			baseURL+MetadataQueryServiceQueryMetadataLabelsProcedure,
			connect.WithSchema(metadataQueryServiceQueryMetadataLabelsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// metadataQueryServiceClient implements MetadataQueryServiceClient.
type metadataQueryServiceClient struct {
	queryMetadata       *connect.Client[v1.QueryMetadataRequest, v1.QueryMetadataResponse]
	queryMetadataLabels *connect.Client[v1.QueryMetadataLabelsRequest, v1.QueryMetadataLabelsResponse]
}

// QueryMetadata calls metastore.v1.MetadataQueryService.QueryMetadata.
func (c *metadataQueryServiceClient) QueryMetadata(ctx context.Context, req *connect.Request[v1.QueryMetadataRequest]) (*connect.Response[v1.QueryMetadataResponse], error) {
	return c.queryMetadata.CallUnary(ctx, req)
}

// QueryMetadataLabels calls metastore.v1.MetadataQueryService.QueryMetadataLabels.
func (c *metadataQueryServiceClient) QueryMetadataLabels(ctx context.Context, req *connect.Request[v1.QueryMetadataLabelsRequest]) (*connect.Response[v1.QueryMetadataLabelsResponse], error) {
	return c.queryMetadataLabels.CallUnary(ctx, req)
}

// MetadataQueryServiceHandler is an implementation of the metastore.v1.MetadataQueryService
// service.
type MetadataQueryServiceHandler interface {
	QueryMetadata(context.Context, *connect.Request[v1.QueryMetadataRequest]) (*connect.Response[v1.QueryMetadataResponse], error)
	QueryMetadataLabels(context.Context, *connect.Request[v1.QueryMetadataLabelsRequest]) (*connect.Response[v1.QueryMetadataLabelsResponse], error)
}

// NewMetadataQueryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetadataQueryServiceHandler(svc MetadataQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metadataQueryServiceQueryMetadataHandler := connect.NewUnaryHandler(
		MetadataQueryServiceQueryMetadataProcedure,
		svc.QueryMetadata,
		connect.WithSchema(metadataQueryServiceQueryMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	metadataQueryServiceQueryMetadataLabelsHandler := connect.NewUnaryHandler(
		MetadataQueryServiceQueryMetadataLabelsProcedure,
		svc.QueryMetadataLabels,
		connect.WithSchema(metadataQueryServiceQueryMetadataLabelsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metastore.v1.MetadataQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetadataQueryServiceQueryMetadataProcedure:
			metadataQueryServiceQueryMetadataHandler.ServeHTTP(w, r)
		case MetadataQueryServiceQueryMetadataLabelsProcedure:
			metadataQueryServiceQueryMetadataLabelsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetadataQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetadataQueryServiceHandler struct{}

func (UnimplementedMetadataQueryServiceHandler) QueryMetadata(context.Context, *connect.Request[v1.QueryMetadataRequest]) (*connect.Response[v1.QueryMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.MetadataQueryService.QueryMetadata is not implemented"))
}

func (UnimplementedMetadataQueryServiceHandler) QueryMetadataLabels(context.Context, *connect.Request[v1.QueryMetadataLabelsRequest]) (*connect.Response[v1.QueryMetadataLabelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.MetadataQueryService.QueryMetadataLabels is not implemented"))
}
