// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metastore/v1/compactor.proto

package metastorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CompactionServiceName is the fully-qualified name of the CompactionService service.
	CompactionServiceName = "metastore.v1.CompactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CompactionServicePollCompactionJobsProcedure is the fully-qualified name of the
	// CompactionService's PollCompactionJobs RPC.
	CompactionServicePollCompactionJobsProcedure = "/metastore.v1.CompactionService/PollCompactionJobs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	compactionServiceServiceDescriptor                  = v1.File_metastore_v1_compactor_proto.Services().ByName("CompactionService")
	compactionServicePollCompactionJobsMethodDescriptor = compactionServiceServiceDescriptor.Methods().ByName("PollCompactionJobs")
)

// CompactionServiceClient is a client for the metastore.v1.CompactionService service.
type CompactionServiceClient interface {
	// Used to both retrieve jobs and update the jobs status at the same time.
	PollCompactionJobs(context.Context, *connect.Request[v1.PollCompactionJobsRequest]) (*connect.Response[v1.PollCompactionJobsResponse], error)
}

// NewCompactionServiceClient constructs a client for the metastore.v1.CompactionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCompactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CompactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &compactionServiceClient{
		pollCompactionJobs: connect.NewClient[v1.PollCompactionJobsRequest, v1.PollCompactionJobsResponse](
			httpClient,
			baseURL+CompactionServicePollCompactionJobsProcedure,
			connect.WithSchema(compactionServicePollCompactionJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// compactionServiceClient implements CompactionServiceClient.
type compactionServiceClient struct {
	pollCompactionJobs *connect.Client[v1.PollCompactionJobsRequest, v1.PollCompactionJobsResponse]
}

// PollCompactionJobs calls metastore.v1.CompactionService.PollCompactionJobs.
func (c *compactionServiceClient) PollCompactionJobs(ctx context.Context, req *connect.Request[v1.PollCompactionJobsRequest]) (*connect.Response[v1.PollCompactionJobsResponse], error) {
	return c.pollCompactionJobs.CallUnary(ctx, req)
}

// CompactionServiceHandler is an implementation of the metastore.v1.CompactionService service.
type CompactionServiceHandler interface {
	// Used to both retrieve jobs and update the jobs status at the same time.
	PollCompactionJobs(context.Context, *connect.Request[v1.PollCompactionJobsRequest]) (*connect.Response[v1.PollCompactionJobsResponse], error)
}

// NewCompactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCompactionServiceHandler(svc CompactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	compactionServicePollCompactionJobsHandler := connect.NewUnaryHandler(
		CompactionServicePollCompactionJobsProcedure,
		svc.PollCompactionJobs,
		connect.WithSchema(compactionServicePollCompactionJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metastore.v1.CompactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CompactionServicePollCompactionJobsProcedure:
			compactionServicePollCompactionJobsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCompactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCompactionServiceHandler struct{}

func (UnimplementedCompactionServiceHandler) PollCompactionJobs(context.Context, *connect.Request[v1.PollCompactionJobsRequest]) (*connect.Response[v1.PollCompactionJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.CompactionService.PollCompactionJobs is not implemented"))
}
