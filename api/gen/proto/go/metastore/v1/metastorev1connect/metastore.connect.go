// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metastore/v1/metastore.proto

package metastorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MetastoreServiceName is the fully-qualified name of the MetastoreService service.
	MetastoreServiceName = "metastore.v1.MetastoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MetastoreServiceAddBlockProcedure is the fully-qualified name of the MetastoreService's AddBlock
	// RPC.
	MetastoreServiceAddBlockProcedure = "/metastore.v1.MetastoreService/AddBlock"
	// MetastoreServiceListBlocksForQueryProcedure is the fully-qualified name of the MetastoreService's
	// ListBlocksForQuery RPC.
	MetastoreServiceListBlocksForQueryProcedure = "/metastore.v1.MetastoreService/ListBlocksForQuery"
	// MetastoreServiceReadIndexProcedure is the fully-qualified name of the MetastoreService's
	// ReadIndex RPC.
	MetastoreServiceReadIndexProcedure = "/metastore.v1.MetastoreService/ReadIndex"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	metastoreServiceServiceDescriptor                  = v1.File_metastore_v1_metastore_proto.Services().ByName("MetastoreService")
	metastoreServiceAddBlockMethodDescriptor           = metastoreServiceServiceDescriptor.Methods().ByName("AddBlock")
	metastoreServiceListBlocksForQueryMethodDescriptor = metastoreServiceServiceDescriptor.Methods().ByName("ListBlocksForQuery")
	metastoreServiceReadIndexMethodDescriptor          = metastoreServiceServiceDescriptor.Methods().ByName("ReadIndex")
)

// MetastoreServiceClient is a client for the metastore.v1.MetastoreService service.
type MetastoreServiceClient interface {
	AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error)
	ListBlocksForQuery(context.Context, *connect.Request[v1.ListBlocksForQueryRequest]) (*connect.Response[v1.ListBlocksForQueryResponse], error)
	ReadIndex(context.Context, *connect.Request[v1.ReadIndexRequest]) (*connect.Response[v1.ReadIndexResponse], error)
}

// NewMetastoreServiceClient constructs a client for the metastore.v1.MetastoreService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetastoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MetastoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metastoreServiceClient{
		addBlock: connect.NewClient[v1.AddBlockRequest, v1.AddBlockResponse](
			httpClient,
			baseURL+MetastoreServiceAddBlockProcedure,
			connect.WithSchema(metastoreServiceAddBlockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listBlocksForQuery: connect.NewClient[v1.ListBlocksForQueryRequest, v1.ListBlocksForQueryResponse](
			httpClient,
			baseURL+MetastoreServiceListBlocksForQueryProcedure,
			connect.WithSchema(metastoreServiceListBlocksForQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readIndex: connect.NewClient[v1.ReadIndexRequest, v1.ReadIndexResponse](
			httpClient,
			baseURL+MetastoreServiceReadIndexProcedure,
			connect.WithSchema(metastoreServiceReadIndexMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// metastoreServiceClient implements MetastoreServiceClient.
type metastoreServiceClient struct {
	addBlock           *connect.Client[v1.AddBlockRequest, v1.AddBlockResponse]
	listBlocksForQuery *connect.Client[v1.ListBlocksForQueryRequest, v1.ListBlocksForQueryResponse]
	readIndex          *connect.Client[v1.ReadIndexRequest, v1.ReadIndexResponse]
}

// AddBlock calls metastore.v1.MetastoreService.AddBlock.
func (c *metastoreServiceClient) AddBlock(ctx context.Context, req *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error) {
	return c.addBlock.CallUnary(ctx, req)
}

// ListBlocksForQuery calls metastore.v1.MetastoreService.ListBlocksForQuery.
func (c *metastoreServiceClient) ListBlocksForQuery(ctx context.Context, req *connect.Request[v1.ListBlocksForQueryRequest]) (*connect.Response[v1.ListBlocksForQueryResponse], error) {
	return c.listBlocksForQuery.CallUnary(ctx, req)
}

// ReadIndex calls metastore.v1.MetastoreService.ReadIndex.
func (c *metastoreServiceClient) ReadIndex(ctx context.Context, req *connect.Request[v1.ReadIndexRequest]) (*connect.Response[v1.ReadIndexResponse], error) {
	return c.readIndex.CallUnary(ctx, req)
}

// MetastoreServiceHandler is an implementation of the metastore.v1.MetastoreService service.
type MetastoreServiceHandler interface {
	AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error)
	ListBlocksForQuery(context.Context, *connect.Request[v1.ListBlocksForQueryRequest]) (*connect.Response[v1.ListBlocksForQueryResponse], error)
	ReadIndex(context.Context, *connect.Request[v1.ReadIndexRequest]) (*connect.Response[v1.ReadIndexResponse], error)
}

// NewMetastoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetastoreServiceHandler(svc MetastoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	metastoreServiceAddBlockHandler := connect.NewUnaryHandler(
		MetastoreServiceAddBlockProcedure,
		svc.AddBlock,
		connect.WithSchema(metastoreServiceAddBlockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	metastoreServiceListBlocksForQueryHandler := connect.NewUnaryHandler(
		MetastoreServiceListBlocksForQueryProcedure,
		svc.ListBlocksForQuery,
		connect.WithSchema(metastoreServiceListBlocksForQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	metastoreServiceReadIndexHandler := connect.NewUnaryHandler(
		MetastoreServiceReadIndexProcedure,
		svc.ReadIndex,
		connect.WithSchema(metastoreServiceReadIndexMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metastore.v1.MetastoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MetastoreServiceAddBlockProcedure:
			metastoreServiceAddBlockHandler.ServeHTTP(w, r)
		case MetastoreServiceListBlocksForQueryProcedure:
			metastoreServiceListBlocksForQueryHandler.ServeHTTP(w, r)
		case MetastoreServiceReadIndexProcedure:
			metastoreServiceReadIndexHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMetastoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetastoreServiceHandler struct{}

func (UnimplementedMetastoreServiceHandler) AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.MetastoreService.AddBlock is not implemented"))
}

func (UnimplementedMetastoreServiceHandler) ListBlocksForQuery(context.Context, *connect.Request[v1.ListBlocksForQueryRequest]) (*connect.Response[v1.ListBlocksForQueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.MetastoreService.ListBlocksForQuery is not implemented"))
}

func (UnimplementedMetastoreServiceHandler) ReadIndex(context.Context, *connect.Request[v1.ReadIndexRequest]) (*connect.Response[v1.ReadIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.MetastoreService.ReadIndex is not implemented"))
}
