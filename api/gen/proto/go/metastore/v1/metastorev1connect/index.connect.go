// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: metastore/v1/index.proto

package metastorev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IndexServiceName is the fully-qualified name of the IndexService service.
	IndexServiceName = "metastore.v1.IndexService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IndexServiceAddBlockProcedure is the fully-qualified name of the IndexService's AddBlock RPC.
	IndexServiceAddBlockProcedure = "/metastore.v1.IndexService/AddBlock"
	// IndexServiceGetBlockMetadataProcedure is the fully-qualified name of the IndexService's
	// GetBlockMetadata RPC.
	IndexServiceGetBlockMetadataProcedure = "/metastore.v1.IndexService/GetBlockMetadata"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	indexServiceServiceDescriptor                = v1.File_metastore_v1_index_proto.Services().ByName("IndexService")
	indexServiceAddBlockMethodDescriptor         = indexServiceServiceDescriptor.Methods().ByName("AddBlock")
	indexServiceGetBlockMetadataMethodDescriptor = indexServiceServiceDescriptor.Methods().ByName("GetBlockMetadata")
)

// IndexServiceClient is a client for the metastore.v1.IndexService service.
type IndexServiceClient interface {
	AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error)
	GetBlockMetadata(context.Context, *connect.Request[v1.GetBlockMetadataRequest]) (*connect.Response[v1.GetBlockMetadataResponse], error)
}

// NewIndexServiceClient constructs a client for the metastore.v1.IndexService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIndexServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IndexServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &indexServiceClient{
		addBlock: connect.NewClient[v1.AddBlockRequest, v1.AddBlockResponse](
			httpClient,
			baseURL+IndexServiceAddBlockProcedure,
			connect.WithSchema(indexServiceAddBlockMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBlockMetadata: connect.NewClient[v1.GetBlockMetadataRequest, v1.GetBlockMetadataResponse](
			httpClient,
			baseURL+IndexServiceGetBlockMetadataProcedure,
			connect.WithSchema(indexServiceGetBlockMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// indexServiceClient implements IndexServiceClient.
type indexServiceClient struct {
	addBlock         *connect.Client[v1.AddBlockRequest, v1.AddBlockResponse]
	getBlockMetadata *connect.Client[v1.GetBlockMetadataRequest, v1.GetBlockMetadataResponse]
}

// AddBlock calls metastore.v1.IndexService.AddBlock.
func (c *indexServiceClient) AddBlock(ctx context.Context, req *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error) {
	return c.addBlock.CallUnary(ctx, req)
}

// GetBlockMetadata calls metastore.v1.IndexService.GetBlockMetadata.
func (c *indexServiceClient) GetBlockMetadata(ctx context.Context, req *connect.Request[v1.GetBlockMetadataRequest]) (*connect.Response[v1.GetBlockMetadataResponse], error) {
	return c.getBlockMetadata.CallUnary(ctx, req)
}

// IndexServiceHandler is an implementation of the metastore.v1.IndexService service.
type IndexServiceHandler interface {
	AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error)
	GetBlockMetadata(context.Context, *connect.Request[v1.GetBlockMetadataRequest]) (*connect.Response[v1.GetBlockMetadataResponse], error)
}

// NewIndexServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIndexServiceHandler(svc IndexServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	indexServiceAddBlockHandler := connect.NewUnaryHandler(
		IndexServiceAddBlockProcedure,
		svc.AddBlock,
		connect.WithSchema(indexServiceAddBlockMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	indexServiceGetBlockMetadataHandler := connect.NewUnaryHandler(
		IndexServiceGetBlockMetadataProcedure,
		svc.GetBlockMetadata,
		connect.WithSchema(indexServiceGetBlockMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/metastore.v1.IndexService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IndexServiceAddBlockProcedure:
			indexServiceAddBlockHandler.ServeHTTP(w, r)
		case IndexServiceGetBlockMetadataProcedure:
			indexServiceGetBlockMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIndexServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIndexServiceHandler struct{}

func (UnimplementedIndexServiceHandler) AddBlock(context.Context, *connect.Request[v1.AddBlockRequest]) (*connect.Response[v1.AddBlockResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.IndexService.AddBlock is not implemented"))
}

func (UnimplementedIndexServiceHandler) GetBlockMetadata(context.Context, *connect.Request[v1.GetBlockMetadataRequest]) (*connect.Response[v1.GetBlockMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("metastore.v1.IndexService.GetBlockMetadata is not implemented"))
}
