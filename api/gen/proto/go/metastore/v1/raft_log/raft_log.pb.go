// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: metastore/v1/raft_log/raft_log.proto

package raft_log

import (
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/metastore/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftCommand int32

const (
	RaftCommand_RAFT_COMMAND_UNKNOWN                    RaftCommand = 0
	RaftCommand_RAFT_COMMAND_ADD_BLOCK_METADATA         RaftCommand = 1
	RaftCommand_RAFT_COMMAND_GET_COMPACTION_PLAN_UPDATE RaftCommand = 2
	RaftCommand_RAFT_COMMAND_UPDATE_COMPACTION_PLAN     RaftCommand = 3
)

// Enum value maps for RaftCommand.
var (
	RaftCommand_name = map[int32]string{
		0: "RAFT_COMMAND_UNKNOWN",
		1: "RAFT_COMMAND_ADD_BLOCK_METADATA",
		2: "RAFT_COMMAND_GET_COMPACTION_PLAN_UPDATE",
		3: "RAFT_COMMAND_UPDATE_COMPACTION_PLAN",
	}
	RaftCommand_value = map[string]int32{
		"RAFT_COMMAND_UNKNOWN":                    0,
		"RAFT_COMMAND_ADD_BLOCK_METADATA":         1,
		"RAFT_COMMAND_GET_COMPACTION_PLAN_UPDATE": 2,
		"RAFT_COMMAND_UPDATE_COMPACTION_PLAN":     3,
	}
)

func (x RaftCommand) Enum() *RaftCommand {
	p := new(RaftCommand)
	*p = x
	return p
}

func (x RaftCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_metastore_v1_raft_log_raft_log_proto_enumTypes[0].Descriptor()
}

func (RaftCommand) Type() protoreflect.EnumType {
	return &file_metastore_v1_raft_log_raft_log_proto_enumTypes[0]
}

func (x RaftCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftCommand.Descriptor instead.
func (RaftCommand) EnumDescriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{0}
}

type AddBlockMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.BlockMeta `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AddBlockMetadataRequest) Reset() {
	*x = AddBlockMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlockMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlockMetadataRequest) ProtoMessage() {}

func (x *AddBlockMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlockMetadataRequest.ProtoReflect.Descriptor instead.
func (*AddBlockMetadataRequest) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{0}
}

func (x *AddBlockMetadataRequest) GetMetadata() *v1.BlockMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AddBlockMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddBlockMetadataResponse) Reset() {
	*x = AddBlockMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlockMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlockMetadataResponse) ProtoMessage() {}

func (x *AddBlockMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlockMetadataResponse.ProtoReflect.Descriptor instead.
func (*AddBlockMetadataResponse) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{1}
}

// GetCompactionPlanUpdateRequest requests CompactionPlanUpdate.
// The resulting plan should be proposed to the raft members.
// This is a read-only operation: it MUST NOT alter the state.
type GetCompactionPlanUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CompactionJobStatusUpdate is a change
	// requested by the compaction worker.
	StatusUpdates []*CompactionJobStatusUpdate `protobuf:"bytes,1,rep,name=status_updates,json=statusUpdates,proto3" json:"status_updates,omitempty"`
	AssignJobsMax uint32                       `protobuf:"varint,2,opt,name=assign_jobs_max,json=assignJobsMax,proto3" json:"assign_jobs_max,omitempty"`
}

func (x *GetCompactionPlanUpdateRequest) Reset() {
	*x = GetCompactionPlanUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompactionPlanUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompactionPlanUpdateRequest) ProtoMessage() {}

func (x *GetCompactionPlanUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompactionPlanUpdateRequest.ProtoReflect.Descriptor instead.
func (*GetCompactionPlanUpdateRequest) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{2}
}

func (x *GetCompactionPlanUpdateRequest) GetStatusUpdates() []*CompactionJobStatusUpdate {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

func (x *GetCompactionPlanUpdateRequest) GetAssignJobsMax() uint32 {
	if x != nil {
		return x.AssignJobsMax
	}
	return 0
}

type CompactionJobStatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Token  uint64                 `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	Status v1.CompactionJobStatus `protobuf:"varint,3,opt,name=status,proto3,enum=metastore.v1.CompactionJobStatus" json:"status,omitempty"`
}

func (x *CompactionJobStatusUpdate) Reset() {
	*x = CompactionJobStatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionJobStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionJobStatusUpdate) ProtoMessage() {}

func (x *CompactionJobStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionJobStatusUpdate.ProtoReflect.Descriptor instead.
func (*CompactionJobStatusUpdate) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{3}
}

func (x *CompactionJobStatusUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompactionJobStatusUpdate) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *CompactionJobStatusUpdate) GetStatus() v1.CompactionJobStatus {
	if x != nil {
		return x.Status
	}
	return v1.CompactionJobStatus(0)
}

// GetCompactionPlanUpdateResponse includes the planned change.
// The plan should be proposed to the raft members.
type GetCompactionPlanUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term       uint64                `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	PlanUpdate *CompactionPlanUpdate `protobuf:"bytes,2,opt,name=plan_update,json=planUpdate,proto3" json:"plan_update,omitempty"`
}

func (x *GetCompactionPlanUpdateResponse) Reset() {
	*x = GetCompactionPlanUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompactionPlanUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompactionPlanUpdateResponse) ProtoMessage() {}

func (x *GetCompactionPlanUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompactionPlanUpdateResponse.ProtoReflect.Descriptor instead.
func (*GetCompactionPlanUpdateResponse) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{4}
}

func (x *GetCompactionPlanUpdateResponse) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *GetCompactionPlanUpdateResponse) GetPlanUpdate() *CompactionPlanUpdate {
	if x != nil {
		return x.PlanUpdate
	}
	return nil
}

type CompactionPlanUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewJobs       []*NewCompactionJob       `protobuf:"bytes,1,rep,name=new_jobs,json=newJobs,proto3" json:"new_jobs,omitempty"`
	AssignedJobs  []*AssignedCompactionJob  `protobuf:"bytes,2,rep,name=assigned_jobs,json=assignedJobs,proto3" json:"assigned_jobs,omitempty"`
	UpdatedJobs   []*UpdatedCompactionJob   `protobuf:"bytes,3,rep,name=updated_jobs,json=updatedJobs,proto3" json:"updated_jobs,omitempty"`
	CompletedJobs []*CompletedCompactionJob `protobuf:"bytes,4,rep,name=completed_jobs,json=completedJobs,proto3" json:"completed_jobs,omitempty"`
}

func (x *CompactionPlanUpdate) Reset() {
	*x = CompactionPlanUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionPlanUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionPlanUpdate) ProtoMessage() {}

func (x *CompactionPlanUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionPlanUpdate.ProtoReflect.Descriptor instead.
func (*CompactionPlanUpdate) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{5}
}

func (x *CompactionPlanUpdate) GetNewJobs() []*NewCompactionJob {
	if x != nil {
		return x.NewJobs
	}
	return nil
}

func (x *CompactionPlanUpdate) GetAssignedJobs() []*AssignedCompactionJob {
	if x != nil {
		return x.AssignedJobs
	}
	return nil
}

func (x *CompactionPlanUpdate) GetUpdatedJobs() []*UpdatedCompactionJob {
	if x != nil {
		return x.UpdatedJobs
	}
	return nil
}

func (x *CompactionPlanUpdate) GetCompletedJobs() []*CompletedCompactionJob {
	if x != nil {
		return x.CompletedJobs
	}
	return nil
}

type NewCompactionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *CompactionJobState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Plan  *CompactionJobPlan  `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *NewCompactionJob) Reset() {
	*x = NewCompactionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCompactionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCompactionJob) ProtoMessage() {}

func (x *NewCompactionJob) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCompactionJob.ProtoReflect.Descriptor instead.
func (*NewCompactionJob) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{6}
}

func (x *NewCompactionJob) GetState() *CompactionJobState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *NewCompactionJob) GetPlan() *CompactionJobPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type AssignedCompactionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *CompactionJobState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Plan  *CompactionJobPlan  `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *AssignedCompactionJob) Reset() {
	*x = AssignedCompactionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignedCompactionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedCompactionJob) ProtoMessage() {}

func (x *AssignedCompactionJob) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedCompactionJob.ProtoReflect.Descriptor instead.
func (*AssignedCompactionJob) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{7}
}

func (x *AssignedCompactionJob) GetState() *CompactionJobState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AssignedCompactionJob) GetPlan() *CompactionJobPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type UpdatedCompactionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *CompactionJobState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UpdatedCompactionJob) Reset() {
	*x = UpdatedCompactionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatedCompactionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatedCompactionJob) ProtoMessage() {}

func (x *UpdatedCompactionJob) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatedCompactionJob.ProtoReflect.Descriptor instead.
func (*UpdatedCompactionJob) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatedCompactionJob) GetState() *CompactionJobState {
	if x != nil {
		return x.State
	}
	return nil
}

type CompletedCompactionJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           *CompactionJobState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	CompactedBlocks *v1.CompactedBlocks `protobuf:"bytes,2,opt,name=compacted_blocks,json=compactedBlocks,proto3" json:"compacted_blocks,omitempty"`
}

func (x *CompletedCompactionJob) Reset() {
	*x = CompletedCompactionJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletedCompactionJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletedCompactionJob) ProtoMessage() {}

func (x *CompletedCompactionJob) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletedCompactionJob.ProtoReflect.Descriptor instead.
func (*CompletedCompactionJob) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{9}
}

func (x *CompletedCompactionJob) GetState() *CompactionJobState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CompletedCompactionJob) GetCompactedBlocks() *v1.CompactedBlocks {
	if x != nil {
		return x.CompactedBlocks
	}
	return nil
}

// CompactionJobState is produced in response to
// the compaction worker status update request.
//
// Compaction level and other attributes that
// affect the scheduling order or status update
// handling should be included into the message.
type CompactionJobState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CompactionLevel uint32                 `protobuf:"varint,2,opt,name=compaction_level,json=compactionLevel,proto3" json:"compaction_level,omitempty"`
	Status          v1.CompactionJobStatus `protobuf:"varint,3,opt,name=status,proto3,enum=metastore.v1.CompactionJobStatus" json:"status,omitempty"`
	Token           uint64                 `protobuf:"varint,4,opt,name=token,proto3" json:"token,omitempty"`
	LeaseExpiresAt  int64                  `protobuf:"varint,5,opt,name=lease_expires_at,json=leaseExpiresAt,proto3" json:"lease_expires_at,omitempty"`
	AddedAt         int64                  `protobuf:"varint,6,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty"`
	Failures        uint32                 `protobuf:"varint,7,opt,name=failures,proto3" json:"failures,omitempty"`
}

func (x *CompactionJobState) Reset() {
	*x = CompactionJobState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionJobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionJobState) ProtoMessage() {}

func (x *CompactionJobState) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionJobState.ProtoReflect.Descriptor instead.
func (*CompactionJobState) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{10}
}

func (x *CompactionJobState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompactionJobState) GetCompactionLevel() uint32 {
	if x != nil {
		return x.CompactionLevel
	}
	return 0
}

func (x *CompactionJobState) GetStatus() v1.CompactionJobStatus {
	if x != nil {
		return x.Status
	}
	return v1.CompactionJobStatus(0)
}

func (x *CompactionJobState) GetToken() uint64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *CompactionJobState) GetLeaseExpiresAt() int64 {
	if x != nil {
		return x.LeaseExpiresAt
	}
	return 0
}

func (x *CompactionJobState) GetAddedAt() int64 {
	if x != nil {
		return x.AddedAt
	}
	return 0
}

func (x *CompactionJobState) GetFailures() uint32 {
	if x != nil {
		return x.Failures
	}
	return 0
}

type CompactionJobPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Blocks to be compacted.
	Tenant          string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Shard           uint32   `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	CompactionLevel uint32   `protobuf:"varint,4,opt,name=compaction_level,json=compactionLevel,proto3" json:"compaction_level,omitempty"`
	SourceBlocks    []string `protobuf:"bytes,5,rep,name=source_blocks,json=sourceBlocks,proto3" json:"source_blocks,omitempty"`
	// Objects to be deleted.
	Tombstones []*v1.Tombstones `protobuf:"bytes,6,rep,name=tombstones,proto3" json:"tombstones,omitempty"`
}

func (x *CompactionJobPlan) Reset() {
	*x = CompactionJobPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionJobPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionJobPlan) ProtoMessage() {}

func (x *CompactionJobPlan) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionJobPlan.ProtoReflect.Descriptor instead.
func (*CompactionJobPlan) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{11}
}

func (x *CompactionJobPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompactionJobPlan) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CompactionJobPlan) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *CompactionJobPlan) GetCompactionLevel() uint32 {
	if x != nil {
		return x.CompactionLevel
	}
	return 0
}

func (x *CompactionJobPlan) GetSourceBlocks() []string {
	if x != nil {
		return x.SourceBlocks
	}
	return nil
}

func (x *CompactionJobPlan) GetTombstones() []*v1.Tombstones {
	if x != nil {
		return x.Tombstones
	}
	return nil
}

// UpdateCompactionPlanRequest proposes compaction plan changes.
type UpdateCompactionPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term       uint64                `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	PlanUpdate *CompactionPlanUpdate `protobuf:"bytes,2,opt,name=plan_update,json=planUpdate,proto3" json:"plan_update,omitempty"`
}

func (x *UpdateCompactionPlanRequest) Reset() {
	*x = UpdateCompactionPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompactionPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompactionPlanRequest) ProtoMessage() {}

func (x *UpdateCompactionPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompactionPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateCompactionPlanRequest) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCompactionPlanRequest) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *UpdateCompactionPlanRequest) GetPlanUpdate() *CompactionPlanUpdate {
	if x != nil {
		return x.PlanUpdate
	}
	return nil
}

type UpdateCompactionPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanUpdate *CompactionPlanUpdate `protobuf:"bytes,1,opt,name=plan_update,json=planUpdate,proto3" json:"plan_update,omitempty"`
}

func (x *UpdateCompactionPlanResponse) Reset() {
	*x = UpdateCompactionPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompactionPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompactionPlanResponse) ProtoMessage() {}

func (x *UpdateCompactionPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metastore_v1_raft_log_raft_log_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompactionPlanResponse.ProtoReflect.Descriptor instead.
func (*UpdateCompactionPlanResponse) Descriptor() ([]byte, []int) {
	return file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCompactionPlanResponse) GetPlanUpdate() *CompactionPlanUpdate {
	if x != nil {
		return x.PlanUpdate
	}
	return nil
}

var File_metastore_v1_raft_log_raft_log_proto protoreflect.FileDescriptor

var file_metastore_v1_raft_log_raft_log_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x1a, 0x1c, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6a, 0x6f,
	0x62, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x80, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x77, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61,
	0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x22, 0x7c, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22,
	0x4a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x16,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x72,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x5f, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2a, 0xa2, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x42, 0x9d, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x42, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2f, 0x70, 0x79,
	0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0xa2, 0x02,
	0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0xca, 0x02,
	0x07, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0xe2, 0x02, 0x13, 0x52, 0x61, 0x66, 0x74, 0x4c,
	0x6f, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x07, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metastore_v1_raft_log_raft_log_proto_rawDescOnce sync.Once
	file_metastore_v1_raft_log_raft_log_proto_rawDescData = file_metastore_v1_raft_log_raft_log_proto_rawDesc
)

func file_metastore_v1_raft_log_raft_log_proto_rawDescGZIP() []byte {
	file_metastore_v1_raft_log_raft_log_proto_rawDescOnce.Do(func() {
		file_metastore_v1_raft_log_raft_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_metastore_v1_raft_log_raft_log_proto_rawDescData)
	})
	return file_metastore_v1_raft_log_raft_log_proto_rawDescData
}

var file_metastore_v1_raft_log_raft_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_metastore_v1_raft_log_raft_log_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_metastore_v1_raft_log_raft_log_proto_goTypes = []any{
	(RaftCommand)(0),                        // 0: raft_log.RaftCommand
	(*AddBlockMetadataRequest)(nil),         // 1: raft_log.AddBlockMetadataRequest
	(*AddBlockMetadataResponse)(nil),        // 2: raft_log.AddBlockMetadataResponse
	(*GetCompactionPlanUpdateRequest)(nil),  // 3: raft_log.GetCompactionPlanUpdateRequest
	(*CompactionJobStatusUpdate)(nil),       // 4: raft_log.CompactionJobStatusUpdate
	(*GetCompactionPlanUpdateResponse)(nil), // 5: raft_log.GetCompactionPlanUpdateResponse
	(*CompactionPlanUpdate)(nil),            // 6: raft_log.CompactionPlanUpdate
	(*NewCompactionJob)(nil),                // 7: raft_log.NewCompactionJob
	(*AssignedCompactionJob)(nil),           // 8: raft_log.AssignedCompactionJob
	(*UpdatedCompactionJob)(nil),            // 9: raft_log.UpdatedCompactionJob
	(*CompletedCompactionJob)(nil),          // 10: raft_log.CompletedCompactionJob
	(*CompactionJobState)(nil),              // 11: raft_log.CompactionJobState
	(*CompactionJobPlan)(nil),               // 12: raft_log.CompactionJobPlan
	(*UpdateCompactionPlanRequest)(nil),     // 13: raft_log.UpdateCompactionPlanRequest
	(*UpdateCompactionPlanResponse)(nil),    // 14: raft_log.UpdateCompactionPlanResponse
	(*v1.BlockMeta)(nil),                    // 15: metastore.v1.BlockMeta
	(v1.CompactionJobStatus)(0),             // 16: metastore.v1.CompactionJobStatus
	(*v1.CompactedBlocks)(nil),              // 17: metastore.v1.CompactedBlocks
	(*v1.Tombstones)(nil),                   // 18: metastore.v1.Tombstones
}
var file_metastore_v1_raft_log_raft_log_proto_depIdxs = []int32{
	15, // 0: raft_log.AddBlockMetadataRequest.metadata:type_name -> metastore.v1.BlockMeta
	4,  // 1: raft_log.GetCompactionPlanUpdateRequest.status_updates:type_name -> raft_log.CompactionJobStatusUpdate
	16, // 2: raft_log.CompactionJobStatusUpdate.status:type_name -> metastore.v1.CompactionJobStatus
	6,  // 3: raft_log.GetCompactionPlanUpdateResponse.plan_update:type_name -> raft_log.CompactionPlanUpdate
	7,  // 4: raft_log.CompactionPlanUpdate.new_jobs:type_name -> raft_log.NewCompactionJob
	8,  // 5: raft_log.CompactionPlanUpdate.assigned_jobs:type_name -> raft_log.AssignedCompactionJob
	9,  // 6: raft_log.CompactionPlanUpdate.updated_jobs:type_name -> raft_log.UpdatedCompactionJob
	10, // 7: raft_log.CompactionPlanUpdate.completed_jobs:type_name -> raft_log.CompletedCompactionJob
	11, // 8: raft_log.NewCompactionJob.state:type_name -> raft_log.CompactionJobState
	12, // 9: raft_log.NewCompactionJob.plan:type_name -> raft_log.CompactionJobPlan
	11, // 10: raft_log.AssignedCompactionJob.state:type_name -> raft_log.CompactionJobState
	12, // 11: raft_log.AssignedCompactionJob.plan:type_name -> raft_log.CompactionJobPlan
	11, // 12: raft_log.UpdatedCompactionJob.state:type_name -> raft_log.CompactionJobState
	11, // 13: raft_log.CompletedCompactionJob.state:type_name -> raft_log.CompactionJobState
	17, // 14: raft_log.CompletedCompactionJob.compacted_blocks:type_name -> metastore.v1.CompactedBlocks
	16, // 15: raft_log.CompactionJobState.status:type_name -> metastore.v1.CompactionJobStatus
	18, // 16: raft_log.CompactionJobPlan.tombstones:type_name -> metastore.v1.Tombstones
	6,  // 17: raft_log.UpdateCompactionPlanRequest.plan_update:type_name -> raft_log.CompactionPlanUpdate
	6,  // 18: raft_log.UpdateCompactionPlanResponse.plan_update:type_name -> raft_log.CompactionPlanUpdate
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_metastore_v1_raft_log_raft_log_proto_init() }
func file_metastore_v1_raft_log_raft_log_proto_init() {
	if File_metastore_v1_raft_log_raft_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddBlockMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AddBlockMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetCompactionPlanUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CompactionJobStatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetCompactionPlanUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CompactionPlanUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NewCompactionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AssignedCompactionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatedCompactionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CompletedCompactionJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CompactionJobState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CompactionJobPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCompactionPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastore_v1_raft_log_raft_log_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCompactionPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metastore_v1_raft_log_raft_log_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metastore_v1_raft_log_raft_log_proto_goTypes,
		DependencyIndexes: file_metastore_v1_raft_log_raft_log_proto_depIdxs,
		EnumInfos:         file_metastore_v1_raft_log_raft_log_proto_enumTypes,
		MessageInfos:      file_metastore_v1_raft_log_raft_log_proto_msgTypes,
	}.Build()
	File_metastore_v1_raft_log_raft_log_proto = out.File
	file_metastore_v1_raft_log_raft_log_proto_rawDesc = nil
	file_metastore_v1_raft_log_raft_log_proto_goTypes = nil
	file_metastore_v1_raft_log_raft_log_proto_depIdxs = nil
}
