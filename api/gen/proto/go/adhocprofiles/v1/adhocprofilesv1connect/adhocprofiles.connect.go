// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: adhocprofiles/v1/adhocprofiles.proto

package adhocprofilesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/adhocprofiles/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdHocProfileServiceName is the fully-qualified name of the AdHocProfileService service.
	AdHocProfileServiceName = "adhocprofiles.v1.AdHocProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdHocProfileServiceUploadProcedure is the fully-qualified name of the AdHocProfileService's
	// Upload RPC.
	AdHocProfileServiceUploadProcedure = "/adhocprofiles.v1.AdHocProfileService/Upload"
	// AdHocProfileServiceGetProcedure is the fully-qualified name of the AdHocProfileService's Get RPC.
	AdHocProfileServiceGetProcedure = "/adhocprofiles.v1.AdHocProfileService/Get"
	// AdHocProfileServiceListProcedure is the fully-qualified name of the AdHocProfileService's List
	// RPC.
	AdHocProfileServiceListProcedure = "/adhocprofiles.v1.AdHocProfileService/List"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	adHocProfileServiceServiceDescriptor      = v1.File_adhocprofiles_v1_adhocprofiles_proto.Services().ByName("AdHocProfileService")
	adHocProfileServiceUploadMethodDescriptor = adHocProfileServiceServiceDescriptor.Methods().ByName("Upload")
	adHocProfileServiceGetMethodDescriptor    = adHocProfileServiceServiceDescriptor.Methods().ByName("Get")
	adHocProfileServiceListMethodDescriptor   = adHocProfileServiceServiceDescriptor.Methods().ByName("List")
)

// AdHocProfileServiceClient is a client for the adhocprofiles.v1.AdHocProfileService service.
type AdHocProfileServiceClient interface {
	// Upload a profile to the underlying store. The request contains a name and a base64 encoded pprof file. The response
	// contains a generated unique identifier, a flamegraph and a list of found sample types within the profile.
	Upload(context.Context, *connect.Request[v1.AdHocProfilesUploadRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error)
	// Retrieves a profile from the underlying store by id and an optional sample type. The response is similar to the one
	// for the upload method.
	Get(context.Context, *connect.Request[v1.AdHocProfilesGetRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error)
	// Retrieves a list of profiles found in the underlying store.
	List(context.Context, *connect.Request[v1.AdHocProfilesListRequest]) (*connect.Response[v1.AdHocProfilesListResponse], error)
}

// NewAdHocProfileServiceClient constructs a client for the adhocprofiles.v1.AdHocProfileService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdHocProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdHocProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adHocProfileServiceClient{
		upload: connect.NewClient[v1.AdHocProfilesUploadRequest, v1.AdHocProfilesGetResponse](
			httpClient,
			baseURL+AdHocProfileServiceUploadProcedure,
			connect.WithSchema(adHocProfileServiceUploadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.AdHocProfilesGetRequest, v1.AdHocProfilesGetResponse](
			httpClient,
			baseURL+AdHocProfileServiceGetProcedure,
			connect.WithSchema(adHocProfileServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.AdHocProfilesListRequest, v1.AdHocProfilesListResponse](
			httpClient,
			baseURL+AdHocProfileServiceListProcedure,
			connect.WithSchema(adHocProfileServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// adHocProfileServiceClient implements AdHocProfileServiceClient.
type adHocProfileServiceClient struct {
	upload *connect.Client[v1.AdHocProfilesUploadRequest, v1.AdHocProfilesGetResponse]
	get    *connect.Client[v1.AdHocProfilesGetRequest, v1.AdHocProfilesGetResponse]
	list   *connect.Client[v1.AdHocProfilesListRequest, v1.AdHocProfilesListResponse]
}

// Upload calls adhocprofiles.v1.AdHocProfileService.Upload.
func (c *adHocProfileServiceClient) Upload(ctx context.Context, req *connect.Request[v1.AdHocProfilesUploadRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error) {
	return c.upload.CallUnary(ctx, req)
}

// Get calls adhocprofiles.v1.AdHocProfileService.Get.
func (c *adHocProfileServiceClient) Get(ctx context.Context, req *connect.Request[v1.AdHocProfilesGetRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls adhocprofiles.v1.AdHocProfileService.List.
func (c *adHocProfileServiceClient) List(ctx context.Context, req *connect.Request[v1.AdHocProfilesListRequest]) (*connect.Response[v1.AdHocProfilesListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// AdHocProfileServiceHandler is an implementation of the adhocprofiles.v1.AdHocProfileService
// service.
type AdHocProfileServiceHandler interface {
	// Upload a profile to the underlying store. The request contains a name and a base64 encoded pprof file. The response
	// contains a generated unique identifier, a flamegraph and a list of found sample types within the profile.
	Upload(context.Context, *connect.Request[v1.AdHocProfilesUploadRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error)
	// Retrieves a profile from the underlying store by id and an optional sample type. The response is similar to the one
	// for the upload method.
	Get(context.Context, *connect.Request[v1.AdHocProfilesGetRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error)
	// Retrieves a list of profiles found in the underlying store.
	List(context.Context, *connect.Request[v1.AdHocProfilesListRequest]) (*connect.Response[v1.AdHocProfilesListResponse], error)
}

// NewAdHocProfileServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdHocProfileServiceHandler(svc AdHocProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adHocProfileServiceUploadHandler := connect.NewUnaryHandler(
		AdHocProfileServiceUploadProcedure,
		svc.Upload,
		connect.WithSchema(adHocProfileServiceUploadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adHocProfileServiceGetHandler := connect.NewUnaryHandler(
		AdHocProfileServiceGetProcedure,
		svc.Get,
		connect.WithSchema(adHocProfileServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adHocProfileServiceListHandler := connect.NewUnaryHandler(
		AdHocProfileServiceListProcedure,
		svc.List,
		connect.WithSchema(adHocProfileServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/adhocprofiles.v1.AdHocProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdHocProfileServiceUploadProcedure:
			adHocProfileServiceUploadHandler.ServeHTTP(w, r)
		case AdHocProfileServiceGetProcedure:
			adHocProfileServiceGetHandler.ServeHTTP(w, r)
		case AdHocProfileServiceListProcedure:
			adHocProfileServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdHocProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdHocProfileServiceHandler struct{}

func (UnimplementedAdHocProfileServiceHandler) Upload(context.Context, *connect.Request[v1.AdHocProfilesUploadRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adhocprofiles.v1.AdHocProfileService.Upload is not implemented"))
}

func (UnimplementedAdHocProfileServiceHandler) Get(context.Context, *connect.Request[v1.AdHocProfilesGetRequest]) (*connect.Response[v1.AdHocProfilesGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adhocprofiles.v1.AdHocProfileService.Get is not implemented"))
}

func (UnimplementedAdHocProfileServiceHandler) List(context.Context, *connect.Request[v1.AdHocProfilesListRequest]) (*connect.Response[v1.AdHocProfilesListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adhocprofiles.v1.AdHocProfileService.List is not implemented"))
}
