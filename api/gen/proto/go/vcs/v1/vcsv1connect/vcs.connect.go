// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcs/v1/vcs.proto

package vcsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/vcs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VCSServiceName is the fully-qualified name of the VCSService service.
	VCSServiceName = "vcs.v1.VCSService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VCSServiceGithubAppProcedure is the fully-qualified name of the VCSService's GithubApp RPC.
	VCSServiceGithubAppProcedure = "/vcs.v1.VCSService/GithubApp"
	// VCSServiceGithubLoginProcedure is the fully-qualified name of the VCSService's GithubLogin RPC.
	VCSServiceGithubLoginProcedure = "/vcs.v1.VCSService/GithubLogin"
	// VCSServiceGithubRefreshProcedure is the fully-qualified name of the VCSService's GithubRefresh
	// RPC.
	VCSServiceGithubRefreshProcedure = "/vcs.v1.VCSService/GithubRefresh"
	// VCSServiceGetFileProcedure is the fully-qualified name of the VCSService's GetFile RPC.
	VCSServiceGetFileProcedure = "/vcs.v1.VCSService/GetFile"
	// VCSServiceGetCommitProcedure is the fully-qualified name of the VCSService's GetCommit RPC.
	VCSServiceGetCommitProcedure = "/vcs.v1.VCSService/GetCommit"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vCSServiceServiceDescriptor             = v1.File_vcs_v1_vcs_proto.Services().ByName("VCSService")
	vCSServiceGithubAppMethodDescriptor     = vCSServiceServiceDescriptor.Methods().ByName("GithubApp")
	vCSServiceGithubLoginMethodDescriptor   = vCSServiceServiceDescriptor.Methods().ByName("GithubLogin")
	vCSServiceGithubRefreshMethodDescriptor = vCSServiceServiceDescriptor.Methods().ByName("GithubRefresh")
	vCSServiceGetFileMethodDescriptor       = vCSServiceServiceDescriptor.Methods().ByName("GetFile")
	vCSServiceGetCommitMethodDescriptor     = vCSServiceServiceDescriptor.Methods().ByName("GetCommit")
)

// VCSServiceClient is a client for the vcs.v1.VCSService service.
type VCSServiceClient interface {
	GithubApp(context.Context, *connect.Request[v1.GithubAppRequest]) (*connect.Response[v1.GithubAppResponse], error)
	GithubLogin(context.Context, *connect.Request[v1.GithubLoginRequest]) (*connect.Response[v1.GithubLoginResponse], error)
	GithubRefresh(context.Context, *connect.Request[v1.GithubRefreshRequest]) (*connect.Response[v1.GithubRefreshResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	GetCommit(context.Context, *connect.Request[v1.GetCommitRequest]) (*connect.Response[v1.GetCommitResponse], error)
}

// NewVCSServiceClient constructs a client for the vcs.v1.VCSService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVCSServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VCSServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vCSServiceClient{
		githubApp: connect.NewClient[v1.GithubAppRequest, v1.GithubAppResponse](
			httpClient,
			baseURL+VCSServiceGithubAppProcedure,
			connect.WithSchema(vCSServiceGithubAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		githubLogin: connect.NewClient[v1.GithubLoginRequest, v1.GithubLoginResponse](
			httpClient,
			baseURL+VCSServiceGithubLoginProcedure,
			connect.WithSchema(vCSServiceGithubLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		githubRefresh: connect.NewClient[v1.GithubRefreshRequest, v1.GithubRefreshResponse](
			httpClient,
			baseURL+VCSServiceGithubRefreshProcedure,
			connect.WithSchema(vCSServiceGithubRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFile: connect.NewClient[v1.GetFileRequest, v1.GetFileResponse](
			httpClient,
			baseURL+VCSServiceGetFileProcedure,
			connect.WithSchema(vCSServiceGetFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCommit: connect.NewClient[v1.GetCommitRequest, v1.GetCommitResponse](
			httpClient,
			baseURL+VCSServiceGetCommitProcedure,
			connect.WithSchema(vCSServiceGetCommitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vCSServiceClient implements VCSServiceClient.
type vCSServiceClient struct {
	githubApp     *connect.Client[v1.GithubAppRequest, v1.GithubAppResponse]
	githubLogin   *connect.Client[v1.GithubLoginRequest, v1.GithubLoginResponse]
	githubRefresh *connect.Client[v1.GithubRefreshRequest, v1.GithubRefreshResponse]
	getFile       *connect.Client[v1.GetFileRequest, v1.GetFileResponse]
	getCommit     *connect.Client[v1.GetCommitRequest, v1.GetCommitResponse]
}

// GithubApp calls vcs.v1.VCSService.GithubApp.
func (c *vCSServiceClient) GithubApp(ctx context.Context, req *connect.Request[v1.GithubAppRequest]) (*connect.Response[v1.GithubAppResponse], error) {
	return c.githubApp.CallUnary(ctx, req)
}

// GithubLogin calls vcs.v1.VCSService.GithubLogin.
func (c *vCSServiceClient) GithubLogin(ctx context.Context, req *connect.Request[v1.GithubLoginRequest]) (*connect.Response[v1.GithubLoginResponse], error) {
	return c.githubLogin.CallUnary(ctx, req)
}

// GithubRefresh calls vcs.v1.VCSService.GithubRefresh.
func (c *vCSServiceClient) GithubRefresh(ctx context.Context, req *connect.Request[v1.GithubRefreshRequest]) (*connect.Response[v1.GithubRefreshResponse], error) {
	return c.githubRefresh.CallUnary(ctx, req)
}

// GetFile calls vcs.v1.VCSService.GetFile.
func (c *vCSServiceClient) GetFile(ctx context.Context, req *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return c.getFile.CallUnary(ctx, req)
}

// GetCommit calls vcs.v1.VCSService.GetCommit.
func (c *vCSServiceClient) GetCommit(ctx context.Context, req *connect.Request[v1.GetCommitRequest]) (*connect.Response[v1.GetCommitResponse], error) {
	return c.getCommit.CallUnary(ctx, req)
}

// VCSServiceHandler is an implementation of the vcs.v1.VCSService service.
type VCSServiceHandler interface {
	GithubApp(context.Context, *connect.Request[v1.GithubAppRequest]) (*connect.Response[v1.GithubAppResponse], error)
	GithubLogin(context.Context, *connect.Request[v1.GithubLoginRequest]) (*connect.Response[v1.GithubLoginResponse], error)
	GithubRefresh(context.Context, *connect.Request[v1.GithubRefreshRequest]) (*connect.Response[v1.GithubRefreshResponse], error)
	GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error)
	GetCommit(context.Context, *connect.Request[v1.GetCommitRequest]) (*connect.Response[v1.GetCommitResponse], error)
}

// NewVCSServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVCSServiceHandler(svc VCSServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vCSServiceGithubAppHandler := connect.NewUnaryHandler(
		VCSServiceGithubAppProcedure,
		svc.GithubApp,
		connect.WithSchema(vCSServiceGithubAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vCSServiceGithubLoginHandler := connect.NewUnaryHandler(
		VCSServiceGithubLoginProcedure,
		svc.GithubLogin,
		connect.WithSchema(vCSServiceGithubLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vCSServiceGithubRefreshHandler := connect.NewUnaryHandler(
		VCSServiceGithubRefreshProcedure,
		svc.GithubRefresh,
		connect.WithSchema(vCSServiceGithubRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vCSServiceGetFileHandler := connect.NewUnaryHandler(
		VCSServiceGetFileProcedure,
		svc.GetFile,
		connect.WithSchema(vCSServiceGetFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vCSServiceGetCommitHandler := connect.NewUnaryHandler(
		VCSServiceGetCommitProcedure,
		svc.GetCommit,
		connect.WithSchema(vCSServiceGetCommitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcs.v1.VCSService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VCSServiceGithubAppProcedure:
			vCSServiceGithubAppHandler.ServeHTTP(w, r)
		case VCSServiceGithubLoginProcedure:
			vCSServiceGithubLoginHandler.ServeHTTP(w, r)
		case VCSServiceGithubRefreshProcedure:
			vCSServiceGithubRefreshHandler.ServeHTTP(w, r)
		case VCSServiceGetFileProcedure:
			vCSServiceGetFileHandler.ServeHTTP(w, r)
		case VCSServiceGetCommitProcedure:
			vCSServiceGetCommitHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVCSServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVCSServiceHandler struct{}

func (UnimplementedVCSServiceHandler) GithubApp(context.Context, *connect.Request[v1.GithubAppRequest]) (*connect.Response[v1.GithubAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcs.v1.VCSService.GithubApp is not implemented"))
}

func (UnimplementedVCSServiceHandler) GithubLogin(context.Context, *connect.Request[v1.GithubLoginRequest]) (*connect.Response[v1.GithubLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcs.v1.VCSService.GithubLogin is not implemented"))
}

func (UnimplementedVCSServiceHandler) GithubRefresh(context.Context, *connect.Request[v1.GithubRefreshRequest]) (*connect.Response[v1.GithubRefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcs.v1.VCSService.GithubRefresh is not implemented"))
}

func (UnimplementedVCSServiceHandler) GetFile(context.Context, *connect.Request[v1.GetFileRequest]) (*connect.Response[v1.GetFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcs.v1.VCSService.GetFile is not implemented"))
}

func (UnimplementedVCSServiceHandler) GetCommit(context.Context, *connect.Request[v1.GetCommitRequest]) (*connect.Response[v1.GetCommitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcs.v1.VCSService.GetCommit is not implemented"))
}
