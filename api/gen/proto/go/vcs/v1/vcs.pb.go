// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: vcs/v1/vcs.proto

package vcsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GithubAppRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubAppRequest) Reset() {
	*x = GithubAppRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubAppRequest) ProtoMessage() {}

func (x *GithubAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubAppRequest.ProtoReflect.Descriptor instead.
func (*GithubAppRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{0}
}

type GithubAppResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// clientID must be propagated when calling https://github.com/login/oauth/authorize
	// in the client_id query parameter.
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// If callbackURL is not empty, the URL should be propagated when
	// calling https://github.com/login/oauth/authorize in the
	// redirect_uri query parameter.
	CallbackURL   string `protobuf:"bytes,2,opt,name=callbackURL,proto3" json:"callbackURL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubAppResponse) Reset() {
	*x = GithubAppResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubAppResponse) ProtoMessage() {}

func (x *GithubAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubAppResponse.ProtoReflect.Descriptor instead.
func (*GithubAppResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{1}
}

func (x *GithubAppResponse) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *GithubAppResponse) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type GithubLoginRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AuthorizationCode string                 `protobuf:"bytes,1,opt,name=authorizationCode,proto3" json:"authorizationCode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GithubLoginRequest) Reset() {
	*x = GithubLoginRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubLoginRequest) ProtoMessage() {}

func (x *GithubLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubLoginRequest.ProtoReflect.Descriptor instead.
func (*GithubLoginRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{2}
}

func (x *GithubLoginRequest) GetAuthorizationCode() string {
	if x != nil {
		return x.AuthorizationCode
	}
	return ""
}

type GithubLoginResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated
	// In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
	// data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
	// its own cookie from the new data.
	// Remove after completing https://github.com/grafana/explore-profiles/issues/187
	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// base64 encoded encrypted token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Unix ms timestamp of when the token expires.
	TokenExpiresAt int64 `protobuf:"varint,3,opt,name=token_expires_at,json=tokenExpiresAt,proto3" json:"token_expires_at,omitempty"`
	// Unix ms timestamp of when the refresh token expires.
	RefreshTokenExpiresAt int64 `protobuf:"varint,4,opt,name=refresh_token_expires_at,json=refreshTokenExpiresAt,proto3" json:"refresh_token_expires_at,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GithubLoginResponse) Reset() {
	*x = GithubLoginResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubLoginResponse) ProtoMessage() {}

func (x *GithubLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubLoginResponse.ProtoReflect.Descriptor instead.
func (*GithubLoginResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{3}
}

func (x *GithubLoginResponse) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *GithubLoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GithubLoginResponse) GetTokenExpiresAt() int64 {
	if x != nil {
		return x.TokenExpiresAt
	}
	return 0
}

func (x *GithubLoginResponse) GetRefreshTokenExpiresAt() int64 {
	if x != nil {
		return x.RefreshTokenExpiresAt
	}
	return 0
}

type GithubRefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GithubRefreshRequest) Reset() {
	*x = GithubRefreshRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRefreshRequest) ProtoMessage() {}

func (x *GithubRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRefreshRequest.ProtoReflect.Descriptor instead.
func (*GithubRefreshRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{4}
}

type GithubRefreshResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated
	// In future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected
	// data (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing
	// its own cookie from the new data.
	// Remove after completing https://github.com/grafana/explore-profiles/issues/187
	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// base64 encoded encrypted token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Unix ms timestamp of when the token expires.
	TokenExpiresAt int64 `protobuf:"varint,3,opt,name=token_expires_at,json=tokenExpiresAt,proto3" json:"token_expires_at,omitempty"`
	// Unix ms timestamp of when the refresh token expires.
	RefreshTokenExpiresAt int64 `protobuf:"varint,4,opt,name=refresh_token_expires_at,json=refreshTokenExpiresAt,proto3" json:"refresh_token_expires_at,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GithubRefreshResponse) Reset() {
	*x = GithubRefreshResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GithubRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRefreshResponse) ProtoMessage() {}

func (x *GithubRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRefreshResponse.ProtoReflect.Descriptor instead.
func (*GithubRefreshResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{5}
}

func (x *GithubRefreshResponse) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *GithubRefreshResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GithubRefreshResponse) GetTokenExpiresAt() int64 {
	if x != nil {
		return x.TokenExpiresAt
	}
	return 0
}

func (x *GithubRefreshResponse) GetRefreshTokenExpiresAt() int64 {
	if x != nil {
		return x.RefreshTokenExpiresAt
	}
	return 0
}

type GetFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the full path to the repository
	RepositoryURL string `protobuf:"bytes,1,opt,name=repositoryURL,proto3" json:"repositoryURL,omitempty"`
	// the vcs ref to get the file from
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// the path to the file as provided by the symbols
	LocalPath string `protobuf:"bytes,3,opt,name=localPath,proto3" json:"localPath,omitempty"`
	// the root path where the project lives inside the repository
	RootPath      string `protobuf:"bytes,4,opt,name=rootPath,proto3" json:"rootPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileRequest) Reset() {
	*x = GetFileRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRequest) ProtoMessage() {}

func (x *GetFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRequest.ProtoReflect.Descriptor instead.
func (*GetFileRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileRequest) GetRepositoryURL() string {
	if x != nil {
		return x.RepositoryURL
	}
	return ""
}

func (x *GetFileRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GetFileRequest) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *GetFileRequest) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

type GetFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// base64 content of the file
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// the full URL to the file
	URL           string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileResponse) Reset() {
	*x = GetFileResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileResponse) ProtoMessage() {}

func (x *GetFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileResponse.ProtoReflect.Descriptor instead.
func (*GetFileResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{7}
}

func (x *GetFileResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetFileResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type GetCommitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the full path to the repository
	RepositoryURL string `protobuf:"bytes,1,opt,name=repositoryURL,proto3" json:"repositoryURL,omitempty"`
	// the vcs ref to get the file from
	Ref           string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitRequest) Reset() {
	*x = GetCommitRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitRequest) ProtoMessage() {}

func (x *GetCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitRequest.ProtoReflect.Descriptor instead.
func (*GetCommitRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{8}
}

func (x *GetCommitRequest) GetRepositoryURL() string {
	if x != nil {
		return x.RepositoryURL
	}
	return ""
}

func (x *GetCommitRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type GetCommitResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the commit message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the commit author login
	Author *CommitAuthor `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// the commit date
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// the commit sha
	Sha string `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
	// the full URL to the commit
	URL           string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitResponse) Reset() {
	*x = GetCommitResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitResponse) ProtoMessage() {}

func (x *GetCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitResponse.ProtoReflect.Descriptor instead.
func (*GetCommitResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{9}
}

func (x *GetCommitResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCommitResponse) GetAuthor() *CommitAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *GetCommitResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetCommitResponse) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *GetCommitResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

type CommitAuthor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the author login
	Login string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	// the author avatar URL
	AvatarURL     string `protobuf:"bytes,2,opt,name=avatarURL,proto3" json:"avatarURL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitAuthor) Reset() {
	*x = CommitAuthor{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitAuthor) ProtoMessage() {}

func (x *CommitAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitAuthor.ProtoReflect.Descriptor instead.
func (*CommitAuthor) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{10}
}

func (x *CommitAuthor) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *CommitAuthor) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

type CommitInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the commit message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// the commit author login
	Author *CommitAuthor `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// the commit date
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// the commit sha
	Sha string `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
	// the full URL to the commit
	URL           string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitInfo) Reset() {
	*x = CommitInfo{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo) ProtoMessage() {}

func (x *CommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo.ProtoReflect.Descriptor instead.
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{11}
}

func (x *CommitInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitInfo) GetAuthor() *CommitAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CommitInfo) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CommitInfo) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *CommitInfo) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

// New messages for the GetCommits method
type GetCommitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUrl string                 `protobuf:"bytes,1,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Refs          []string               `protobuf:"bytes,2,rep,name=refs,proto3" json:"refs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitsRequest) Reset() {
	*x = GetCommitsRequest{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitsRequest) ProtoMessage() {}

func (x *GetCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitsRequest.ProtoReflect.Descriptor instead.
func (*GetCommitsRequest) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{12}
}

func (x *GetCommitsRequest) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *GetCommitsRequest) GetRefs() []string {
	if x != nil {
		return x.Refs
	}
	return nil
}

type GetCommitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commits       []*CommitInfo          `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitsResponse) Reset() {
	*x = GetCommitsResponse{}
	mi := &file_vcs_v1_vcs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitsResponse) ProtoMessage() {}

func (x *GetCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vcs_v1_vcs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitsResponse.ProtoReflect.Descriptor instead.
func (*GetCommitsResponse) Descriptor() ([]byte, []int) {
	return file_vcs_v1_vcs_proto_rawDescGZIP(), []int{13}
}

func (x *GetCommitsResponse) GetCommits() []*CommitInfo {
	if x != nil {
		return x.Commits
	}
	return nil
}

var File_vcs_v1_vcs_proto protoreflect.FileDescriptor

const file_vcs_v1_vcs_proto_rawDesc = "" +
	"\n" +
	"\x10vcs/v1/vcs.proto\x12\x06vcs.v1\"\x12\n" +
	"\x10GithubAppRequest\"Q\n" +
	"\x11GithubAppResponse\x12\x1a\n" +
	"\bclientID\x18\x01 \x01(\tR\bclientID\x12 \n" +
	"\vcallbackURL\x18\x02 \x01(\tR\vcallbackURL\"B\n" +
	"\x12GithubLoginRequest\x12,\n" +
	"\x11authorizationCode\x18\x01 \x01(\tR\x11authorizationCode\"\xa6\x01\n" +
	"\x13GithubLoginResponse\x12\x16\n" +
	"\x06cookie\x18\x01 \x01(\tR\x06cookie\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12(\n" +
	"\x10token_expires_at\x18\x03 \x01(\x03R\x0etokenExpiresAt\x127\n" +
	"\x18refresh_token_expires_at\x18\x04 \x01(\x03R\x15refreshTokenExpiresAt\"\x16\n" +
	"\x14GithubRefreshRequest\"\xa8\x01\n" +
	"\x15GithubRefreshResponse\x12\x16\n" +
	"\x06cookie\x18\x01 \x01(\tR\x06cookie\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12(\n" +
	"\x10token_expires_at\x18\x03 \x01(\x03R\x0etokenExpiresAt\x127\n" +
	"\x18refresh_token_expires_at\x18\x04 \x01(\x03R\x15refreshTokenExpiresAt\"\x82\x01\n" +
	"\x0eGetFileRequest\x12$\n" +
	"\rrepositoryURL\x18\x01 \x01(\tR\rrepositoryURL\x12\x10\n" +
	"\x03ref\x18\x02 \x01(\tR\x03ref\x12\x1c\n" +
	"\tlocalPath\x18\x03 \x01(\tR\tlocalPath\x12\x1a\n" +
	"\brootPath\x18\x04 \x01(\tR\brootPath\"=\n" +
	"\x0fGetFileResponse\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x10\n" +
	"\x03URL\x18\x02 \x01(\tR\x03URL\"J\n" +
	"\x10GetCommitRequest\x12$\n" +
	"\rrepositoryURL\x18\x01 \x01(\tR\rrepositoryURL\x12\x10\n" +
	"\x03ref\x18\x02 \x01(\tR\x03ref\"\x93\x01\n" +
	"\x11GetCommitResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12,\n" +
	"\x06author\x18\x02 \x01(\v2\x14.vcs.v1.CommitAuthorR\x06author\x12\x12\n" +
	"\x04date\x18\x03 \x01(\tR\x04date\x12\x10\n" +
	"\x03sha\x18\x04 \x01(\tR\x03sha\x12\x10\n" +
	"\x03URL\x18\x05 \x01(\tR\x03URL\"B\n" +
	"\fCommitAuthor\x12\x14\n" +
	"\x05login\x18\x01 \x01(\tR\x05login\x12\x1c\n" +
	"\tavatarURL\x18\x02 \x01(\tR\tavatarURL\"\x8c\x01\n" +
	"\n" +
	"CommitInfo\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12,\n" +
	"\x06author\x18\x02 \x01(\v2\x14.vcs.v1.CommitAuthorR\x06author\x12\x12\n" +
	"\x04date\x18\x03 \x01(\tR\x04date\x12\x10\n" +
	"\x03sha\x18\x04 \x01(\tR\x03sha\x12\x10\n" +
	"\x03URL\x18\x05 \x01(\tR\x03URL\"N\n" +
	"\x11GetCommitsRequest\x12%\n" +
	"\x0erepository_url\x18\x01 \x01(\tR\rrepositoryUrl\x12\x12\n" +
	"\x04refs\x18\x02 \x03(\tR\x04refs\"B\n" +
	"\x12GetCommitsResponse\x12,\n" +
	"\acommits\x18\x01 \x03(\v2\x12.vcs.v1.CommitInfoR\acommits2\xb3\x03\n" +
	"\n" +
	"VCSService\x12B\n" +
	"\tGithubApp\x12\x18.vcs.v1.GithubAppRequest\x1a\x19.vcs.v1.GithubAppResponse\"\x00\x12H\n" +
	"\vGithubLogin\x12\x1a.vcs.v1.GithubLoginRequest\x1a\x1b.vcs.v1.GithubLoginResponse\"\x00\x12N\n" +
	"\rGithubRefresh\x12\x1c.vcs.v1.GithubRefreshRequest\x1a\x1d.vcs.v1.GithubRefreshResponse\"\x00\x12<\n" +
	"\aGetFile\x12\x16.vcs.v1.GetFileRequest\x1a\x17.vcs.v1.GetFileResponse\"\x00\x12B\n" +
	"\tGetCommit\x12\x18.vcs.v1.GetCommitRequest\x1a\x19.vcs.v1.GetCommitResponse\"\x00\x12E\n" +
	"\n" +
	"GetCommits\x12\x19.vcs.v1.GetCommitsRequest\x1a\x1a.vcs.v1.GetCommitsResponse\"\x00B\x8b\x01\n" +
	"\n" +
	"com.vcs.v1B\bVcsProtoP\x01Z:github.com/grafana/pyroscope/api/gen/proto/go/vcs/v1;vcsv1\xa2\x02\x03VXX\xaa\x02\x06Vcs.V1\xca\x02\x06Vcs\\V1\xe2\x02\x12Vcs\\V1\\GPBMetadata\xea\x02\aVcs::V1b\x06proto3"

var (
	file_vcs_v1_vcs_proto_rawDescOnce sync.Once
	file_vcs_v1_vcs_proto_rawDescData []byte
)

func file_vcs_v1_vcs_proto_rawDescGZIP() []byte {
	file_vcs_v1_vcs_proto_rawDescOnce.Do(func() {
		file_vcs_v1_vcs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vcs_v1_vcs_proto_rawDesc), len(file_vcs_v1_vcs_proto_rawDesc)))
	})
	return file_vcs_v1_vcs_proto_rawDescData
}

var file_vcs_v1_vcs_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_vcs_v1_vcs_proto_goTypes = []any{
	(*GithubAppRequest)(nil),      // 0: vcs.v1.GithubAppRequest
	(*GithubAppResponse)(nil),     // 1: vcs.v1.GithubAppResponse
	(*GithubLoginRequest)(nil),    // 2: vcs.v1.GithubLoginRequest
	(*GithubLoginResponse)(nil),   // 3: vcs.v1.GithubLoginResponse
	(*GithubRefreshRequest)(nil),  // 4: vcs.v1.GithubRefreshRequest
	(*GithubRefreshResponse)(nil), // 5: vcs.v1.GithubRefreshResponse
	(*GetFileRequest)(nil),        // 6: vcs.v1.GetFileRequest
	(*GetFileResponse)(nil),       // 7: vcs.v1.GetFileResponse
	(*GetCommitRequest)(nil),      // 8: vcs.v1.GetCommitRequest
	(*GetCommitResponse)(nil),     // 9: vcs.v1.GetCommitResponse
	(*CommitAuthor)(nil),          // 10: vcs.v1.CommitAuthor
	(*CommitInfo)(nil),            // 11: vcs.v1.CommitInfo
	(*GetCommitsRequest)(nil),     // 12: vcs.v1.GetCommitsRequest
	(*GetCommitsResponse)(nil),    // 13: vcs.v1.GetCommitsResponse
}
var file_vcs_v1_vcs_proto_depIdxs = []int32{
	10, // 0: vcs.v1.GetCommitResponse.author:type_name -> vcs.v1.CommitAuthor
	10, // 1: vcs.v1.CommitInfo.author:type_name -> vcs.v1.CommitAuthor
	11, // 2: vcs.v1.GetCommitsResponse.commits:type_name -> vcs.v1.CommitInfo
	0,  // 3: vcs.v1.VCSService.GithubApp:input_type -> vcs.v1.GithubAppRequest
	2,  // 4: vcs.v1.VCSService.GithubLogin:input_type -> vcs.v1.GithubLoginRequest
	4,  // 5: vcs.v1.VCSService.GithubRefresh:input_type -> vcs.v1.GithubRefreshRequest
	6,  // 6: vcs.v1.VCSService.GetFile:input_type -> vcs.v1.GetFileRequest
	8,  // 7: vcs.v1.VCSService.GetCommit:input_type -> vcs.v1.GetCommitRequest
	12, // 8: vcs.v1.VCSService.GetCommits:input_type -> vcs.v1.GetCommitsRequest
	1,  // 9: vcs.v1.VCSService.GithubApp:output_type -> vcs.v1.GithubAppResponse
	3,  // 10: vcs.v1.VCSService.GithubLogin:output_type -> vcs.v1.GithubLoginResponse
	5,  // 11: vcs.v1.VCSService.GithubRefresh:output_type -> vcs.v1.GithubRefreshResponse
	7,  // 12: vcs.v1.VCSService.GetFile:output_type -> vcs.v1.GetFileResponse
	9,  // 13: vcs.v1.VCSService.GetCommit:output_type -> vcs.v1.GetCommitResponse
	13, // 14: vcs.v1.VCSService.GetCommits:output_type -> vcs.v1.GetCommitsResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_vcs_v1_vcs_proto_init() }
func file_vcs_v1_vcs_proto_init() {
	if File_vcs_v1_vcs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vcs_v1_vcs_proto_rawDesc), len(file_vcs_v1_vcs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vcs_v1_vcs_proto_goTypes,
		DependencyIndexes: file_vcs_v1_vcs_proto_depIdxs,
		MessageInfos:      file_vcs_v1_vcs_proto_msgTypes,
	}.Build()
	File_vcs_v1_vcs_proto = out.File
	file_vcs_v1_vcs_proto_goTypes = nil
	file_vcs_v1_vcs_proto_depIdxs = nil
}
