// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: ingester/v1/ingester.proto

package ingesterv1

import (
	_ "github.com/grafana/pyroscope/api/gen/proto/go/google/v1"
	v11 "github.com/grafana/pyroscope/api/gen/proto/go/push/v1"
	v1 "github.com/grafana/pyroscope/api/gen/proto/go/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StacktracesMergeFormat int32

const (
	StacktracesMergeFormat_MERGE_FORMAT_UNSPECIFIED StacktracesMergeFormat = 0
	StacktracesMergeFormat_MERGE_FORMAT_STACKTRACES StacktracesMergeFormat = 1
	StacktracesMergeFormat_MERGE_FORMAT_TREE        StacktracesMergeFormat = 2
)

// Enum value maps for StacktracesMergeFormat.
var (
	StacktracesMergeFormat_name = map[int32]string{
		0: "MERGE_FORMAT_UNSPECIFIED",
		1: "MERGE_FORMAT_STACKTRACES",
		2: "MERGE_FORMAT_TREE",
	}
	StacktracesMergeFormat_value = map[string]int32{
		"MERGE_FORMAT_UNSPECIFIED": 0,
		"MERGE_FORMAT_STACKTRACES": 1,
		"MERGE_FORMAT_TREE":        2,
	}
)

func (x StacktracesMergeFormat) Enum() *StacktracesMergeFormat {
	p := new(StacktracesMergeFormat)
	*p = x
	return p
}

func (x StacktracesMergeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StacktracesMergeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ingester_v1_ingester_proto_enumTypes[0].Descriptor()
}

func (StacktracesMergeFormat) Type() protoreflect.EnumType {
	return &file_ingester_v1_ingester_proto_enumTypes[0]
}

func (x StacktracesMergeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StacktracesMergeFormat.Descriptor instead.
func (StacktracesMergeFormat) EnumDescriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{0}
}

type ProfileTypesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End           int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileTypesRequest) Reset() {
	*x = ProfileTypesRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesRequest) ProtoMessage() {}

func (x *ProfileTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTypesRequest.ProtoReflect.Descriptor instead.
func (*ProfileTypesRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileTypesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ProfileTypesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ProfileTypesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfileTypes  []*v1.ProfileType      `protobuf:"bytes,1,rep,name=profile_types,json=profileTypes,proto3" json:"profile_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileTypesResponse) Reset() {
	*x = ProfileTypesResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTypesResponse) ProtoMessage() {}

func (x *ProfileTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTypesResponse.ProtoReflect.Descriptor instead.
func (*ProfileTypesResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileTypesResponse) GetProfileTypes() []*v1.ProfileType {
	if x != nil {
		return x.ProfileTypes
	}
	return nil
}

type SeriesRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Matchers   []string               `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
	LabelNames []string               `protobuf:"bytes,2,rep,name=label_names,json=labelNames,proto3" json:"label_names,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	End           int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesRequest) Reset() {
	*x = SeriesRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesRequest) ProtoMessage() {}

func (x *SeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesRequest.ProtoReflect.Descriptor instead.
func (*SeriesRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{2}
}

func (x *SeriesRequest) GetMatchers() []string {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *SeriesRequest) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *SeriesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SeriesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type SeriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LabelsSet     []*v1.Labels           `protobuf:"bytes,2,rep,name=labels_set,json=labelsSet,proto3" json:"labels_set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesResponse) Reset() {
	*x = SeriesResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesResponse) ProtoMessage() {}

func (x *SeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesResponse.ProtoReflect.Descriptor instead.
func (*SeriesResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{3}
}

func (x *SeriesResponse) GetLabelsSet() []*v1.Labels {
	if x != nil {
		return x.LabelsSet
	}
	return nil
}

type FlushRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushRequest) Reset() {
	*x = FlushRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushRequest) ProtoMessage() {}

func (x *FlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushRequest.ProtoReflect.Descriptor instead.
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{4}
}

type FlushResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushResponse) Reset() {
	*x = FlushResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushResponse) ProtoMessage() {}

func (x *FlushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushResponse.ProtoReflect.Descriptor instead.
func (*FlushResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{5}
}

type SelectProfilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LabelSelector string                 `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Type          *v1.ProfileType        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// Optional: Hints for querying
	Hints *Hints `protobuf:"bytes,5,opt,name=hints,proto3,oneof" json:"hints,omitempty"`
	// Optional: Aggregation
	Aggregation   *v1.TimeSeriesAggregationType `protobuf:"varint,6,opt,name=aggregation,proto3,enum=types.v1.TimeSeriesAggregationType,oneof" json:"aggregation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectProfilesRequest) Reset() {
	*x = SelectProfilesRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectProfilesRequest) ProtoMessage() {}

func (x *SelectProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectProfilesRequest.ProtoReflect.Descriptor instead.
func (*SelectProfilesRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{6}
}

func (x *SelectProfilesRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectProfilesRequest) GetType() *v1.ProfileType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SelectProfilesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectProfilesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectProfilesRequest) GetHints() *Hints {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *SelectProfilesRequest) GetAggregation() v1.TimeSeriesAggregationType {
	if x != nil && x.Aggregation != nil {
		return *x.Aggregation
	}
	return v1.TimeSeriesAggregationType(0)
}

type MergeProfilesStacktracesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client starts the stream with a request containing the profile type and the labels.
	Request *SelectProfilesRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Max nodes in the resulting tree.
	MaxNodes *int64 `protobuf:"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
	// On a batch of profiles, the client sends the profiles to keep for merging.
	Profiles      []bool `protobuf:"varint,2,rep,packed,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesStacktracesRequest) Reset() {
	*x = MergeProfilesStacktracesRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesStacktracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesStacktracesRequest) ProtoMessage() {}

func (x *MergeProfilesStacktracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesStacktracesRequest.ProtoReflect.Descriptor instead.
func (*MergeProfilesStacktracesRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{7}
}

func (x *MergeProfilesStacktracesRequest) GetRequest() *SelectProfilesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MergeProfilesStacktracesRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

func (x *MergeProfilesStacktracesRequest) GetProfiles() []bool {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MergeProfilesStacktracesResult struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Format StacktracesMergeFormat `protobuf:"varint,3,opt,name=format,proto3,enum=ingester.v1.StacktracesMergeFormat" json:"format,omitempty"`
	// The list of stracktraces with their respective value
	Stacktraces   []*StacktraceSample `protobuf:"bytes,1,rep,name=stacktraces,proto3" json:"stacktraces,omitempty"`
	FunctionNames []string            `protobuf:"bytes,2,rep,name=function_names,json=functionNames,proto3" json:"function_names,omitempty"`
	// Merge result marshaled to pyroscope tree bytes.
	TreeBytes     []byte `protobuf:"bytes,4,opt,name=tree_bytes,json=treeBytes,proto3" json:"tree_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesStacktracesResult) Reset() {
	*x = MergeProfilesStacktracesResult{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesStacktracesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesStacktracesResult) ProtoMessage() {}

func (x *MergeProfilesStacktracesResult) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesStacktracesResult.ProtoReflect.Descriptor instead.
func (*MergeProfilesStacktracesResult) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{8}
}

func (x *MergeProfilesStacktracesResult) GetFormat() StacktracesMergeFormat {
	if x != nil {
		return x.Format
	}
	return StacktracesMergeFormat_MERGE_FORMAT_UNSPECIFIED
}

func (x *MergeProfilesStacktracesResult) GetStacktraces() []*StacktraceSample {
	if x != nil {
		return x.Stacktraces
	}
	return nil
}

func (x *MergeProfilesStacktracesResult) GetFunctionNames() []string {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *MergeProfilesStacktracesResult) GetTreeBytes() []byte {
	if x != nil {
		return x.TreeBytes
	}
	return nil
}

type MergeProfilesStacktracesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The server replies batch of profiles.
	// A last message without profiles signals the next message will be the result of the merge.
	SelectedProfiles *ProfileSets `protobuf:"bytes,1,opt,name=selectedProfiles,proto3" json:"selectedProfiles,omitempty"`
	// The list of stracktraces for the profile with their respective value
	Result        *MergeProfilesStacktracesResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesStacktracesResponse) Reset() {
	*x = MergeProfilesStacktracesResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesStacktracesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesStacktracesResponse) ProtoMessage() {}

func (x *MergeProfilesStacktracesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesStacktracesResponse.ProtoReflect.Descriptor instead.
func (*MergeProfilesStacktracesResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{9}
}

func (x *MergeProfilesStacktracesResponse) GetSelectedProfiles() *ProfileSets {
	if x != nil {
		return x.SelectedProfiles
	}
	return nil
}

func (x *MergeProfilesStacktracesResponse) GetResult() *MergeProfilesStacktracesResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type SelectSpanProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LabelSelector string                 `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	Type          *v1.ProfileType        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Milliseconds since epoch.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch.
	End int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	// List of span identifiers.
	SpanSelector []string `protobuf:"bytes,5,rep,name=span_selector,json=spanSelector,proto3" json:"span_selector,omitempty"`
	// Optional: Hints for querying
	Hints         *Hints `protobuf:"bytes,6,opt,name=hints,proto3,oneof" json:"hints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectSpanProfileRequest) Reset() {
	*x = SelectSpanProfileRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectSpanProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectSpanProfileRequest) ProtoMessage() {}

func (x *SelectSpanProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectSpanProfileRequest.ProtoReflect.Descriptor instead.
func (*SelectSpanProfileRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{10}
}

func (x *SelectSpanProfileRequest) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *SelectSpanProfileRequest) GetType() *v1.ProfileType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SelectSpanProfileRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SelectSpanProfileRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *SelectSpanProfileRequest) GetSpanSelector() []string {
	if x != nil {
		return x.SpanSelector
	}
	return nil
}

func (x *SelectSpanProfileRequest) GetHints() *Hints {
	if x != nil {
		return x.Hints
	}
	return nil
}

type MergeSpanProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client starts the stream with a request containing the profile type and the labels.
	Request *SelectSpanProfileRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Max nodes in the resulting tree.
	MaxNodes *int64 `protobuf:"varint,2,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
	// On a batch of profiles, the client sends the profiles to keep for merging.
	Profiles      []bool `protobuf:"varint,3,rep,packed,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeSpanProfileRequest) Reset() {
	*x = MergeSpanProfileRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeSpanProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSpanProfileRequest) ProtoMessage() {}

func (x *MergeSpanProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSpanProfileRequest.ProtoReflect.Descriptor instead.
func (*MergeSpanProfileRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{11}
}

func (x *MergeSpanProfileRequest) GetRequest() *SelectSpanProfileRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MergeSpanProfileRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

func (x *MergeSpanProfileRequest) GetProfiles() []bool {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MergeSpanProfileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The server replies batch of profiles.
	// A last message without profiles signals the next message will be the result of the merge.
	SelectedProfiles *ProfileSets `protobuf:"bytes,1,opt,name=selectedProfiles,proto3" json:"selectedProfiles,omitempty"`
	// The list of stracktraces for the profile with their respective value
	Result        *MergeSpanProfileResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeSpanProfileResponse) Reset() {
	*x = MergeSpanProfileResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeSpanProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSpanProfileResponse) ProtoMessage() {}

func (x *MergeSpanProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSpanProfileResponse.ProtoReflect.Descriptor instead.
func (*MergeSpanProfileResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{12}
}

func (x *MergeSpanProfileResponse) GetSelectedProfiles() *ProfileSets {
	if x != nil {
		return x.SelectedProfiles
	}
	return nil
}

func (x *MergeSpanProfileResponse) GetResult() *MergeSpanProfileResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type MergeSpanProfileResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TreeBytes     []byte                 `protobuf:"bytes,1,opt,name=tree_bytes,json=treeBytes,proto3" json:"tree_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeSpanProfileResult) Reset() {
	*x = MergeSpanProfileResult{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeSpanProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSpanProfileResult) ProtoMessage() {}

func (x *MergeSpanProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSpanProfileResult.ProtoReflect.Descriptor instead.
func (*MergeSpanProfileResult) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{13}
}

func (x *MergeSpanProfileResult) GetTreeBytes() []byte {
	if x != nil {
		return x.TreeBytes
	}
	return nil
}

type ProfileSets struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DEPRECATED: Use fingerprints instead.
	LabelsSets    []*v1.Labels     `protobuf:"bytes,1,rep,name=labelsSets,proto3" json:"labelsSets,omitempty"`
	Profiles      []*SeriesProfile `protobuf:"bytes,2,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Fingerprints  []uint64         `protobuf:"varint,3,rep,packed,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileSets) Reset() {
	*x = ProfileSets{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSets) ProtoMessage() {}

func (x *ProfileSets) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSets.ProtoReflect.Descriptor instead.
func (*ProfileSets) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{14}
}

func (x *ProfileSets) GetLabelsSets() []*v1.Labels {
	if x != nil {
		return x.LabelsSets
	}
	return nil
}

func (x *ProfileSets) GetProfiles() []*SeriesProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *ProfileSets) GetFingerprints() []uint64 {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type SeriesProfile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The labels index of the series
	LabelIndex int32 `protobuf:"varint,1,opt,name=labelIndex,proto3" json:"labelIndex,omitempty"`
	// timestamp in milliseconds
	Timestamp     int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeriesProfile) Reset() {
	*x = SeriesProfile{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeriesProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeriesProfile) ProtoMessage() {}

func (x *SeriesProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeriesProfile.ProtoReflect.Descriptor instead.
func (*SeriesProfile) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{15}
}

func (x *SeriesProfile) GetLabelIndex() int32 {
	if x != nil {
		return x.LabelIndex
	}
	return 0
}

func (x *SeriesProfile) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Profile represents a point in time profile.
type Profile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the profile.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// The name and type of the profile.
	Type *v1.ProfileType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// LabelPair is the key value pairs to identify the corresponding profile
	Labels []*v1.LabelPair `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// Timestamp is when that profile was created
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The list of stracktraces for the profile with their respective value
	Stacktraces   []*StacktraceSample `protobuf:"bytes,5,rep,name=stacktraces,proto3" json:"stacktraces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Profile) Reset() {
	*x = Profile{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{16}
}

func (x *Profile) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Profile) GetType() *v1.ProfileType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Profile) GetLabels() []*v1.LabelPair {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Profile) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Profile) GetStacktraces() []*StacktraceSample {
	if x != nil {
		return x.Stacktraces
	}
	return nil
}

type StacktraceSample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FunctionIds   []int32                `protobuf:"varint,1,rep,packed,name=function_ids,json=functionIds,proto3" json:"function_ids,omitempty"`
	Value         int64                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StacktraceSample) Reset() {
	*x = StacktraceSample{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktraceSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktraceSample) ProtoMessage() {}

func (x *StacktraceSample) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacktraceSample.ProtoReflect.Descriptor instead.
func (*StacktraceSample) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{17}
}

func (x *StacktraceSample) GetFunctionIds() []int32 {
	if x != nil {
		return x.FunctionIds
	}
	return nil
}

func (x *StacktraceSample) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MergeProfilesLabelsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client starts the stream with a request containing the profile type and the labels.
	Request *SelectProfilesRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// The labels to merge by
	By []string `protobuf:"bytes,2,rep,name=by,proto3" json:"by,omitempty"`
	// Select stack traces that match the provided selector.
	StackTraceSelector *v1.StackTraceSelector `protobuf:"bytes,4,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"`
	// On a batch of profiles, the client sends the profiles to keep for merging.
	Profiles      []bool `protobuf:"varint,3,rep,packed,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesLabelsRequest) Reset() {
	*x = MergeProfilesLabelsRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesLabelsRequest) ProtoMessage() {}

func (x *MergeProfilesLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesLabelsRequest.ProtoReflect.Descriptor instead.
func (*MergeProfilesLabelsRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{18}
}

func (x *MergeProfilesLabelsRequest) GetRequest() *SelectProfilesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MergeProfilesLabelsRequest) GetBy() []string {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *MergeProfilesLabelsRequest) GetStackTraceSelector() *v1.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

func (x *MergeProfilesLabelsRequest) GetProfiles() []bool {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MergeProfilesLabelsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The server replies batch of profiles.
	// A last message without profiles signals the next message will be the result of the merge.
	SelectedProfiles *ProfileSets `protobuf:"bytes,1,opt,name=selectedProfiles,proto3" json:"selectedProfiles,omitempty"`
	// The list of series for the profile with their respective value
	Series        []*v1.Series `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesLabelsResponse) Reset() {
	*x = MergeProfilesLabelsResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesLabelsResponse) ProtoMessage() {}

func (x *MergeProfilesLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesLabelsResponse.ProtoReflect.Descriptor instead.
func (*MergeProfilesLabelsResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{19}
}

func (x *MergeProfilesLabelsResponse) GetSelectedProfiles() *ProfileSets {
	if x != nil {
		return x.SelectedProfiles
	}
	return nil
}

func (x *MergeProfilesLabelsResponse) GetSeries() []*v1.Series {
	if x != nil {
		return x.Series
	}
	return nil
}

type MergeProfilesPprofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client starts the stream with a request containing the profile type and the labels.
	Request *SelectProfilesRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Max nodes in the resulting profile.
	MaxNodes *int64 `protobuf:"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof" json:"max_nodes,omitempty"`
	// Select stack traces that match the provided selector.
	StackTraceSelector *v1.StackTraceSelector `protobuf:"bytes,4,opt,name=stack_trace_selector,json=stackTraceSelector,proto3,oneof" json:"stack_trace_selector,omitempty"`
	// On a batch of profiles, the client sends the profiles to keep for merging.
	Profiles      []bool `protobuf:"varint,2,rep,packed,name=profiles,proto3" json:"profiles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesPprofRequest) Reset() {
	*x = MergeProfilesPprofRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesPprofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesPprofRequest) ProtoMessage() {}

func (x *MergeProfilesPprofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesPprofRequest.ProtoReflect.Descriptor instead.
func (*MergeProfilesPprofRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{20}
}

func (x *MergeProfilesPprofRequest) GetRequest() *SelectProfilesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MergeProfilesPprofRequest) GetMaxNodes() int64 {
	if x != nil && x.MaxNodes != nil {
		return *x.MaxNodes
	}
	return 0
}

func (x *MergeProfilesPprofRequest) GetStackTraceSelector() *v1.StackTraceSelector {
	if x != nil {
		return x.StackTraceSelector
	}
	return nil
}

func (x *MergeProfilesPprofRequest) GetProfiles() []bool {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type MergeProfilesPprofResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The server replies batch of profiles.
	// A last message without profiles signals the next message will be the result of the merge.
	SelectedProfiles *ProfileSets `protobuf:"bytes,1,opt,name=selectedProfiles,proto3" json:"selectedProfiles,omitempty"`
	// The merge result in the pprof format.
	Result        []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeProfilesPprofResponse) Reset() {
	*x = MergeProfilesPprofResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeProfilesPprofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeProfilesPprofResponse) ProtoMessage() {}

func (x *MergeProfilesPprofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeProfilesPprofResponse.ProtoReflect.Descriptor instead.
func (*MergeProfilesPprofResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{21}
}

func (x *MergeProfilesPprofResponse) GetSelectedProfiles() *ProfileSets {
	if x != nil {
		return x.SelectedProfiles
	}
	return nil
}

func (x *MergeProfilesPprofResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type BlockMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Milliseconds since epoch. If missing or zero, only the ingesters will be
	// queried.
	End           int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMetadataRequest) Reset() {
	*x = BlockMetadataRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadataRequest) ProtoMessage() {}

func (x *BlockMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadataRequest.ProtoReflect.Descriptor instead.
func (*BlockMetadataRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{22}
}

func (x *BlockMetadataRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *BlockMetadataRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type BlockMetadataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Blocks that are present on the instance for the start to end period
	Blocks        []*v1.BlockInfo `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMetadataResponse) Reset() {
	*x = BlockMetadataResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadataResponse) ProtoMessage() {}

func (x *BlockMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadataResponse.ProtoReflect.Descriptor instead.
func (*BlockMetadataResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{23}
}

func (x *BlockMetadataResponse) GetBlocks() []*v1.BlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Hints are used to propagate information about querying
type Hints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *BlockHints            `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hints) Reset() {
	*x = Hints{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hints) ProtoMessage() {}

func (x *Hints) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hints.ProtoReflect.Descriptor instead.
func (*Hints) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{24}
}

func (x *Hints) GetBlock() *BlockHints {
	if x != nil {
		return x.Block
	}
	return nil
}

type BlockHints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ULID of blocks to query
	Ulids []string `protobuf:"bytes,1,rep,name=ulids,proto3" json:"ulids,omitempty"`
	// When all blocks are compacted, there is no effect of the replication factor, hence we do not need to run deduplication.
	Deduplication bool `protobuf:"varint,2,opt,name=deduplication,proto3" json:"deduplication,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHints) Reset() {
	*x = BlockHints{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHints) ProtoMessage() {}

func (x *BlockHints) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHints.ProtoReflect.Descriptor instead.
func (*BlockHints) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{25}
}

func (x *BlockHints) GetUlids() []string {
	if x != nil {
		return x.Ulids
	}
	return nil
}

func (x *BlockHints) GetDeduplication() bool {
	if x != nil {
		return x.Deduplication
	}
	return false
}

type GetBlockStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ulids         []string               `protobuf:"bytes,1,rep,name=ulids,proto3" json:"ulids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockStatsRequest) Reset() {
	*x = GetBlockStatsRequest{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockStatsRequest) ProtoMessage() {}

func (x *GetBlockStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBlockStatsRequest) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{26}
}

func (x *GetBlockStatsRequest) GetUlids() []string {
	if x != nil {
		return x.Ulids
	}
	return nil
}

type GetBlockStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockStats    []*BlockStats          `protobuf:"bytes,1,rep,name=block_stats,json=blockStats,proto3" json:"block_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockStatsResponse) Reset() {
	*x = GetBlockStatsResponse{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockStatsResponse) ProtoMessage() {}

func (x *GetBlockStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBlockStatsResponse) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{27}
}

func (x *GetBlockStatsResponse) GetBlockStats() []*BlockStats {
	if x != nil {
		return x.BlockStats
	}
	return nil
}

type BlockStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeriesCount   uint64                 `protobuf:"varint,2,opt,name=series_count,json=seriesCount,proto3" json:"series_count,omitempty"`
	ProfileCount  uint64                 `protobuf:"varint,3,opt,name=profile_count,json=profileCount,proto3" json:"profile_count,omitempty"`
	SampleCount   uint64                 `protobuf:"varint,4,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	IndexBytes    uint64                 `protobuf:"varint,5,opt,name=index_bytes,json=indexBytes,proto3" json:"index_bytes,omitempty"`
	ProfileBytes  uint64                 `protobuf:"varint,6,opt,name=profile_bytes,json=profileBytes,proto3" json:"profile_bytes,omitempty"`
	SymbolBytes   uint64                 `protobuf:"varint,7,opt,name=symbol_bytes,json=symbolBytes,proto3" json:"symbol_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockStats) Reset() {
	*x = BlockStats{}
	mi := &file_ingester_v1_ingester_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStats) ProtoMessage() {}

func (x *BlockStats) ProtoReflect() protoreflect.Message {
	mi := &file_ingester_v1_ingester_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStats.ProtoReflect.Descriptor instead.
func (*BlockStats) Descriptor() ([]byte, []int) {
	return file_ingester_v1_ingester_proto_rawDescGZIP(), []int{28}
}

func (x *BlockStats) GetSeriesCount() uint64 {
	if x != nil {
		return x.SeriesCount
	}
	return 0
}

func (x *BlockStats) GetProfileCount() uint64 {
	if x != nil {
		return x.ProfileCount
	}
	return 0
}

func (x *BlockStats) GetSampleCount() uint64 {
	if x != nil {
		return x.SampleCount
	}
	return 0
}

func (x *BlockStats) GetIndexBytes() uint64 {
	if x != nil {
		return x.IndexBytes
	}
	return 0
}

func (x *BlockStats) GetProfileBytes() uint64 {
	if x != nil {
		return x.ProfileBytes
	}
	return 0
}

func (x *BlockStats) GetSymbolBytes() uint64 {
	if x != nil {
		return x.SymbolBytes
	}
	return 0
}

var File_ingester_v1_ingester_proto protoreflect.FileDescriptor

const file_ingester_v1_ingester_proto_rawDesc = "" +
	"\n" +
	"\x1aingester/v1/ingester.proto\x12\vingester.v1\x1a\x17google/v1/profile.proto\x1a\x12push/v1/push.proto\x1a\x14types/v1/types.proto\"=\n" +
	"\x13ProfileTypesRequest\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x03R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x03R\x03end\"R\n" +
	"\x14ProfileTypesResponse\x12:\n" +
	"\rprofile_types\x18\x01 \x03(\v2\x15.types.v1.ProfileTypeR\fprofileTypes\"t\n" +
	"\rSeriesRequest\x12\x1a\n" +
	"\bmatchers\x18\x01 \x03(\tR\bmatchers\x12\x1f\n" +
	"\vlabel_names\x18\x02 \x03(\tR\n" +
	"labelNames\x12\x14\n" +
	"\x05start\x18\x03 \x01(\x03R\x05start\x12\x10\n" +
	"\x03end\x18\x04 \x01(\x03R\x03end\"A\n" +
	"\x0eSeriesResponse\x12/\n" +
	"\n" +
	"labels_set\x18\x02 \x03(\v2\x10.types.v1.LabelsR\tlabelsSet\"\x0e\n" +
	"\fFlushRequest\"\x0f\n" +
	"\rFlushResponse\"\xa6\x02\n" +
	"\x15SelectProfilesRequest\x12%\n" +
	"\x0elabel_selector\x18\x01 \x01(\tR\rlabelSelector\x12)\n" +
	"\x04type\x18\x02 \x01(\v2\x15.types.v1.ProfileTypeR\x04type\x12\x14\n" +
	"\x05start\x18\x03 \x01(\x03R\x05start\x12\x10\n" +
	"\x03end\x18\x04 \x01(\x03R\x03end\x12-\n" +
	"\x05hints\x18\x05 \x01(\v2\x12.ingester.v1.HintsH\x00R\x05hints\x88\x01\x01\x12J\n" +
	"\vaggregation\x18\x06 \x01(\x0e2#.types.v1.TimeSeriesAggregationTypeH\x01R\vaggregation\x88\x01\x01B\b\n" +
	"\x06_hintsB\x0e\n" +
	"\f_aggregation\"\xab\x01\n" +
	"\x1fMergeProfilesStacktracesRequest\x12<\n" +
	"\arequest\x18\x01 \x01(\v2\".ingester.v1.SelectProfilesRequestR\arequest\x12 \n" +
	"\tmax_nodes\x18\x03 \x01(\x03H\x00R\bmaxNodes\x88\x01\x01\x12\x1a\n" +
	"\bprofiles\x18\x02 \x03(\bR\bprofilesB\f\n" +
	"\n" +
	"_max_nodes\"\xe4\x01\n" +
	"\x1eMergeProfilesStacktracesResult\x12;\n" +
	"\x06format\x18\x03 \x01(\x0e2#.ingester.v1.StacktracesMergeFormatR\x06format\x12?\n" +
	"\vstacktraces\x18\x01 \x03(\v2\x1d.ingester.v1.StacktraceSampleR\vstacktraces\x12%\n" +
	"\x0efunction_names\x18\x02 \x03(\tR\rfunctionNames\x12\x1d\n" +
	"\n" +
	"tree_bytes\x18\x04 \x01(\fR\ttreeBytes\"\xad\x01\n" +
	" MergeProfilesStacktracesResponse\x12D\n" +
	"\x10selectedProfiles\x18\x01 \x01(\v2\x18.ingester.v1.ProfileSetsR\x10selectedProfiles\x12C\n" +
	"\x06result\x18\x03 \x01(\v2+.ingester.v1.MergeProfilesStacktracesResultR\x06result\"\xf2\x01\n" +
	"\x18SelectSpanProfileRequest\x12%\n" +
	"\x0elabel_selector\x18\x01 \x01(\tR\rlabelSelector\x12)\n" +
	"\x04type\x18\x02 \x01(\v2\x15.types.v1.ProfileTypeR\x04type\x12\x14\n" +
	"\x05start\x18\x03 \x01(\x03R\x05start\x12\x10\n" +
	"\x03end\x18\x04 \x01(\x03R\x03end\x12#\n" +
	"\rspan_selector\x18\x05 \x03(\tR\fspanSelector\x12-\n" +
	"\x05hints\x18\x06 \x01(\v2\x12.ingester.v1.HintsH\x00R\x05hints\x88\x01\x01B\b\n" +
	"\x06_hints\"\xa6\x01\n" +
	"\x17MergeSpanProfileRequest\x12?\n" +
	"\arequest\x18\x01 \x01(\v2%.ingester.v1.SelectSpanProfileRequestR\arequest\x12 \n" +
	"\tmax_nodes\x18\x02 \x01(\x03H\x00R\bmaxNodes\x88\x01\x01\x12\x1a\n" +
	"\bprofiles\x18\x03 \x03(\bR\bprofilesB\f\n" +
	"\n" +
	"_max_nodes\"\x9d\x01\n" +
	"\x18MergeSpanProfileResponse\x12D\n" +
	"\x10selectedProfiles\x18\x01 \x01(\v2\x18.ingester.v1.ProfileSetsR\x10selectedProfiles\x12;\n" +
	"\x06result\x18\x02 \x01(\v2#.ingester.v1.MergeSpanProfileResultR\x06result\"7\n" +
	"\x16MergeSpanProfileResult\x12\x1d\n" +
	"\n" +
	"tree_bytes\x18\x01 \x01(\fR\ttreeBytes\"\x9b\x01\n" +
	"\vProfileSets\x120\n" +
	"\n" +
	"labelsSets\x18\x01 \x03(\v2\x10.types.v1.LabelsR\n" +
	"labelsSets\x126\n" +
	"\bprofiles\x18\x02 \x03(\v2\x1a.ingester.v1.SeriesProfileR\bprofiles\x12\"\n" +
	"\ffingerprints\x18\x03 \x03(\x04R\ffingerprints\"M\n" +
	"\rSeriesProfile\x12\x1e\n" +
	"\n" +
	"labelIndex\x18\x01 \x01(\x05R\n" +
	"labelIndex\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"\xd0\x01\n" +
	"\aProfile\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\x12)\n" +
	"\x04type\x18\x02 \x01(\v2\x15.types.v1.ProfileTypeR\x04type\x12+\n" +
	"\x06labels\x18\x03 \x03(\v2\x13.types.v1.LabelPairR\x06labels\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12?\n" +
	"\vstacktraces\x18\x05 \x03(\v2\x1d.ingester.v1.StacktraceSampleR\vstacktraces\"K\n" +
	"\x10StacktraceSample\x12!\n" +
	"\ffunction_ids\x18\x01 \x03(\x05R\vfunctionIds\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value\"\xf4\x01\n" +
	"\x1aMergeProfilesLabelsRequest\x12<\n" +
	"\arequest\x18\x01 \x01(\v2\".ingester.v1.SelectProfilesRequestR\arequest\x12\x0e\n" +
	"\x02by\x18\x02 \x03(\tR\x02by\x12S\n" +
	"\x14stack_trace_selector\x18\x04 \x01(\v2\x1c.types.v1.StackTraceSelectorH\x00R\x12stackTraceSelector\x88\x01\x01\x12\x1a\n" +
	"\bprofiles\x18\x03 \x03(\bR\bprofilesB\x17\n" +
	"\x15_stack_trace_selector\"\x8d\x01\n" +
	"\x1bMergeProfilesLabelsResponse\x12D\n" +
	"\x10selectedProfiles\x18\x01 \x01(\v2\x18.ingester.v1.ProfileSetsR\x10selectedProfiles\x12(\n" +
	"\x06series\x18\x02 \x03(\v2\x10.types.v1.SeriesR\x06series\"\x93\x02\n" +
	"\x19MergeProfilesPprofRequest\x12<\n" +
	"\arequest\x18\x01 \x01(\v2\".ingester.v1.SelectProfilesRequestR\arequest\x12 \n" +
	"\tmax_nodes\x18\x03 \x01(\x03H\x00R\bmaxNodes\x88\x01\x01\x12S\n" +
	"\x14stack_trace_selector\x18\x04 \x01(\v2\x1c.types.v1.StackTraceSelectorH\x01R\x12stackTraceSelector\x88\x01\x01\x12\x1a\n" +
	"\bprofiles\x18\x02 \x03(\bR\bprofilesB\f\n" +
	"\n" +
	"_max_nodesB\x17\n" +
	"\x15_stack_trace_selector\"z\n" +
	"\x1aMergeProfilesPprofResponse\x12D\n" +
	"\x10selectedProfiles\x18\x01 \x01(\v2\x18.ingester.v1.ProfileSetsR\x10selectedProfiles\x12\x16\n" +
	"\x06result\x18\x02 \x01(\fR\x06result\">\n" +
	"\x14BlockMetadataRequest\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x03R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x03R\x03end\"D\n" +
	"\x15BlockMetadataResponse\x12+\n" +
	"\x06blocks\x18\x01 \x03(\v2\x13.types.v1.BlockInfoR\x06blocks\"6\n" +
	"\x05Hints\x12-\n" +
	"\x05block\x18\x01 \x01(\v2\x17.ingester.v1.BlockHintsR\x05block\"H\n" +
	"\n" +
	"BlockHints\x12\x14\n" +
	"\x05ulids\x18\x01 \x03(\tR\x05ulids\x12$\n" +
	"\rdeduplication\x18\x02 \x01(\bR\rdeduplication\",\n" +
	"\x14GetBlockStatsRequest\x12\x14\n" +
	"\x05ulids\x18\x01 \x03(\tR\x05ulids\"Q\n" +
	"\x15GetBlockStatsResponse\x128\n" +
	"\vblock_stats\x18\x01 \x03(\v2\x17.ingester.v1.BlockStatsR\n" +
	"blockStats\"\xe0\x01\n" +
	"\n" +
	"BlockStats\x12!\n" +
	"\fseries_count\x18\x02 \x01(\x04R\vseriesCount\x12#\n" +
	"\rprofile_count\x18\x03 \x01(\x04R\fprofileCount\x12!\n" +
	"\fsample_count\x18\x04 \x01(\x04R\vsampleCount\x12\x1f\n" +
	"\vindex_bytes\x18\x05 \x01(\x04R\n" +
	"indexBytes\x12#\n" +
	"\rprofile_bytes\x18\x06 \x01(\x04R\fprofileBytes\x12!\n" +
	"\fsymbol_bytes\x18\a \x01(\x04R\vsymbolBytes*k\n" +
	"\x16StacktracesMergeFormat\x12\x1c\n" +
	"\x18MERGE_FORMAT_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18MERGE_FORMAT_STACKTRACES\x10\x01\x12\x15\n" +
	"\x11MERGE_FORMAT_TREE\x10\x022\x90\t\n" +
	"\x0fIngesterService\x125\n" +
	"\x04Push\x12\x14.push.v1.PushRequest\x1a\x15.push.v1.PushResponse\"\x00\x12L\n" +
	"\vLabelValues\x12\x1c.types.v1.LabelValuesRequest\x1a\x1d.types.v1.LabelValuesResponse\"\x00\x12I\n" +
	"\n" +
	"LabelNames\x12\x1b.types.v1.LabelNamesRequest\x1a\x1c.types.v1.LabelNamesResponse\"\x00\x12U\n" +
	"\fProfileTypes\x12 .ingester.v1.ProfileTypesRequest\x1a!.ingester.v1.ProfileTypesResponse\"\x00\x12C\n" +
	"\x06Series\x12\x1a.ingester.v1.SeriesRequest\x1a\x1b.ingester.v1.SeriesResponse\"\x00\x12@\n" +
	"\x05Flush\x12\x19.ingester.v1.FlushRequest\x1a\x1a.ingester.v1.FlushResponse\"\x00\x12}\n" +
	"\x18MergeProfilesStacktraces\x12,.ingester.v1.MergeProfilesStacktracesRequest\x1a-.ingester.v1.MergeProfilesStacktracesResponse\"\x00(\x010\x01\x12n\n" +
	"\x13MergeProfilesLabels\x12'.ingester.v1.MergeProfilesLabelsRequest\x1a(.ingester.v1.MergeProfilesLabelsResponse\"\x00(\x010\x01\x12k\n" +
	"\x12MergeProfilesPprof\x12&.ingester.v1.MergeProfilesPprofRequest\x1a'.ingester.v1.MergeProfilesPprofResponse\"\x00(\x010\x01\x12e\n" +
	"\x10MergeSpanProfile\x12$.ingester.v1.MergeSpanProfileRequest\x1a%.ingester.v1.MergeSpanProfileResponse\"\x00(\x010\x01\x12X\n" +
	"\rBlockMetadata\x12!.ingester.v1.BlockMetadataRequest\x1a\".ingester.v1.BlockMetadataResponse\"\x00\x12X\n" +
	"\x0fGetProfileStats\x12 .types.v1.GetProfileStatsRequest\x1a!.types.v1.GetProfileStatsResponse\"\x00\x12X\n" +
	"\rGetBlockStats\x12!.ingester.v1.GetBlockStatsRequest\x1a\".ingester.v1.GetBlockStatsResponse\"\x00B\xb3\x01\n" +
	"\x0fcom.ingester.v1B\rIngesterProtoP\x01ZDgithub.com/grafana/pyroscope/api/gen/proto/go/ingester/v1;ingesterv1\xa2\x02\x03IXX\xaa\x02\vIngester.V1\xca\x02\vIngester\\V1\xe2\x02\x17Ingester\\V1\\GPBMetadata\xea\x02\fIngester::V1b\x06proto3"

var (
	file_ingester_v1_ingester_proto_rawDescOnce sync.Once
	file_ingester_v1_ingester_proto_rawDescData []byte
)

func file_ingester_v1_ingester_proto_rawDescGZIP() []byte {
	file_ingester_v1_ingester_proto_rawDescOnce.Do(func() {
		file_ingester_v1_ingester_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ingester_v1_ingester_proto_rawDesc), len(file_ingester_v1_ingester_proto_rawDesc)))
	})
	return file_ingester_v1_ingester_proto_rawDescData
}

var file_ingester_v1_ingester_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ingester_v1_ingester_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_ingester_v1_ingester_proto_goTypes = []any{
	(StacktracesMergeFormat)(0),              // 0: ingester.v1.StacktracesMergeFormat
	(*ProfileTypesRequest)(nil),              // 1: ingester.v1.ProfileTypesRequest
	(*ProfileTypesResponse)(nil),             // 2: ingester.v1.ProfileTypesResponse
	(*SeriesRequest)(nil),                    // 3: ingester.v1.SeriesRequest
	(*SeriesResponse)(nil),                   // 4: ingester.v1.SeriesResponse
	(*FlushRequest)(nil),                     // 5: ingester.v1.FlushRequest
	(*FlushResponse)(nil),                    // 6: ingester.v1.FlushResponse
	(*SelectProfilesRequest)(nil),            // 7: ingester.v1.SelectProfilesRequest
	(*MergeProfilesStacktracesRequest)(nil),  // 8: ingester.v1.MergeProfilesStacktracesRequest
	(*MergeProfilesStacktracesResult)(nil),   // 9: ingester.v1.MergeProfilesStacktracesResult
	(*MergeProfilesStacktracesResponse)(nil), // 10: ingester.v1.MergeProfilesStacktracesResponse
	(*SelectSpanProfileRequest)(nil),         // 11: ingester.v1.SelectSpanProfileRequest
	(*MergeSpanProfileRequest)(nil),          // 12: ingester.v1.MergeSpanProfileRequest
	(*MergeSpanProfileResponse)(nil),         // 13: ingester.v1.MergeSpanProfileResponse
	(*MergeSpanProfileResult)(nil),           // 14: ingester.v1.MergeSpanProfileResult
	(*ProfileSets)(nil),                      // 15: ingester.v1.ProfileSets
	(*SeriesProfile)(nil),                    // 16: ingester.v1.SeriesProfile
	(*Profile)(nil),                          // 17: ingester.v1.Profile
	(*StacktraceSample)(nil),                 // 18: ingester.v1.StacktraceSample
	(*MergeProfilesLabelsRequest)(nil),       // 19: ingester.v1.MergeProfilesLabelsRequest
	(*MergeProfilesLabelsResponse)(nil),      // 20: ingester.v1.MergeProfilesLabelsResponse
	(*MergeProfilesPprofRequest)(nil),        // 21: ingester.v1.MergeProfilesPprofRequest
	(*MergeProfilesPprofResponse)(nil),       // 22: ingester.v1.MergeProfilesPprofResponse
	(*BlockMetadataRequest)(nil),             // 23: ingester.v1.BlockMetadataRequest
	(*BlockMetadataResponse)(nil),            // 24: ingester.v1.BlockMetadataResponse
	(*Hints)(nil),                            // 25: ingester.v1.Hints
	(*BlockHints)(nil),                       // 26: ingester.v1.BlockHints
	(*GetBlockStatsRequest)(nil),             // 27: ingester.v1.GetBlockStatsRequest
	(*GetBlockStatsResponse)(nil),            // 28: ingester.v1.GetBlockStatsResponse
	(*BlockStats)(nil),                       // 29: ingester.v1.BlockStats
	(*v1.ProfileType)(nil),                   // 30: types.v1.ProfileType
	(*v1.Labels)(nil),                        // 31: types.v1.Labels
	(v1.TimeSeriesAggregationType)(0),        // 32: types.v1.TimeSeriesAggregationType
	(*v1.LabelPair)(nil),                     // 33: types.v1.LabelPair
	(*v1.StackTraceSelector)(nil),            // 34: types.v1.StackTraceSelector
	(*v1.Series)(nil),                        // 35: types.v1.Series
	(*v1.BlockInfo)(nil),                     // 36: types.v1.BlockInfo
	(*v11.PushRequest)(nil),                  // 37: push.v1.PushRequest
	(*v1.LabelValuesRequest)(nil),            // 38: types.v1.LabelValuesRequest
	(*v1.LabelNamesRequest)(nil),             // 39: types.v1.LabelNamesRequest
	(*v1.GetProfileStatsRequest)(nil),        // 40: types.v1.GetProfileStatsRequest
	(*v11.PushResponse)(nil),                 // 41: push.v1.PushResponse
	(*v1.LabelValuesResponse)(nil),           // 42: types.v1.LabelValuesResponse
	(*v1.LabelNamesResponse)(nil),            // 43: types.v1.LabelNamesResponse
	(*v1.GetProfileStatsResponse)(nil),       // 44: types.v1.GetProfileStatsResponse
}
var file_ingester_v1_ingester_proto_depIdxs = []int32{
	30, // 0: ingester.v1.ProfileTypesResponse.profile_types:type_name -> types.v1.ProfileType
	31, // 1: ingester.v1.SeriesResponse.labels_set:type_name -> types.v1.Labels
	30, // 2: ingester.v1.SelectProfilesRequest.type:type_name -> types.v1.ProfileType
	25, // 3: ingester.v1.SelectProfilesRequest.hints:type_name -> ingester.v1.Hints
	32, // 4: ingester.v1.SelectProfilesRequest.aggregation:type_name -> types.v1.TimeSeriesAggregationType
	7,  // 5: ingester.v1.MergeProfilesStacktracesRequest.request:type_name -> ingester.v1.SelectProfilesRequest
	0,  // 6: ingester.v1.MergeProfilesStacktracesResult.format:type_name -> ingester.v1.StacktracesMergeFormat
	18, // 7: ingester.v1.MergeProfilesStacktracesResult.stacktraces:type_name -> ingester.v1.StacktraceSample
	15, // 8: ingester.v1.MergeProfilesStacktracesResponse.selectedProfiles:type_name -> ingester.v1.ProfileSets
	9,  // 9: ingester.v1.MergeProfilesStacktracesResponse.result:type_name -> ingester.v1.MergeProfilesStacktracesResult
	30, // 10: ingester.v1.SelectSpanProfileRequest.type:type_name -> types.v1.ProfileType
	25, // 11: ingester.v1.SelectSpanProfileRequest.hints:type_name -> ingester.v1.Hints
	11, // 12: ingester.v1.MergeSpanProfileRequest.request:type_name -> ingester.v1.SelectSpanProfileRequest
	15, // 13: ingester.v1.MergeSpanProfileResponse.selectedProfiles:type_name -> ingester.v1.ProfileSets
	14, // 14: ingester.v1.MergeSpanProfileResponse.result:type_name -> ingester.v1.MergeSpanProfileResult
	31, // 15: ingester.v1.ProfileSets.labelsSets:type_name -> types.v1.Labels
	16, // 16: ingester.v1.ProfileSets.profiles:type_name -> ingester.v1.SeriesProfile
	30, // 17: ingester.v1.Profile.type:type_name -> types.v1.ProfileType
	33, // 18: ingester.v1.Profile.labels:type_name -> types.v1.LabelPair
	18, // 19: ingester.v1.Profile.stacktraces:type_name -> ingester.v1.StacktraceSample
	7,  // 20: ingester.v1.MergeProfilesLabelsRequest.request:type_name -> ingester.v1.SelectProfilesRequest
	34, // 21: ingester.v1.MergeProfilesLabelsRequest.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	15, // 22: ingester.v1.MergeProfilesLabelsResponse.selectedProfiles:type_name -> ingester.v1.ProfileSets
	35, // 23: ingester.v1.MergeProfilesLabelsResponse.series:type_name -> types.v1.Series
	7,  // 24: ingester.v1.MergeProfilesPprofRequest.request:type_name -> ingester.v1.SelectProfilesRequest
	34, // 25: ingester.v1.MergeProfilesPprofRequest.stack_trace_selector:type_name -> types.v1.StackTraceSelector
	15, // 26: ingester.v1.MergeProfilesPprofResponse.selectedProfiles:type_name -> ingester.v1.ProfileSets
	36, // 27: ingester.v1.BlockMetadataResponse.blocks:type_name -> types.v1.BlockInfo
	26, // 28: ingester.v1.Hints.block:type_name -> ingester.v1.BlockHints
	29, // 29: ingester.v1.GetBlockStatsResponse.block_stats:type_name -> ingester.v1.BlockStats
	37, // 30: ingester.v1.IngesterService.Push:input_type -> push.v1.PushRequest
	38, // 31: ingester.v1.IngesterService.LabelValues:input_type -> types.v1.LabelValuesRequest
	39, // 32: ingester.v1.IngesterService.LabelNames:input_type -> types.v1.LabelNamesRequest
	1,  // 33: ingester.v1.IngesterService.ProfileTypes:input_type -> ingester.v1.ProfileTypesRequest
	3,  // 34: ingester.v1.IngesterService.Series:input_type -> ingester.v1.SeriesRequest
	5,  // 35: ingester.v1.IngesterService.Flush:input_type -> ingester.v1.FlushRequest
	8,  // 36: ingester.v1.IngesterService.MergeProfilesStacktraces:input_type -> ingester.v1.MergeProfilesStacktracesRequest
	19, // 37: ingester.v1.IngesterService.MergeProfilesLabels:input_type -> ingester.v1.MergeProfilesLabelsRequest
	21, // 38: ingester.v1.IngesterService.MergeProfilesPprof:input_type -> ingester.v1.MergeProfilesPprofRequest
	12, // 39: ingester.v1.IngesterService.MergeSpanProfile:input_type -> ingester.v1.MergeSpanProfileRequest
	23, // 40: ingester.v1.IngesterService.BlockMetadata:input_type -> ingester.v1.BlockMetadataRequest
	40, // 41: ingester.v1.IngesterService.GetProfileStats:input_type -> types.v1.GetProfileStatsRequest
	27, // 42: ingester.v1.IngesterService.GetBlockStats:input_type -> ingester.v1.GetBlockStatsRequest
	41, // 43: ingester.v1.IngesterService.Push:output_type -> push.v1.PushResponse
	42, // 44: ingester.v1.IngesterService.LabelValues:output_type -> types.v1.LabelValuesResponse
	43, // 45: ingester.v1.IngesterService.LabelNames:output_type -> types.v1.LabelNamesResponse
	2,  // 46: ingester.v1.IngesterService.ProfileTypes:output_type -> ingester.v1.ProfileTypesResponse
	4,  // 47: ingester.v1.IngesterService.Series:output_type -> ingester.v1.SeriesResponse
	6,  // 48: ingester.v1.IngesterService.Flush:output_type -> ingester.v1.FlushResponse
	10, // 49: ingester.v1.IngesterService.MergeProfilesStacktraces:output_type -> ingester.v1.MergeProfilesStacktracesResponse
	20, // 50: ingester.v1.IngesterService.MergeProfilesLabels:output_type -> ingester.v1.MergeProfilesLabelsResponse
	22, // 51: ingester.v1.IngesterService.MergeProfilesPprof:output_type -> ingester.v1.MergeProfilesPprofResponse
	13, // 52: ingester.v1.IngesterService.MergeSpanProfile:output_type -> ingester.v1.MergeSpanProfileResponse
	24, // 53: ingester.v1.IngesterService.BlockMetadata:output_type -> ingester.v1.BlockMetadataResponse
	44, // 54: ingester.v1.IngesterService.GetProfileStats:output_type -> types.v1.GetProfileStatsResponse
	28, // 55: ingester.v1.IngesterService.GetBlockStats:output_type -> ingester.v1.GetBlockStatsResponse
	43, // [43:56] is the sub-list for method output_type
	30, // [30:43] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_ingester_v1_ingester_proto_init() }
func file_ingester_v1_ingester_proto_init() {
	if File_ingester_v1_ingester_proto != nil {
		return
	}
	file_ingester_v1_ingester_proto_msgTypes[6].OneofWrappers = []any{}
	file_ingester_v1_ingester_proto_msgTypes[7].OneofWrappers = []any{}
	file_ingester_v1_ingester_proto_msgTypes[10].OneofWrappers = []any{}
	file_ingester_v1_ingester_proto_msgTypes[11].OneofWrappers = []any{}
	file_ingester_v1_ingester_proto_msgTypes[18].OneofWrappers = []any{}
	file_ingester_v1_ingester_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ingester_v1_ingester_proto_rawDesc), len(file_ingester_v1_ingester_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ingester_v1_ingester_proto_goTypes,
		DependencyIndexes: file_ingester_v1_ingester_proto_depIdxs,
		EnumInfos:         file_ingester_v1_ingester_proto_enumTypes,
		MessageInfos:      file_ingester_v1_ingester_proto_msgTypes,
	}.Build()
	File_ingester_v1_ingester_proto = out.File
	file_ingester_v1_ingester_proto_goTypes = nil
	file_ingester_v1_ingester_proto_depIdxs = nil
}
