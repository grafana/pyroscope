syntax = "proto3";

package querybackend.v1;

import "google/v1/profile.proto";
import "metastore/v1/metastore.proto";
import "types/v1/types.proto";

service QueryBackendService {
  rpc Invoke(InvokeRequest) returns (InvokeResponse) {}
}

message InvokeOptions {
  // Query workers might not have access to the tenant
  // overrides, therefore all the necessary options should
  // be listed in the request explicitly.
}

message InvokeRequest {
  repeated string tenant = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  string label_selector = 4;
  repeated Query query = 5;
  QueryPlan query_plan = 6;
  InvokeOptions options = 7;
}

// Query plan is represented by a DAG, where each node
// might be either "merge" or "read" (leaves). Each node
// references a range: merge nodes refer to other nodes,
// while read nodes refer to the blocks.
message QueryPlan {
  // Each node is encoded with 3 values:
  //  - node type: 0 - read, 1 - merge;
  //  - range offset;
  //  - range length.
  repeated uint32 graph = 1;

  // The blocks matching the query. Required.
  // TODO: Use opaque byte array to avoid unnecessary
  //  proto encoding/decoding overhead.
  repeated metastore.v1.BlockMeta blocks = 2;
}

message Query {
  oneof query_type {
    LabelNamesQuery label_names = 1;
    LabelValuesQuery label_values = 2;
    SeriesLabelsQuery series_labels = 3;
    MetricsQuery metrics = 4;
    TreeQuery tree = 5;
    // pprof
    // function_details
    // call_graph
    // top_table
    // ...
  }
}

message InvokeResponse {
  repeated Report reports = 1;
  Diagnostics diagnostics = 2;
}

// Diagnostic messages, events, statistics, analytics, etc.
message Diagnostics {}

message Report {
  oneof report_type {
    LabelNamesReport label_names = 1;
    LabelValuesReport label_values = 2;
    SeriesLabelsReport series_labels = 3;
    MetricsReport metrics = 4;
    TreeReport tree = 5;
  }
}

message LabelNamesQuery {}

message LabelNamesReport {
  LabelNamesQuery query = 1;
  repeated string label_names = 2;
}

message LabelValuesQuery {
  string label_name = 1;
}

message LabelValuesReport {
  LabelValuesQuery query = 1;
  repeated string label_values = 2;
}

message SeriesLabelsQuery {
  repeated string label_names = 1;
}

message SeriesLabelsReport {
  SeriesLabelsQuery query = 1;
  repeated types.v1.Labels series_labels = 2;
}

message MetricsQuery {
  double step = 1;
  repeated string group_by = 2;
  optional types.v1.TimeSeriesAggregationType aggregation = 3;
}

message MetricsReport {
  // TODO: Metrics model.
  MetricsQuery query = 1;
  repeated types.v1.Series metrics = 2;
}

message TreeQuery {
  int64 max_nodes = 1;
}

message TreeReport {
  TreeQuery query = 1;
  bytes data = 2;
}
