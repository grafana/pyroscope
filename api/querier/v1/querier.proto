syntax = "proto3";

package querier.v1;

import "google/v1/profile.proto";
import "types/v1/types.proto";

service QuerierService {
  // ProfileType returns a list of the existing profile types.
  rpc ProfileTypes(ProfileTypesRequest) returns (ProfileTypesResponse) {}
  // LabelValues returns the existing label values for the provided label names.
  rpc LabelValues(types.v1.LabelValuesRequest) returns (types.v1.LabelValuesResponse) {}
  // LabelNames returns a list of the existing label names.
  rpc LabelNames(types.v1.LabelNamesRequest) returns (types.v1.LabelNamesResponse) {}
  // Series returns profiles series matching the request. A series is a unique label set.
  rpc Series(SeriesRequest) returns (SeriesResponse) {}
  // SelectMergeStacktraces returns matching profiles aggregated in a flamegraph format. It will combine samples from within the same callstack, with each element being grouped by its function name.
  rpc SelectMergeStacktraces(SelectMergeStacktracesRequest) returns (SelectMergeStacktracesResponse) {}
  // SelectMergeSpans returns matching profiles aggregated in a flamegraph format. It will combine samples from within the same callstack, with each element being grouped by its function name.
  rpc SelectMergeSpanProfile(SelectMergeSpanProfileRequest) returns (SelectMergeSpanProfileResponse) {}
  // SelectMergeProfile returns matching profiles aggregated in pprof format. It will contain all information stored (so including filenames and line number, if ingested).
  rpc SelectMergeProfile(SelectMergeProfileRequest) returns (google.v1.Profile) {}
  // SelectSeries returns a time series for the total sum of the requested profiles.
  rpc SelectSeries(SelectSeriesRequest) returns (SelectSeriesResponse) {}

  rpc Diff(DiffRequest) returns (DiffResponse) {}
}

message ProfileTypesRequest {
  // Milliseconds since epoch. If missing or zero, only the ingesters will be
  // queried.
  int64 start = 1;
  // Milliseconds since epoch. If missing or zero, only the ingesters will be
  // queried.
  int64 end = 2;
}

message ProfileTypesResponse {
  repeated types.v1.ProfileType profile_types = 1;
}

message SeriesRequest {
  repeated string matchers = 1;
  repeated string label_names = 2;
  // Milliseconds since epoch. If missing or zero, only the ingesters will be
  // queried.
  int64 start = 3;
  // Milliseconds since epoch. If missing or zero, only the ingesters will be
  // queried.
  int64 end = 4;
}

message SeriesResponse {
  repeated types.v1.Labels labels_set = 2;
}

message SelectMergeStacktracesRequest {
  string profile_typeID = 1;
  string label_selector = 2;
  int64 start = 3; // milliseconds since epoch
  int64 end = 4; // milliseconds since epoch
  optional int64 max_nodes = 5; // Limit the nodes returned to only show the node with the max_node's biggest total
}

message SelectMergeStacktracesResponse {
  FlameGraph flamegraph = 1;
}

message SelectMergeSpanProfileRequest {
  string profile_typeID = 1;
  string label_selector = 2;
  repeated string span_selector = 3;
  int64 start = 4; // milliseconds since epoch
  int64 end = 5; // milliseconds since epoch
  optional int64 max_nodes = 6; // Limit the nodes returned to only show the node with the max_node's biggest total
}

message SelectMergeSpanProfileResponse {
  FlameGraph flamegraph = 1;
}

message DiffRequest {
  SelectMergeStacktracesRequest left = 1;
  SelectMergeStacktracesRequest right = 2;
}

message DiffResponse {
  FlameGraphDiff flamegraph = 1;
}

message FlameGraph {
  repeated string names = 1;
  repeated Level levels = 2;
  int64 total = 3;
  int64 max_self = 4;
}

message FlameGraphDiff {
  repeated string names = 1;
  repeated Level levels = 2;
  int64 total = 3;
  int64 max_self = 4;

  int64 leftTicks = 5;
  int64 rightTicks = 6;
}

message Level {
  repeated int64 values = 1;
}

message SelectMergeProfileRequest {
  string profile_typeID = 1;
  string label_selector = 2;
  int64 start = 3; // milliseconds since epoch
  int64 end = 4; // milliseconds since epoch
  optional int64 max_nodes = 5; // Limit the nodes returned to only show the node with the max_node's biggest total
}

message SelectSeriesRequest {
  string profile_typeID = 1;
  string label_selector = 2;
  int64 start = 3; // milliseconds since epoch
  int64 end = 4; // milliseconds since epoch
  repeated string group_by = 5;
  double step = 6; // Query resolution step width in seconds
  optional types.v1.TimeSeriesAggregationType aggregation = 7;
}

message SelectSeriesResponse {
  repeated types.v1.Series series = 1;
}
