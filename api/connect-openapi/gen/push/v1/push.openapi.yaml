openapi: 3.1.0
info:
  title: push.v1
  version: v1.0.0
tags:
  - name: scope/public
    description: This operation is considered part of the public API scope
  - name: scope/internal
    description: This operation is considered part of the interal API scope. There are no stability guaraentees when using those APIs.
  - name: push.v1.PusherService
paths:
  /push.v1.PusherService/Push:
    post:
      tags:
        - scope/public
        - push.v1.PusherService
      summary: Push
      operationId: push.v1.PusherService.Push
      parameters:
        - name: Connect-Protocol-Version
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/connect-protocol-version'
        - name: Connect-Timeout-Ms
          in: header
          schema:
            $ref: '#/components/schemas/connect-timeout-header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/push.v1.PushRequest'
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/push.v1.PushResponse'
components:
  schemas:
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/connect.error_details.Any'
          description: A list of messages that carry the error details. There is no limit on the number of messages.
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    connect.error_details.Any:
      type: object
      properties:
        type:
          type: string
          description: 'A URL that acts as a globally unique identifier for the type of the serialized message. For example: `type.googleapis.com/google.rpc.ErrorInfo`. This is used to determine the schema of the data in the `value` field and is the discriminator for the `debug` field.'
        value:
          type: string
          format: binary
          description: The Protobuf message, serialized as bytes and base64-encoded. The specific message type is identified by the `type` field.
        debug:
          oneOf:
            - type: object
              title: Any
              additionalProperties: true
              description: Detailed error information.
          discriminator:
            propertyName: type
          title: Debug
          description: Deserialized error detail payload. The 'type' field indicates the schema. This field is for easier debugging and should not be relied upon for application logic.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message, with an additional debug field for ConnectRPC error details.
    push.v1.PushRequest:
      type: object
      properties:
        series:
          type: array
          items:
            $ref: '#/components/schemas/push.v1.RawProfileSeries'
          title: series
          description: series is a set raw pprof profiles and accompanying labels
      title: PushRequest
      additionalProperties: false
      description: WriteRawRequest writes a pprof profile
    push.v1.PushResponse:
      type: object
      title: PushResponse
      additionalProperties: false
    push.v1.RawProfileSeries:
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: '#/components/schemas/types.v1.LabelPair'
          title: labels
          description: LabelPair is the key value pairs to identify the corresponding profile
        samples:
          type: array
          items:
            $ref: '#/components/schemas/push.v1.RawSample'
          title: samples
          description: samples are the set of profile bytes
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/types.v1.ProfileAnnotation'
          title: annotations
          description: |-
            Annotations provide additional metadata for a profile.

             The main differences between labels and annotations are:
              - annotations cannot be used in query selectors
              - annotation keys don't have to be unique

             Currently annotations are applied internally by distributors,
             any annotation passed via the push API will be dropped.
      title: RawProfileSeries
      additionalProperties: false
      description: RawProfileSeries represents the pprof profile and its associated labels
    push.v1.RawSample:
      type: object
      properties:
        rawProfile:
          type: string
          examples:
            - PROFILE_BASE64
          title: raw_profile
          format: byte
          description: raw_profile is the set of bytes of the pprof profile
        ID:
          type: string
          examples:
            - 734FD599-6865-419E-9475-932762D8F469
          title: ID
          description: UUID of the profile
      title: RawSample
      additionalProperties: false
      description: RawSample is the set of bytes that correspond to a pprof profile
    types.v1.LabelPair:
      type: object
      properties:
        name:
          type: string
          examples:
            - service_name
          title: name
          description: Label name
        value:
          type: string
          examples:
            - my_service
          title: value
          description: Label value
      title: LabelPair
      additionalProperties: false
    types.v1.ProfileAnnotation:
      type: object
      properties:
        key:
          type: string
          title: key
          description: Annotation key [hidden]
        value:
          type: string
          title: value
          description: Annotation value [hidden]
      title: ProfileAnnotation
      additionalProperties: false
      description: |-
        Annotations provide additional metadata for a profile.

         The main differences between labels and annotations are:
           - annotations cannot be used in query selectors
           - annotation keys don't have to be unique

         Currently annotations are applied internally by distributors,
         any annotation passed via the push API will be dropped.
security: []
