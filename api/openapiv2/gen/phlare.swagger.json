{
  "swagger": "2.0",
  "info": {
    "title": "types/v1/types.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AdHocProfileService"
    },
    {
      "name": "MetastoreService"
    },
    {
      "name": "CompactionPlanner"
    },
    {
      "name": "PusherService"
    },
    {
      "name": "IngesterService"
    },
    {
      "name": "OperatorService"
    },
    {
      "name": "QuerierService"
    },
    {
      "name": "QueryFrontendService"
    },
    {
      "name": "QueryBackendService"
    },
    {
      "name": "SegmentWriterService"
    },
    {
      "name": "SettingsService"
    },
    {
      "name": "StatusService"
    },
    {
      "name": "StoreGatewayService"
    },
    {
      "name": "VCSService"
    },
    {
      "name": "Version"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/status/buildinfo": {
      "get": {
        "summary": "Retrieve build information about the binary",
        "operationId": "StatusService_GetBuildInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBuildInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    },
    "/api/v1/status/config": {
      "get": {
        "summary": "Retrieve the running config",
        "operationId": "StatusService_GetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    },
    "/api/v1/status/config/default": {
      "get": {
        "operationId": "StatusService_GetDefaultConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    },
    "/api/v1/status/config/diff": {
      "get": {
        "summary": "Retrieve the diff config to the defaults",
        "operationId": "StatusService_GetDiffConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "StatusService"
        ]
      }
    }
  },
  "definitions": {
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "googlev1Label": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "int64",
          "title": "Index into string table"
        },
        "str": {
          "type": "string",
          "format": "int64",
          "description": "Index into string table",
          "title": "At most one of the following must be present"
        },
        "num": {
          "type": "string",
          "format": "int64"
        },
        "numUnit": {
          "type": "string",
          "format": "int64",
          "description": "Should only be present when num is present.\nSpecifies the units of num.\nUse arbitrary string (for example, \"requests\") as a custom count unit.\nIf no unit is specified, consumer may apply heuristic to deduce the unit.\nConsumers may also  interpret units like \"bytes\" and \"kilobytes\" as memory\nunits and units like \"seconds\" and \"nanoseconds\" as time units,\nand apply appropriate unit conversions to these.\n\nIndex into string table"
        }
      }
    },
    "googlev1Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the location.  A profile could use\ninstruction addresses or any integer sequence as ids."
        },
        "mappingId": {
          "type": "string",
          "format": "uint64",
          "description": "The id of the corresponding profile.Mapping for this location.\nIt can be unset if the mapping is unknown or not applicable for\nthis profile type."
        },
        "address": {
          "type": "string",
          "format": "uint64",
          "description": "The instruction address for this location, if available.  It\nshould be within [Mapping.memory_start...Mapping.memory_limit]\nfor the corresponding mapping. A non-leaf address may be in the\nmiddle of a call instruction. It is up to display tools to find\nthe beginning of the instruction if necessary."
        },
        "line": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Line"
          },
          "description": "Multiple line indicates this location has inlined functions,\nwhere the last entry represents the caller into which the\npreceding entries were inlined.\n\nE.g., if memcpy() is inlined into printf:\n   line[0].function_name == \"memcpy\"\n   line[1].function_name == \"printf\""
        },
        "isFolded": {
          "type": "boolean",
          "description": "Provides an indication that multiple symbols map to this location's\naddress, for example due to identical code folding by the linker. In that\ncase the line information above represents one of the multiple\nsymbols. This field must be recomputed when the symbolization state of the\nprofile changes."
        }
      },
      "description": "Describes function and line table debug information."
    },
    "googlev1Profile": {
      "type": "object",
      "properties": {
        "sampleType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValueType"
          },
          "description": "A description of the samples associated with each Sample.value.\nFor a cpu profile this might be:\n  [[\"cpu\",\"nanoseconds\"]] or [[\"wall\",\"seconds\"]] or [[\"syscall\",\"count\"]]\nFor a heap profile, this might be:\n  [[\"allocations\",\"count\"], [\"space\",\"bytes\"]],\nIf one of the values represents the number of events represented\nby the sample, by convention it should be at index 0 and use\nsample_type.unit == \"count\"."
        },
        "sample": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Sample"
          },
          "description": "The set of samples recorded in this profile."
        },
        "mapping": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Mapping"
          },
          "description": "Mapping from address ranges to the image/binary/library mapped\ninto that address range.  mapping[0] will be the main binary."
        },
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googlev1Location"
          },
          "title": "Useful program location"
        },
        "function": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Function"
          },
          "title": "Functions referenced by locations"
        },
        "stringTable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A common table for strings referenced by various messages.\nstring_table[0] must always be \"\"."
        },
        "dropFrames": {
          "type": "string",
          "format": "int64",
          "description": "frames with Function.function_name fully matching the following\nregexp will be dropped from the samples, along with their successors.\n\nIndex into string table."
        },
        "keepFrames": {
          "type": "string",
          "format": "int64",
          "description": "frames with Function.function_name fully matching the following\nregexp will be kept, even if it matches drop_frames.\n\nIndex into string table."
        },
        "timeNanos": {
          "type": "string",
          "format": "int64",
          "description": "Time of collection (UTC) represented as nanoseconds past the epoch."
        },
        "durationNanos": {
          "type": "string",
          "format": "int64",
          "description": "Duration of the profile, if a duration makes sense."
        },
        "periodType": {
          "$ref": "#/definitions/v1ValueType",
          "title": "The kind of events between sampled ocurrences.\ne.g [ \"cpu\",\"cycles\" ] or [ \"heap\",\"bytes\" ]"
        },
        "period": {
          "type": "string",
          "format": "int64",
          "description": "The number of events between sampled occurrences."
        },
        "comment": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "Freeform text associated to the profile.\n\nIndices into string table."
        },
        "defaultSampleType": {
          "type": "string",
          "format": "int64",
          "description": "Index into the string table of the type of the preferred sample\nvalue. If unset, clients should default to the last sample value."
        }
      }
    },
    "ingesterv1ProfileTypesResponse": {
      "type": "object",
      "properties": {
        "profileTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfileType"
          }
        }
      }
    },
    "ingesterv1SeriesResponse": {
      "type": "object",
      "properties": {
        "labelsSet": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Labels"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "pushv1PushResponse": {
      "type": "object"
    },
    "querierv1ProfileTypesResponse": {
      "type": "object",
      "properties": {
        "profileTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfileType"
          }
        }
      }
    },
    "querierv1SeriesResponse": {
      "type": "object",
      "properties": {
        "labelsSet": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Labels"
          }
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "segmentwriterv1PushResponse": {
      "type": "object"
    },
    "typesv1Location": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1AdHocProfilesGetResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uploadedAt": {
          "type": "string",
          "format": "int64",
          "title": "timestamp in milliseconds"
        },
        "profileType": {
          "type": "string"
        },
        "profileTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Some profiles formats (like pprof) can contain multiple profile (sample) types inside. One of these can be passed\nin the Get request using the profile_type field."
        },
        "flamebearerProfile": {
          "type": "string"
        }
      }
    },
    "v1AdHocProfilesListResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AdHocProfilesProfileMetadata"
          }
        }
      }
    },
    "v1AdHocProfilesProfileMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uploadedAt": {
          "type": "string",
          "format": "int64",
          "title": "timestamp in milliseconds"
        }
      }
    },
    "v1AddBlockResponse": {
      "type": "object"
    },
    "v1AnalyzeQueryResponse": {
      "type": "object",
      "properties": {
        "queryScopes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1QueryScope"
          },
          "title": "detailed view of what the query will require"
        },
        "queryImpact": {
          "$ref": "#/definitions/v1QueryImpact",
          "title": "summary of the query impact / performance"
        }
      }
    },
    "v1BlockCompaction": {
      "type": "object",
      "properties": {
        "level": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BlockHints": {
      "type": "object",
      "properties": {
        "ulids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The ULID of blocks to query"
        },
        "deduplication": {
          "type": "boolean",
          "description": "When all blocks are compacted, there is no effect of the replication factor, hence we do not need to run deduplication."
        }
      }
    },
    "v1BlockInfo": {
      "type": "object",
      "properties": {
        "ulid": {
          "type": "string"
        },
        "minTime": {
          "type": "string",
          "format": "int64"
        },
        "maxTime": {
          "type": "string",
          "format": "int64"
        },
        "compaction": {
          "$ref": "#/definitions/v1BlockCompaction"
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LabelPair"
          }
        }
      }
    },
    "v1BlockMeta": {
      "type": "object",
      "properties": {
        "formatVersion": {
          "type": "string",
          "format": "uint64"
        },
        "id": {
          "type": "string"
        },
        "minTime": {
          "type": "string",
          "format": "int64"
        },
        "maxTime": {
          "type": "string",
          "format": "int64"
        },
        "shard": {
          "type": "integer",
          "format": "int64"
        },
        "compactionLevel": {
          "type": "integer",
          "format": "int64"
        },
        "tenantId": {
          "type": "string",
          "description": "Optional. Empty if compaction level is 0."
        },
        "datasets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Dataset"
          }
        },
        "size": {
          "type": "string",
          "format": "uint64"
        },
        "createdBy": {
          "type": "string"
        }
      }
    },
    "v1BlockMetadataResponse": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockInfo"
          },
          "title": "Blocks that are present on the instance for the start to end period"
        }
      }
    },
    "v1BlockStats": {
      "type": "object",
      "properties": {
        "seriesCount": {
          "type": "string",
          "format": "uint64"
        },
        "profileCount": {
          "type": "string",
          "format": "uint64"
        },
        "sampleCount": {
          "type": "string",
          "format": "uint64"
        },
        "indexBytes": {
          "type": "string",
          "format": "uint64"
        },
        "profileBytes": {
          "type": "string",
          "format": "uint64"
        },
        "symbolBytes": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1CommitAuthor": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string",
          "title": "the author login"
        },
        "avatarURL": {
          "type": "string",
          "title": "the author avatar URL"
        }
      }
    },
    "v1CommitInfo": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "the commit message"
        },
        "author": {
          "$ref": "#/definitions/v1CommitAuthor",
          "title": "the commit author login"
        },
        "date": {
          "type": "string",
          "title": "the commit date"
        },
        "sha": {
          "type": "string",
          "title": "the commit sha"
        },
        "URL": {
          "type": "string",
          "title": "the full URL to the commit"
        }
      }
    },
    "v1CompactionJob": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the job."
        },
        "options": {
          "$ref": "#/definitions/v1CompactionOptions"
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockMeta"
          },
          "description": "List of the input blocks."
        },
        "status": {
          "$ref": "#/definitions/v1CompactionJobStatus"
        },
        "raftLogIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Fencing token."
        },
        "shard": {
          "type": "integer",
          "format": "int64",
          "description": "Shard the blocks belong to."
        },
        "tenantId": {
          "type": "string",
          "description": "Optional, empty for compaction level 0."
        },
        "compactionLevel": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "One compaction job may result in multiple output blocks."
    },
    "v1CompactionJobStatus": {
      "type": "object",
      "properties": {
        "jobName": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1CompactionStatus",
          "description": "Status update allows the planner to keep\ntrack of the job ownership and compaction\nprogress:\n- If the job status is other than IN_PROGRESS,\n  the ownership of the job is revoked.\n- FAILURE must only be sent if the failure is\n  persistent and the compaction can't be accomplished.\n- completed_job must be empty if the status is\n  other than SUCCESS, and vice-versa.\n- UNSPECIFIED must be sent if the worker rejects\n  or cancels the compaction job.\n\nPartial results/status is not allowed."
        },
        "completedJob": {
          "$ref": "#/definitions/v1CompletedJob"
        },
        "raftLogIndex": {
          "type": "string",
          "format": "uint64",
          "description": "Fencing token."
        },
        "shard": {
          "type": "integer",
          "format": "int64",
          "description": "Shard the blocks belong to."
        },
        "tenantId": {
          "type": "string",
          "description": "Optional, empty for compaction level 0."
        }
      }
    },
    "v1CompactionOptions": {
      "type": "object",
      "properties": {
        "statusUpdateIntervalSeconds": {
          "type": "string",
          "format": "uint64",
          "description": "How often the compaction worker should update\nthe job status. If overdue, the job ownership\nis revoked."
        }
      },
      "description": "Compaction planner should instruct the compactor\n worker how to compact the blocks:\n  - Limits and tenant overrides.\n  - Feature flags."
    },
    "v1CompactionStatus": {
      "type": "string",
      "enum": [
        "COMPACTION_STATUS_UNSPECIFIED",
        "COMPACTION_STATUS_IN_PROGRESS",
        "COMPACTION_STATUS_SUCCESS",
        "COMPACTION_STATUS_FAILURE",
        "COMPACTION_STATUS_CANCELLED"
      ],
      "default": "COMPACTION_STATUS_UNSPECIFIED"
    },
    "v1CompletedJob": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockMeta"
          }
        }
      }
    },
    "v1Dataset": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "minTime": {
          "type": "string",
          "format": "int64"
        },
        "maxTime": {
          "type": "string",
          "format": "int64"
        },
        "tableOfContents": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "Table of contents lists data sections within the tenant\nservice region. The offsets are absolute.\n\nThe interpretation of the table of contents is specific\nto the metadata format version. By default, the sections are:\n - 0: profiles.parquet\n - 1: index.tsdb\n - 2: symbols.symdb"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size of the section in bytes."
        },
        "profileTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "TODO: Delete. Use labels instead.\nProfile types present in the tenant service data."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Labels"
          }
        }
      }
    },
    "v1Diagnostics": {
      "type": "object",
      "description": "Diagnostic messages, events, statistics, analytics, etc."
    },
    "v1DiffResponse": {
      "type": "object",
      "properties": {
        "flamegraph": {
          "$ref": "#/definitions/v1FlameGraphDiff"
        }
      }
    },
    "v1FlameGraph": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "levels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Level"
          }
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "maxSelf": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1FlameGraphDiff": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "levels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Level"
          }
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "maxSelf": {
          "type": "string",
          "format": "int64"
        },
        "leftTicks": {
          "type": "string",
          "format": "int64"
        },
        "rightTicks": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1FlushResponse": {
      "type": "object"
    },
    "v1Function": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the function."
        },
        "name": {
          "type": "string",
          "format": "int64",
          "description": "Name of the function, in human-readable form if available.\n\nIndex into string table"
        },
        "systemName": {
          "type": "string",
          "format": "int64",
          "description": "Name of the function, as identified by the system.\nFor instance, it can be a C++ mangled name.\n\nIndex into string table"
        },
        "filename": {
          "type": "string",
          "format": "int64",
          "description": "Source file containing the function.\n\nIndex into string table"
        },
        "startLine": {
          "type": "string",
          "format": "int64",
          "description": "Line number in source file."
        }
      }
    },
    "v1GetBlockStatsResponse": {
      "type": "object",
      "properties": {
        "blockStats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockStats"
          }
        }
      }
    },
    "v1GetBuildInfoData": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "buildUser": {
          "type": "string"
        },
        "buildDate": {
          "type": "string"
        },
        "goVersion": {
          "type": "string"
        }
      }
    },
    "v1GetBuildInfoResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1GetBuildInfoData"
        }
      }
    },
    "v1GetCommitResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "the commit message"
        },
        "author": {
          "$ref": "#/definitions/v1CommitAuthor",
          "title": "the commit author login"
        },
        "date": {
          "type": "string",
          "title": "the commit date"
        },
        "sha": {
          "type": "string",
          "title": "the commit sha"
        },
        "URL": {
          "type": "string",
          "title": "the full URL to the commit"
        }
      }
    },
    "v1GetCommitsResponse": {
      "type": "object",
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CommitInfo"
          }
        }
      }
    },
    "v1GetCompactionResponse": {
      "type": "object",
      "properties": {
        "compactionJobs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompactionJob"
          },
          "title": "A list of all compaction jobs"
        }
      }
    },
    "v1GetFileResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "title": "base64 content of the file"
        },
        "URL": {
          "type": "string",
          "title": "the full URL to the file"
        }
      }
    },
    "v1GetProfileStatsResponse": {
      "type": "object",
      "properties": {
        "dataIngested": {
          "type": "boolean",
          "description": "Whether we received any data at any time in the past."
        },
        "oldestProfileTime": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "newestProfileTime": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        }
      }
    },
    "v1GetSettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Setting"
          }
        }
      }
    },
    "v1GithubAppResponse": {
      "type": "object",
      "properties": {
        "clientID": {
          "type": "string"
        }
      }
    },
    "v1GithubLoginResponse": {
      "type": "object",
      "properties": {
        "cookie": {
          "type": "string",
          "title": "Deprecated\nIn future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected\ndata (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing\nits own cookie from the new data.\nRemove after completing https://github.com/grafana/explore-profiles/issues/187"
        },
        "token": {
          "type": "string",
          "title": "base64 encoded encrypted token"
        },
        "tokenExpiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Unix ms timestamp of when the token expires."
        },
        "refreshTokenExpiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Unix ms timestamp of when the refresh token expires."
        }
      }
    },
    "v1GithubRefreshResponse": {
      "type": "object",
      "properties": {
        "cookie": {
          "type": "string",
          "title": "Deprecated\nIn future version, this cookie won't be sent. Now, old cookie is sent alongside the new expected\ndata (token, token_expires_at and refresh_token_expires_at). Frontend will be responsible of computing\nits own cookie from the new data.\nRemove after completing https://github.com/grafana/explore-profiles/issues/187"
        },
        "token": {
          "type": "string",
          "title": "base64 encoded encrypted token"
        },
        "tokenExpiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Unix ms timestamp of when the token expires."
        },
        "refreshTokenExpiresAt": {
          "type": "string",
          "format": "int64",
          "description": "Unix ms timestamp of when the refresh token expires."
        }
      }
    },
    "v1GoPGO": {
      "type": "object",
      "properties": {
        "keepLocations": {
          "type": "integer",
          "format": "int64",
          "description": "Specifies the number of leaf locations to keep."
        },
        "aggregateCallees": {
          "type": "boolean",
          "description": "Aggregate callees causes the leaf location line number to be ignored,\nthus aggregating all callee samples (but not callers)."
        }
      }
    },
    "v1Hints": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/v1BlockHints"
        }
      },
      "title": "Hints are used to propagate information about querying"
    },
    "v1InfoResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/v1State"
        },
        "leaderId": {
          "type": "string"
        },
        "isStateVerified": {
          "type": "boolean",
          "description": "True if the state reported by this node matches the state the cluster\nreports. For example, if this node claims to be a leader, but the rest of\nthe cluster disagrees, this value will be false."
        },
        "lastLeaderContact": {
          "type": "string",
          "format": "int64",
          "description": "Unix timestamp in milliseconds of when the leader last contacted this node."
        },
        "term": {
          "type": "string",
          "format": "uint64"
        },
        "suffrage": {
          "$ref": "#/definitions/v1Suffrage"
        },
        "log": {
          "$ref": "#/definitions/v1Log"
        },
        "snapshot": {
          "$ref": "#/definitions/v1Snapshot"
        },
        "protocol": {
          "$ref": "#/definitions/v1Protocol"
        },
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Peer"
          }
        }
      }
    },
    "v1InvokeOptions": {
      "type": "object",
      "description": "Query workers might not have access to the tenant\n overrides, therefore all the necessary options should\n be listed in the request explicitly."
    },
    "v1InvokeResponse": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Report"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/v1Diagnostics"
        }
      }
    },
    "v1LabelNamesQuery": {
      "type": "object"
    },
    "v1LabelNamesReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1LabelNamesQuery"
        },
        "labelNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LabelNamesResponse": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LabelPair": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1LabelValuesQuery": {
      "type": "object",
      "properties": {
        "labelName": {
          "type": "string"
        }
      }
    },
    "v1LabelValuesReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1LabelValuesQuery"
        },
        "labelValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1LabelValuesResponse": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Labels": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LabelPair"
          },
          "title": "LabelPair is the key value pairs to identify the corresponding profile"
        }
      }
    },
    "v1Level": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1Line": {
      "type": "object",
      "properties": {
        "functionId": {
          "type": "string",
          "format": "uint64",
          "description": "The id of the corresponding profile.Function for this line."
        },
        "line": {
          "type": "string",
          "format": "int64",
          "description": "Line number in source code."
        }
      }
    },
    "v1Log": {
      "type": "object",
      "properties": {
        "commitIndex": {
          "type": "string",
          "format": "uint64"
        },
        "appliedIndex": {
          "type": "string",
          "format": "uint64"
        },
        "lastIndex": {
          "type": "string",
          "format": "uint64"
        },
        "fsmPendingLength": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1Mapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "Unique nonzero id for the mapping."
        },
        "memoryStart": {
          "type": "string",
          "format": "uint64",
          "description": "Address at which the binary (or DLL) is loaded into memory."
        },
        "memoryLimit": {
          "type": "string",
          "format": "uint64",
          "description": "The limit of the address range occupied by this mapping."
        },
        "fileOffset": {
          "type": "string",
          "format": "uint64",
          "description": "Offset in the binary that corresponds to the first mapped address."
        },
        "filename": {
          "type": "string",
          "format": "int64",
          "description": "The object this entry is loaded from.  This can be a filename on\ndisk for the main binary and shared libraries, or virtual\nabstractions like \"[vdso]\".\n\nIndex into string table"
        },
        "buildId": {
          "type": "string",
          "format": "int64",
          "description": "A string that uniquely identifies a particular program version\nwith high probability. E.g., for binaries generated by GNU tools,\nit could be the contents of the .note.gnu.build-id field.\n\nIndex into string table"
        },
        "hasFunctions": {
          "type": "boolean",
          "description": "The following fields indicate the resolution of symbolic info."
        },
        "hasFilenames": {
          "type": "boolean"
        },
        "hasLineNumbers": {
          "type": "boolean"
        },
        "hasInlineFrames": {
          "type": "boolean"
        }
      }
    },
    "v1MergeProfilesLabelsResponse": {
      "type": "object",
      "properties": {
        "selectedProfiles": {
          "$ref": "#/definitions/v1ProfileSets",
          "description": "The server replies batch of profiles.\nA last message without profiles signals the next message will be the result of the merge."
        },
        "series": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Series"
          },
          "title": "The list of series for the profile with their respective value"
        }
      }
    },
    "v1MergeProfilesPprofResponse": {
      "type": "object",
      "properties": {
        "selectedProfiles": {
          "$ref": "#/definitions/v1ProfileSets",
          "description": "The server replies batch of profiles.\nA last message without profiles signals the next message will be the result of the merge."
        },
        "result": {
          "type": "string",
          "format": "byte",
          "description": "The merge result in the pprof format."
        }
      }
    },
    "v1MergeProfilesStacktracesResponse": {
      "type": "object",
      "properties": {
        "selectedProfiles": {
          "$ref": "#/definitions/v1ProfileSets",
          "description": "The server replies batch of profiles.\nA last message without profiles signals the next message will be the result of the merge."
        },
        "result": {
          "$ref": "#/definitions/v1MergeProfilesStacktracesResult",
          "title": "The list of stracktraces for the profile with their respective value"
        }
      }
    },
    "v1MergeProfilesStacktracesResult": {
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/v1StacktracesMergeFormat"
        },
        "stacktraces": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StacktraceSample"
          },
          "title": "The list of stracktraces with their respective value"
        },
        "functionNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "treeBytes": {
          "type": "string",
          "format": "byte",
          "description": "Merge result marshaled to pyroscope tree bytes."
        }
      }
    },
    "v1MergeSpanProfileResponse": {
      "type": "object",
      "properties": {
        "selectedProfiles": {
          "$ref": "#/definitions/v1ProfileSets",
          "description": "The server replies batch of profiles.\nA last message without profiles signals the next message will be the result of the merge."
        },
        "result": {
          "$ref": "#/definitions/v1MergeSpanProfileResult",
          "title": "The list of stracktraces for the profile with their respective value"
        }
      }
    },
    "v1MergeSpanProfileResult": {
      "type": "object",
      "properties": {
        "treeBytes": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1Peer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "suffrage": {
          "$ref": "#/definitions/v1Suffrage"
        }
      }
    },
    "v1Point": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Milliseconds unix timestamp"
        }
      }
    },
    "v1PollCompactionJobsResponse": {
      "type": "object",
      "properties": {
        "compactionJobs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompactionJob"
          }
        }
      }
    },
    "v1PprofQuery": {
      "type": "object",
      "properties": {
        "maxNodes": {
          "type": "string",
          "format": "int64",
          "description": "TODO(kolesnikovae): Go PGO options."
        }
      }
    },
    "v1PprofReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1PprofQuery"
        },
        "pprof": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ProfileFormat": {
      "type": "string",
      "enum": [
        "PROFILE_FORMAT_UNSPECIFIED",
        "PROFILE_FORMAT_FLAMEGRAPH",
        "PROFILE_FORMAT_TREE"
      ],
      "default": "PROFILE_FORMAT_UNSPECIFIED"
    },
    "v1ProfileSets": {
      "type": "object",
      "properties": {
        "labelsSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Labels"
          },
          "description": "DEPRECATED: Use fingerprints instead."
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SeriesProfile"
          }
        },
        "fingerprints": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        }
      }
    },
    "v1ProfileType": {
      "type": "object",
      "properties": {
        "ID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sampleType": {
          "type": "string"
        },
        "sampleUnit": {
          "type": "string"
        },
        "periodType": {
          "type": "string"
        },
        "periodUnit": {
          "type": "string"
        }
      }
    },
    "v1Protocol": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "minVersion": {
          "type": "string",
          "format": "uint64"
        },
        "maxVersion": {
          "type": "string",
          "format": "uint64"
        },
        "minSnapshotVersion": {
          "type": "string",
          "format": "uint64"
        },
        "maxSnapshotVersion": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1Query": {
      "type": "object",
      "properties": {
        "queryType": {
          "$ref": "#/definitions/v1QueryType"
        },
        "labelNames": {
          "$ref": "#/definitions/v1LabelNamesQuery",
          "description": "Exactly one of the following fields should be set,\ndepending on the query type."
        },
        "labelValues": {
          "$ref": "#/definitions/v1LabelValuesQuery"
        },
        "seriesLabels": {
          "$ref": "#/definitions/v1SeriesLabelsQuery"
        },
        "timeSeries": {
          "$ref": "#/definitions/v1TimeSeriesQuery"
        },
        "tree": {
          "$ref": "#/definitions/v1TreeQuery"
        },
        "pprof": {
          "$ref": "#/definitions/v1PprofQuery",
          "description": "function_details\n call_graph\n top_table\n ..."
        }
      }
    },
    "v1QueryImpact": {
      "type": "object",
      "properties": {
        "totalBytesInTimeRange": {
          "type": "string",
          "format": "uint64"
        },
        "totalQueriedSeries": {
          "type": "string",
          "format": "uint64"
        },
        "deduplicationNeeded": {
          "type": "boolean"
        }
      }
    },
    "v1QueryMetadataResponse": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockMeta"
          }
        }
      }
    },
    "v1QueryPlan": {
      "type": "object",
      "properties": {
        "graph": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Each node is encoded with 3 values:\n - node type: 0 - read, 1 - merge;\n - range offset;\n - range length."
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockMeta"
          },
          "description": "The blocks matching the query.\n\nTODO: Use opaque byte array to avoid unnecessary\n proto encoding/decoding overhead in transient nodes.\n Graph nodes reference ranges, thus each range could\n be a blob of bytes:\n repeated bytes block_ranges = 2;"
        }
      },
      "description": "Query plan is represented by a DAG, where each node\nmight be either \"merge\" or \"read\" (leaves). Each node\nreferences a range: merge nodes refer to other nodes,\nwhile read nodes refer to the blocks."
    },
    "v1QueryResponse": {
      "type": "object",
      "properties": {
        "reports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Report"
          }
        }
      }
    },
    "v1QueryScope": {
      "type": "object",
      "properties": {
        "componentType": {
          "type": "string",
          "title": "a descriptive high level name of the component processing one part of the query (e.g., \"short term storage\")"
        },
        "componentCount": {
          "type": "string",
          "format": "uint64",
          "title": "how many components of this type will process the query (indicator of read-path replication)"
        },
        "blockCount": {
          "type": "string",
          "format": "uint64"
        },
        "seriesCount": {
          "type": "string",
          "format": "uint64"
        },
        "profileCount": {
          "type": "string",
          "format": "uint64"
        },
        "sampleCount": {
          "type": "string",
          "format": "uint64"
        },
        "indexBytes": {
          "type": "string",
          "format": "uint64"
        },
        "profileBytes": {
          "type": "string",
          "format": "uint64"
        },
        "symbolBytes": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1QueryType": {
      "type": "string",
      "enum": [
        "QUERY_UNSPECIFIED",
        "QUERY_LABEL_NAMES",
        "QUERY_LABEL_VALUES",
        "QUERY_SERIES_LABELS",
        "QUERY_TIME_SERIES",
        "QUERY_TREE",
        "QUERY_PPROF"
      ],
      "default": "QUERY_UNSPECIFIED"
    },
    "v1RawProfileSeries": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LabelPair"
          },
          "title": "LabelPair is the key value pairs to identify the corresponding profile"
        },
        "samples": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RawSample"
          },
          "title": "samples are the set of profile bytes"
        }
      },
      "title": "RawProfileSeries represents the pprof profile and its associated labels"
    },
    "v1RawSample": {
      "type": "object",
      "properties": {
        "rawProfile": {
          "type": "string",
          "format": "byte",
          "title": "raw_profile is the set of bytes of the pprof profile"
        },
        "ID": {
          "type": "string",
          "title": "unique ID of the profile"
        }
      },
      "title": "RawSample is the set of bytes that correspond to a pprof profile"
    },
    "v1ReadIndexResponse": {
      "type": "object",
      "properties": {
        "readIndex": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1Report": {
      "type": "object",
      "properties": {
        "reportType": {
          "$ref": "#/definitions/v1ReportType"
        },
        "labelNames": {
          "$ref": "#/definitions/v1LabelNamesReport",
          "description": "Exactly one of the following fields should be set,\ndepending on the report type."
        },
        "labelValues": {
          "$ref": "#/definitions/v1LabelValuesReport"
        },
        "seriesLabels": {
          "$ref": "#/definitions/v1SeriesLabelsReport"
        },
        "timeSeries": {
          "$ref": "#/definitions/v1TimeSeriesReport"
        },
        "tree": {
          "$ref": "#/definitions/v1TreeReport"
        },
        "pprof": {
          "$ref": "#/definitions/v1PprofReport"
        }
      }
    },
    "v1ReportType": {
      "type": "string",
      "enum": [
        "REPORT_UNSPECIFIED",
        "REPORT_LABEL_NAMES",
        "REPORT_LABEL_VALUES",
        "REPORT_SERIES_LABELS",
        "REPORT_TIME_SERIES",
        "REPORT_TREE",
        "REPORT_PPROF"
      ],
      "default": "REPORT_UNSPECIFIED"
    },
    "v1Sample": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          },
          "description": "The ids recorded here correspond to a Profile.location.id.\nThe leaf is at location_id[0]."
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "The type and unit of each value is defined by the corresponding\nentry in Profile.sample_type. All samples must have the same\nnumber of values, the same as the length of Profile.sample_type.\nWhen aggregating multiple samples into a single sample, the\nresult has a list of values that is the element-wise sum of the\nlists of the originals."
        },
        "label": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googlev1Label"
          },
          "title": "label includes additional context for this sample. It can include\nthings like a thread id, allocation size, etc"
        }
      },
      "description": "Each Sample records values encountered in some program\ncontext. The program context is typically a stack trace, perhaps\naugmented with auxiliary information like the thread-id, some\nindicator of a higher level request being handled etc."
    },
    "v1SelectMergeSpanProfileResponse": {
      "type": "object",
      "properties": {
        "flamegraph": {
          "$ref": "#/definitions/v1FlameGraph"
        },
        "tree": {
          "type": "string",
          "format": "byte",
          "description": "Pyroscope tree bytes."
        }
      }
    },
    "v1SelectMergeStacktracesRequest": {
      "type": "object",
      "properties": {
        "profileTypeID": {
          "type": "string"
        },
        "labelSelector": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "maxNodes": {
          "type": "string",
          "format": "int64",
          "title": "Limit the nodes returned to only show the node with the max_node's biggest total"
        },
        "format": {
          "$ref": "#/definitions/v1ProfileFormat",
          "description": "Profile format specifies the format of profile to be returned.\nIf not specified, the profile will be returned in flame graph format."
        }
      }
    },
    "v1SelectMergeStacktracesResponse": {
      "type": "object",
      "properties": {
        "flamegraph": {
          "$ref": "#/definitions/v1FlameGraph"
        },
        "tree": {
          "type": "string",
          "format": "byte",
          "description": "Pyroscope tree bytes."
        }
      }
    },
    "v1SelectProfilesRequest": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "hints": {
          "$ref": "#/definitions/v1Hints",
          "title": "Optional: Hints for querying"
        },
        "aggregation": {
          "$ref": "#/definitions/v1TimeSeriesAggregationType",
          "title": "Optional: Aggregation"
        }
      }
    },
    "v1SelectSeriesResponse": {
      "type": "object",
      "properties": {
        "series": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Series"
          }
        }
      }
    },
    "v1SelectSpanProfileRequest": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ProfileType"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "end": {
          "type": "string",
          "format": "int64",
          "description": "Milliseconds since epoch."
        },
        "spanSelector": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of span identifiers."
        },
        "hints": {
          "$ref": "#/definitions/v1Hints",
          "title": "Optional: Hints for querying"
        }
      }
    },
    "v1Series": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LabelPair"
          }
        },
        "points": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Point"
          }
        }
      }
    },
    "v1SeriesLabelsQuery": {
      "type": "object",
      "properties": {
        "labelNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SeriesLabelsReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1SeriesLabelsQuery"
        },
        "seriesLabels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Labels"
          }
        }
      }
    },
    "v1SeriesProfile": {
      "type": "object",
      "properties": {
        "labelIndex": {
          "type": "integer",
          "format": "int32",
          "title": "The labels index of the series"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "timestamp in milliseconds"
        }
      }
    },
    "v1SetSettingsResponse": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1Setting"
        }
      }
    },
    "v1Setting": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "modifiedAt": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1Snapshot": {
      "type": "object",
      "properties": {
        "lastIndex": {
          "type": "string",
          "format": "uint64"
        },
        "lastTerm": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1StackTraceSelector": {
      "type": "object",
      "properties": {
        "callSite": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesv1Location"
          },
          "description": "Stack trace of the call site. Root at call_site[0].\nOnly stack traces having the prefix provided will be selected.\nIf empty, the filter is ignored."
        },
        "goPgo": {
          "$ref": "#/definitions/v1GoPGO",
          "description": "Stack trace selector for profiles purposed for Go PGO.\nIf set, call_site is ignored."
        }
      },
      "description": "StackTraceSelector is used for filtering stack traces by locations."
    },
    "v1StacktraceSample": {
      "type": "object",
      "properties": {
        "functionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1StacktracesMergeFormat": {
      "type": "string",
      "enum": [
        "MERGE_FORMAT_UNSPECIFIED",
        "MERGE_FORMAT_STACKTRACES",
        "MERGE_FORMAT_TREE"
      ],
      "default": "MERGE_FORMAT_UNSPECIFIED"
    },
    "v1State": {
      "type": "string",
      "enum": [
        "Follower",
        "Candidate",
        "Leader",
        "Shutdown"
      ],
      "default": "Follower",
      "description": "State values are chosen to match the Hashicorp Raft library states. See:\nhttps://github.com/hashicorp/raft/blob/42d34464b2d203e389e11ed6d43db698792c0604/state.go#L15-L27."
    },
    "v1Suffrage": {
      "type": "string",
      "enum": [
        "Voter",
        "NonVoter",
        "Staging"
      ],
      "default": "Voter",
      "description": "Suffrage values are chosen to match the Hashicorp Raft library suffrage\nvalues. See:\nhttps://github.com/hashicorp/raft/blob/42d34464b2d203e389e11ed6d43db698792c0604/configuration.go#L12-L24."
    },
    "v1TimeSeriesAggregationType": {
      "type": "string",
      "enum": [
        "TIME_SERIES_AGGREGATION_TYPE_SUM",
        "TIME_SERIES_AGGREGATION_TYPE_AVERAGE"
      ],
      "default": "TIME_SERIES_AGGREGATION_TYPE_SUM"
    },
    "v1TimeSeriesQuery": {
      "type": "object",
      "properties": {
        "step": {
          "type": "number",
          "format": "double"
        },
        "groupBy": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1TimeSeriesReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1TimeSeriesQuery"
        },
        "timeSeries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Series"
          }
        }
      }
    },
    "v1TreeQuery": {
      "type": "object",
      "properties": {
        "maxNodes": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1TreeReport": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/v1TreeQuery"
        },
        "tree": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1ValueType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "int64",
          "description": "Index into string table."
        },
        "unit": {
          "type": "string",
          "format": "int64",
          "description": "Index into string table."
        }
      },
      "description": "ValueType describes the semantics and measurement units of a value."
    },
    "v1VersionResponse": {
      "type": "object",
      "properties": {
        "QuerierAPI": {
          "type": "string",
          "format": "uint64"
        }
      }
    }
  }
}
