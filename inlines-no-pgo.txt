cmd/pyroscope/main.go:29:9: can inline (*mainFlags).Clone.func1 with cost 3 as: func(mainFlags) *mainFlags { return &mf }
cmd/pyroscope/main.go:28:6: can inline (*mainFlags).Clone with cost 24 as: method(*mainFlags) func() flagext.Registerer { return (func literal)(*mf) }
cmd/pyroscope/main.go:34:6: can inline (*mainFlags).PhlareConfig with cost 2 as: method(*mainFlags) func() *phlare.Config { return &mf.Config }
cmd/pyroscope/main.go:38:6: cannot inline (*mainFlags).RegisterFlags: function too complex: cost 468 exceeds budget 80
cmd/pyroscope/main.go:46:6: can inline errorHandler with cost 71 as: func() { testMode := cfg.GetTestMode(); if !testMode { os.Exit(1) } }
cmd/pyroscope/main.go:53:6: cannot inline main: function too complex: cost 1500 exceeds budget 80
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[string]).CompareAndSwap with cost 63 as: method(*atomic.Pointer[string]) func(*[16]uintptr, *string, *string) bool { return atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[string]).Swap with cost 62 as: method(*atomic.Pointer[string]) func(*[16]uintptr, *string) *string { return (*string)(atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new))) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[string]).Store with cost 61 as: method(*atomic.Pointer[string]) func(*[16]uintptr, *string) { atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[string]).Load with cost 4 as: method(*atomic.Pointer[string]) func(*[16]uintptr) *string { return (*string)(atomic.LoadPointer(&atomic.x.v)) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[interface { Less(github.com/google/btree.Item) bool }]).truncate with cost 38 as: method(*btree.items[interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int) { btree.toClear = <nil>; *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]; btree.zero = <nil>; for loop }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[*uint8]).truncate with cost 38 as: method(*btree.items[*uint8]) func(*[12]uintptr, int) { btree.toClear = <nil>; *btree.s, btree.toClear = (*btree.s)[:btree.index], (*btree.s)[btree.index:]; btree.zero = <nil>; for loop }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6: cannot inline btree.(*FreeListG[interface { Less(github.com/google/btree.Item) bool }]).freeNode: function too complex: cost 161 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6: cannot inline btree.(*copyOnWriteContext[interface { Less(github.com/google/btree.Item) bool }]).freeNode: function too complex: cost 173 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).reset: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).print: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: cannot inline btree.items[interface { Less(github.com/google/btree.Item) bool }].find: function too complex: cost 160 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: can inline btree.items[interface { Less(github.com/google/btree.Item) bool }].find.func1 with cost 64 as: func(int) bool { return btree.less(btree.item, btree.s[btree.i]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).iterate: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:6: cannot inline btree.(*FreeListG[interface { Less(github.com/google/btree.Item) bool }]).newNode: function too complex: cost 256 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6: can inline btree.(*copyOnWriteContext[interface { Less(github.com/google/btree.Item) bool }]).newNode with cost 71 as: method(*btree.copyOnWriteContext[interface { Less(github.com/google/btree.Item) bool }]) func(*[8]uintptr) *btree.node[interface { Less(github.com/google/btree.Item) bool }] { btree.n = (*btree.FreeListG[interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.c.freelist, (*[6]uintptr)(btree..dict[0])); btree.n.cow = btree.c; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).mutableFor: function too complex: cost 154 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6: can inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).mutableChild with cost 80 as: method(*btree.node[interface { Less(github.com/google/btree.Item) bool }]) func(*[90]uintptr, int) *btree.node[interface { Less(github.com/google/btree.Item) bool }] { btree.c := (*btree.node[interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n.children[btree.i], (*[90]uintptr)(btree..dict[1]), btree.n.cow); btree.n.children[btree.i] = btree.c; return btree.c }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[interface { Less(github.com/google/btree.Item) bool }]).pop with cost 33 as: method(*btree.items[interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr) interface { Less(github.com/google/btree.Item) bool } { btree.index := len(*btree.s) - 1; btree.out = (*btree.s)[btree.index]; btree.zero = <nil>; (*btree.s)[btree.index] = btree.zero; *btree.s = (*btree.s)[:btree.index]; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[interface { Less(github.com/google/btree.Item) bool }]).insertAt with cost 34 as: method(*btree.items[interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int, interface { Less(github.com/google/btree.Item) bool }) { btree.zero = <nil>; *btree.s = append(*btree.s, btree.zero); if btree.index < len(*btree.s) { copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) }; (*btree.s)[btree.index] = btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[*uint8]).insertAt with cost 34 as: method(*btree.items[*uint8]) func(*[12]uintptr, int, *uint8) { btree.zero = <nil>; *btree.s = append(*btree.s, btree.zero); if btree.index < len(*btree.s) { copy((*btree.s)[btree.index + 1:], (*btree.s)[btree.index:]) }; (*btree.s)[btree.index] = btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[*uint8]).pop with cost 33 as: method(*btree.items[*uint8]) func(*[12]uintptr) *uint8 { btree.index := len(*btree.s) - 1; btree.out = (*btree.s)[btree.index]; btree.zero = <nil>; (*btree.s)[btree.index] = btree.zero; *btree.s = (*btree.s)[:btree.index]; return  }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[interface { Less(github.com/google/btree.Item) bool }]).removeAt with cost 46 as: method(*btree.items[interface { Less(github.com/google/btree.Item) bool }]) func(*[12]uintptr, int) interface { Less(github.com/google/btree.Item) bool } { btree.item := (*btree.s)[btree.index]; copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]); btree.zero = <nil>; (*btree.s)[len(*btree.s) - 1] = btree.zero; *btree.s = (*btree.s)[:len(*btree.s) - 1]; return btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[*uint8]).removeAt with cost 46 as: method(*btree.items[*uint8]) func(*[12]uintptr, int) *uint8 { btree.item := (*btree.s)[btree.index]; copy((*btree.s)[btree.index:], (*btree.s)[btree.index + 1:]); btree.zero = <nil>; (*btree.s)[len(*btree.s) - 1] = btree.zero; *btree.s = (*btree.s)[:len(*btree.s) - 1]; return btree.item }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).growChildAndRemove: function too complex: cost 1110 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).remove: function too complex: cost 613 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).get: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).split: function too complex: cost 217 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild: function too complex: cost 265 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6: cannot inline btree.(*node[interface { Less(github.com/google/btree.Item) bool }]).insert: recursive
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: cannot inline btree.items[*uint8].find: function too complex: cost 160 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:215:27: can inline btree.items[*uint8].find.func1 with cost 64 as: func(int) bool { return btree.less(btree.item, btree.s[btree.i]) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).CompareAndSwap with cost 63 as: method(*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }, *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) bool { return atomic.CompareAndSwapPointer(&atomic.x.v, unsafe.Pointer(atomic.old), unsafe.Pointer(atomic.new)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Swap with cost 62 as: method(*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool } { return (*struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool })(atomic.SwapPointer(&atomic.x.v, unsafe.Pointer(atomic.new))) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Store with cost 61 as: method(*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr, *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }) { atomic.StorePointer(&atomic.x.v, unsafe.Pointer(atomic.val)) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Load with cost 4 as: method(*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]) func(*[16]uintptr) *struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool } { return (*struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool })(atomic.LoadPointer(&atomic.x.v)) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:6: cannot inline zeropool.(*Pool[[]int64]).Get: function too complex: cost 164 exceeds budget 80
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6: cannot inline zeropool.(*Pool[[]int64]).Put: function too complex: cost 156 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).append: function too complex: cost 837 exceeds budget 80
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:57:6: can inline zeropool.(*Pool[[]int64]).Put with cost 62 as: method(*zeropool.Pool[[]int64]) func([]int64) { (*zeropool.Pool[[]int64]).Put(zeropool.p, &zeropool..dict.Pool[[]int64], zeropool.item) }
../../go/pkg/mod/github.com/colega/zeropool@v0.0.0-20230505084239-6fb4a4f75381/pool.go:36:6: can inline zeropool.(*Pool[[]int64]).Get with cost 62 as: method(*zeropool.Pool[[]int64]) func() []int64 { return (*zeropool.Pool[[]int64]).Get(zeropool.p, &zeropool..dict.Pool[[]int64]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]) func(*[35]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: can inline parquet.(*GenericWriter[*uint8]).WriteRowGroup with cost 70 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr, parquet.RowGroup) (int64, error) { return int64(.autotmp_5), .autotmp_6 }
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).Flush: unhandled op DEFER
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*uint8]).Close with cost 71 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr) error { return (*parquet.Writer).Close(parquet.w.base) }
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).Close: function too complex: cost 290 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/buffer.go:57:6: can inline parquet.typeOf[*uint8] with cost 35 as: func(*[2]uintptr) reflect.Type { parquet.v = <nil>; return reflect.TypeOf(parquet.v) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: cannot inline parquet.(*GenericWriter[*uint8]).writeAny: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: cannot inline parquet.(*GenericWriter[*uint8]).writeRows: unhandled op DEFER
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:19:6: can inline unsafecast.AddressOf[*uint8] with cost 3 as: func(*[6]uintptr, []*uint8) **uint8 { return *(***uint8)(unsafe.Pointer(&unsafecast.data)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/internal/unsafecast/unsafecast.go:35:6: can inline unsafecast.PointerOf[*uint8] with cost 11 as: func(*[4]uintptr, []*uint8) unsafe.Pointer { return unsafe.Pointer(unsafecast.AddressOf[*uint8]((*[6]uintptr)(unsafecast..dict[0]), unsafecast.data)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/array.go:30:6: can inline parquet.makeArrayOf[*uint8] with cost 51 as: func(*[3]uintptr, []*uint8) sparse.Array { parquet.model = <nil>; return parquet.makeArray(unsafecast.PointerOf[*uint8]((*[4]uintptr)(parquet..dict[0]), parquet.s), len(parquet.s), unsafe.Sizeof(parquet.model)) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:135:6: cannot inline parquet.makeWriteFunc[*uint8]: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:137:9: cannot inline parquet.makeWriteFunc[*uint8].func1: function too complex: cost 227 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:116:6: cannot inline parquet.writeFuncOf[*uint8]: function too complex: cost 445 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:118:29: can inline parquet.writeFuncOf[*uint8].func1 with cost 71 as: func(*parquet.GenericWriter[*uint8], []*uint8) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:122:29: can inline parquet.writeFuncOf[*uint8].func2 with cost 71 as: func(*parquet.GenericWriter[*uint8], []*uint8) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:85:6: cannot inline parquet.NewGenericWriter[*uint8]: function too complex: cost 406 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[string,string,*uint8,*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]) func(*[35]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]) func(*[35]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:231:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).append: function too complex: cost 837 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Name with cost 66 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]) func(*[35]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.s.persister) }
./pkg/phlaredb/deduplicating_slice.go:173:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).ingest: function too complex: cost 1387 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Size with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).maxRowsPerRowGroup with cost 50 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]) func(*[35]uintptr) int { if len(phlaredb.s.slice) == 0 { return 1 }; phlaredb.bytesPerRow := (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Size(phlaredb.s, (*[35]uintptr)(phlaredb..dict[12])) / uint64(len(phlaredb.s.slice)); phlaredb.maxRows := phlaredb.s.cfg.MaxRowGroupBytes / phlaredb.bytesPerRow; if phlaredb.maxRows <= 0 { return 1 }; return int(phlaredb.maxRows) }
./pkg/phlaredb/deduplicating_slice.go:113:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Flush: unhandled op DEFER
./pkg/phlaredb/deduplicating_slice.go:80:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Close: function too complex: cost 290 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:61:6: cannot inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Init: function too complex: cost 603 exceeds budget 80
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).MemorySize with cost 9 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]) func(*[35]uintptr) uint64 { return (*atomic.Uint64).Load(phlaredb.s.size) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*uint8]).Schema with cost 6 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr) *parquet.Schema { return (*parquet.Writer).Schema(parquet.w.base) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: can inline parquet.(*GenericWriter[*uint8]).ReadRowsFrom with cost 70 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr, parquet.RowReader) (int64, error) { return int64(.autotmp_5), .autotmp_6 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*uint8]).SetKeyValueMetadata with cost 44 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr, string, string) { (*parquet.Writer).SetKeyValueMetadata(parquet.w.base, parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: cannot inline parquet.(*GenericWriter[*uint8]).WriteRows: function too complex: cost 84 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: cannot inline parquet.(*GenericWriter[*uint8]).Write: function too complex: cost 89 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:168:44: cannot inline parquet.(*GenericWriter[*uint8]).Write.func1: function too complex: cost 228 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*uint8]).Reset with cost 74 as: method(*parquet.GenericWriter[*uint8]) func(*[18]uintptr, io.Writer) { (*parquet.Writer).Reset(parquet.w.base, parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: cannot inline parquet.(*GenericWriter[*uint8]).Flush: function too complex: cost 82 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]) func(*[6]uintptr) any { return connect.r.Msg }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[string,*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[string,*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[struct { Result string; RowNum int64 }] { return &phlaredb.cacheIterator[string]{...} }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[string]).Close with cost 2 as: method(*phlaredb.cacheIterator[string]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[string]).Err with cost 2 as: method(*phlaredb.cacheIterator[string]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1358:6: cannot inline phlaredb.(*cacheIterator[string]).At: function too complex: cost 129 exceeds budget 80
./pkg/phlaredb/block_querier.go:1348:6: cannot inline phlaredb.(*cacheIterator[string]).Next: function too complex: cost 135 exceeds budget 80
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[string,*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[string,*uint8]) func(*[16]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[string,*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[string,*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[string,*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[struct { Result *uint8; RowNum int64 }] { return &phlaredb.cacheIterator[*uint8]{...} }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*uint8]).Close with cost 2 as: method(*phlaredb.cacheIterator[*uint8]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*uint8]).Err with cost 2 as: method(*phlaredb.cacheIterator[*uint8]) func(*[5]uintptr) error { return nil }
./pkg/phlaredb/block_querier.go:1358:6: cannot inline phlaredb.(*cacheIterator[*uint8]).At: function too complex: cost 129 exceeds budget 80
./pkg/phlaredb/block_querier.go:1348:6: cannot inline phlaredb.(*cacheIterator[*uint8]).Next: function too complex: cost 135 exceeds budget 80
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]) func(*[16]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[struct { Result *uint8; RowNum int64 }] { return &phlaredb.cacheIterator[*uint8]{...} }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]) func(*[16]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).retrieveRows with cost 9 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]) func(*[16]uintptr, context.Context, iter.Iterator[int64]) iter.Iterator[struct { Result *uint8; RowNum int64 }] { return &phlaredb.cacheIterator[*uint8]{...} }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).relPath with cost 68 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]) func(*[16]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1322:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).Close: function too complex: cost 81 exceeds budget 80
./pkg/phlaredb/block_querier.go:1296:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).readRG: unhandled op DEFER
./pkg/phlaredb/block_querier.go:1238:6: cannot inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).open: function too complex: cost 1151 exceeds budget 80
./pkg/phlaredb/block_querier.go:1202:6: can inline phlaredb.(*parquetReader[*v1.Profile,*uint8]).relPath with cost 68 as: method(*phlaredb.parquetReader[*v1.Profile,*uint8]) func(*[6]uintptr) string { return (func(*uint8) string)(&phlaredb..dict[0])(phlaredb.r.persister) + block.ParquetSuffix }
./pkg/phlaredb/block_querier.go:1206:6: cannot inline phlaredb.(*parquetReader[*v1.Profile,*uint8]).columnIter: function too complex: cost 383 exceeds budget 80
./pkg/phlaredb/block_querier.go:1193:6: can inline phlaredb.(*parquetReader[*v1.Profile,*uint8]).Close with cost 77 as: method(*phlaredb.parquetReader[*v1.Profile,*uint8]) func(*[6]uintptr) error { if phlaredb.r.reader != nil { return phlaredb.r.reader.Close() }; phlaredb.r.reader = nil; phlaredb.r.file = nil; return nil }
./pkg/phlaredb/block_querier.go:1152:6: cannot inline phlaredb.(*parquetReader[*v1.Profile,*uint8]).open: function too complex: cost 906 exceeds budget 80
../../go/pkg/mod/github.com/samber/lo@v1.37.0/map.go:5:6: can inline lo.Keys[int64,struct {}] with cost 20 as: func(*[5]uintptr, map[int64]struct {}) []int64 { lo.result := make([]int64, 0, len(lo.in)); for loop; return lo.result }
./pkg/iter/iter.go:77:6: can inline iter.NewSliceIterator[int64] with cost 6 as: func(*[4]uintptr, []int64) iter.Iterator[int64] { return &iter.sliceIterator[int64]{...} }
./pkg/phlaredb/block_querier.go:1060:6: cannot inline phlaredb.uniqueIDs[struct {}].iterator: function too complex: cost 120 exceeds budget 80
./pkg/phlaredb/block_querier.go:1062:18: can inline phlaredb.uniqueIDs[struct {}].iterator.func1 with cost 8 as: func(int, int) bool { return phlaredb.ids[phlaredb.i] < phlaredb.ids[phlaredb.j] }
./pkg/iter/iter.go:150:6: can inline iter.(*sliceIterator[int64]).Close with cost 2 as: method(*iter.sliceIterator[int64]) func(*[6]uintptr) error { return nil }
./pkg/iter/iter.go:146:6: can inline iter.(*sliceIterator[int64]).At with cost 3 as: method(*iter.sliceIterator[int64]) func(*[6]uintptr) int64 { return iter.i.cur }
./pkg/iter/iter.go:87:6: can inline iter.(*sliceIterator[int64]).Next with cost 32 as: method(*iter.sliceIterator[int64]) func(*[6]uintptr) bool { if len(iter.i.list) > 0 { iter.i.cur = iter.i.list[0]; iter.i.list = iter.i.list[1:]; return true }; iter.a = <nil>; iter.i.cur = iter.a; return false }
./pkg/iter/iter.go:83:6: can inline iter.(*sliceIterator[int64]).Err with cost 2 as: method(*iter.sliceIterator[int64]) func(*[6]uintptr) error { return nil }
./pkg/iter/iter.go:150:6: can inline iter.(*sliceIterator[int64]).Close with cost 7 as: method(*iter.sliceIterator[int64]) func() error { return (*iter.sliceIterator[int64]).Close(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:146:6: can inline iter.(*sliceIterator[int64]).At with cost 8 as: method(*iter.sliceIterator[int64]) func() int64 { return (*iter.sliceIterator[int64]).At(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:87:6: can inline iter.(*sliceIterator[int64]).Next with cost 37 as: method(*iter.sliceIterator[int64]) func() bool { return (*iter.sliceIterator[int64]).Next(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:83:6: can inline iter.(*sliceIterator[int64]).Err with cost 7 as: method(*iter.sliceIterator[int64]) func() error { return (*iter.sliceIterator[int64]).Err(iter.i, &iter..dict.sliceIterator[int64]) }
./pkg/iter/iter.go:77:6: can inline iter.NewSliceIterator[int64] with cost 12 as: func([]int64) iter.Iterator[int64] { return iter.NewSliceIterator[int64](&iter..dict.NewSliceIterator[int64], iter.s) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).setRequestMethod with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr, string) { connect.r.method = connect.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).internalOnly with cost 0 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).HTTPMethod with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) string { return connect.r.method }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Header with cost 13 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Peer with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) connect.Peer { return connect.r.peer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Spec with cost 3 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) connect.Spec { return connect.r.spec }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Any with cost 4 as: method(*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]) func(*[9]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).internalOnly with cost 0 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) {  }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Trailer with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.trailer == nil { connect.r.trailer = make(http.Header) }; return connect.r.trailer }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Header with cost 13 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) http.Header { if connect.r.header == nil { connect.r.header = make(http.Header) }; return connect.r.header }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Any with cost 4 as: method(*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]) func(*[6]uintptr) any { return connect.r.Msg }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send: function too complex: cost 131 exceeds budget 80
./pkg/scheduler/scheduler.go:404:6: cannot inline scheduler.(*BidiStreamCloser[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send: unhandled op DEFER
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: cannot inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive: function too complex: cost 83 exceeds budget 80
./pkg/scheduler/scheduler.go:393:6: cannot inline scheduler.(*BidiStreamCloser[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Receive: unhandled op DEFER
./pkg/scheduler/scheduler.go:384:6: cannot inline scheduler.(*BidiStreamCloser[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close: unhandled op DEFER
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Conn with cost 3 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.StreamingHandlerConn { return connect.b.conn }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseTrailer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseTrailer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.ResponseHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).RequestHeader with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) http.Header { return connect.b.conn.RequestHeader() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Peer with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.Peer { return connect.b.conn.Peer() }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Spec with cost 62 as: method(*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]) func(*[14]uintptr) connect.Spec { return connect.b.conn.Spec() }
./pkg/scheduler/scheduler.go:404:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Send with cost 63 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func(*schedulerpb.SchedulerToQuerier) error { return (*scheduler.BidiStreamCloser[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(scheduler.b, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], scheduler.msg) }
./pkg/scheduler/scheduler.go:393:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Receive with cost 71 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() (*schedulerpb.QuerierToScheduler, error) { return .autotmp_3, .autotmp_4 }
./pkg/scheduler/scheduler.go:384:6: can inline scheduler.(*BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Close with cost 61 as: method(*scheduler.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() { (*scheduler.BidiStreamCloser[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Close(scheduler.c, &scheduler..dict.BidiStreamCloser[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.NotifyQuerierShutdownRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func(*schedulerpb.SchedulerToQuerier) error { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() (*schedulerpb.QuerierToScheduler, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.Peer { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) func() connect.Spec { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QuerierID string "protobuf:\"bytes,1,opt,name=querierID,proto3\" json:\"querierID,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,2,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; FrontendAddress string "protobuf:\"bytes,3,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; StatsEnabled bool "protobuf:\"varint,5,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.QuerierToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToQuerier]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func(*schedulerpb.SchedulerToFrontend) error { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() (*schedulerpb.FrontendToScheduler, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.Peer { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) func() connect.Spec { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Type github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToSchedulerType "protobuf:\"varint,1,opt,name=type,proto3,enum=schedulerpb.FrontendToSchedulerType\" json:\"type,omitempty\""; FrontendAddress string "protobuf:\"bytes,2,opt,name=frontendAddress,proto3\" json:\"frontendAddress,omitempty\""; QueryID uint64 "protobuf:\"varint,3,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; UserID string "protobuf:\"bytes,4,opt,name=userID,proto3\" json:\"userID,omitempty\""; HttpRequest *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPRequest "protobuf:\"bytes,5,opt,name=httpRequest,proto3\" json:\"httpRequest,omitempty\""; StatsEnabled bool "protobuf:\"varint,6,opt,name=statsEnabled,proto3\" json:\"statsEnabled,omitempty\"" },struct { github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.sizeCache int32; github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.unknownFields []uint8; Status github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontendStatus "protobuf:\"varint,1,opt,name=status,proto3,enum=schedulerpb.SchedulerToFrontendStatus\" json:\"status,omitempty\""; Error string "protobuf:\"bytes,2,opt,name=error,proto3\" json:\"error,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.FrontendToScheduler,github.com/grafana/pyroscope/pkg/scheduler/schedulerpb.SchedulerToFrontend]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/pkg/frontend/frontendpb.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/pkg/frontend/frontendpb.sizeCache int32; github.com/grafana/pyroscope/pkg/frontend/frontendpb.unknownFields []uint8; QueryID uint64 "protobuf:\"varint,1,opt,name=queryID,proto3\" json:\"queryID,omitempty\""; HttpResponse *github.com/grafana/pyroscope/pkg/util/httpgrpc.HTTPResponse "protobuf:\"bytes,2,opt,name=httpResponse,proto3\" json:\"httpResponse,omitempty\""; Stats *github.com/grafana/pyroscope/pkg/querier/stats.Stats "protobuf:\"bytes,3,opt,name=stats,proto3\" json:\"stats,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/pkg/frontend/frontendpb.QueryResultRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.FlushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func(*ingesterv1.MergeProfilesPprofResponse) error { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() (*ingesterv1.MergeProfilesPprofRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.Peer { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) func() connect.Spec { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result []uint8 "protobuf:\"bytes,2,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesPprofResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func(*ingesterv1.MergeProfilesLabelsResponse) error { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() (*ingesterv1.MergeProfilesLabelsRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.Peer { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) func() connect.Spec { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; By []string "protobuf:\"bytes,2,rep,name=by,proto3\" json:\"by,omitempty\""; Profiles []bool "protobuf:\"varint,3,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,2,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesLabelsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:187:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Conn with cost 8 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.StreamingHandlerConn { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Conn(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:178:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Send with cost 63 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func(*ingesterv1.MergeProfilesStacktracesResponse) error { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Send(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse], connect.msg) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:172:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).ResponseTrailer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseTrailer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:163:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).ResponseHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).ResponseHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:150:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Receive with cost 71 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() (*ingesterv1.MergeProfilesStacktracesRequest, error) { return .autotmp_3, .autotmp_4 }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:144:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).RequestHeader with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() http.Header { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).RequestHeader(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:139:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Peer with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.Peer { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Peer(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/handler_stream.go:134:6: can inline connect.(*BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]).Spec with cost 67 as: method(*connect.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) func() connect.Spec { return (*connect.BidiStream[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Request *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SelectProfilesRequest "protobuf:\"bytes,1,opt,name=request,proto3\" json:\"request,omitempty\""; MaxNodes *int64 "protobuf:\"varint,3,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\""; Profiles []bool "protobuf:\"varint,2,rep,packed,name=profiles,proto3\" json:\"profiles,omitempty\"" },struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; SelectedProfiles *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileSets "protobuf:\"bytes,1,opt,name=selectedProfiles,proto3\" json:\"selectedProfiles,omitempty\""; Result *github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResult "protobuf:\"bytes,3,opt,name=result,proto3\" json:\"result,omitempty\"" }]).Spec(connect.b, &connect..dict.BidiStream[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesRequest,github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.MergeProfilesStacktracesResponse]) }
./pkg/phlaredb/block_querier.go:1060:6: can inline phlaredb.uniqueIDs[struct {}].iterator with cost 62 as: method(phlaredb.uniqueIDs[struct {}]) func() iter.Iterator[int64] { return phlaredb.uniqueIDs[struct {}].iterator(phlaredb.m, &phlaredb..dict.uniqueIDs[struct {}]) }
./pkg/phlaredb/block_querier.go:1206:6: can inline phlaredb.(*parquetReader[*v1.Profile,*v1.ProfilePersister]).columnIter with cost 66 as: method(*phlaredb.parquetReader[*v1.Profile,*v1.ProfilePersister]) func(context.Context, string, query.Predicate, string) iter.SeekIterator[*github.com/grafana/pyroscope/pkg/phlaredb/query.IteratorResult,github.com/grafana/pyroscope/pkg/phlaredb/query.RowNumberWithDefinitionLevel] { return (*phlaredb.parquetReader[*v1.Profile,*uint8]).columnIter(phlaredb.r, &phlaredb..dict.parquetReader[*v1.Profile,*v1.ProfilePersister], phlaredb.ctx, phlaredb.columnName, phlaredb.predicate, phlaredb.alias) }
./pkg/phlaredb/block_querier.go:1202:6: can inline phlaredb.(*parquetReader[*v1.Profile,*v1.ProfilePersister]).relPath with cost 73 as: method(*phlaredb.parquetReader[*v1.Profile,*v1.ProfilePersister]) func() string { return (*phlaredb.parquetReader[*v1.Profile,*uint8]).relPath(phlaredb.r, &phlaredb..dict.parquetReader[*v1.Profile,*v1.ProfilePersister]) }
./pkg/phlaredb/block_querier.go:1193:6: cannot inline phlaredb.(*parquetReader[*v1.Profile,*v1.ProfilePersister]).Close: function too complex: cost 82 exceeds budget 80
./pkg/phlaredb/block_querier.go:1152:6: can inline phlaredb.(*parquetReader[*v1.Profile,*v1.ProfilePersister]).open with cost 64 as: method(*phlaredb.parquetReader[*v1.Profile,*v1.ProfilePersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.parquetReader[*v1.Profile,*uint8]).open(phlaredb.r, &phlaredb..dict.parquetReader[*v1.Profile,*v1.ProfilePersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*v1.InMemoryMapping]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryMapping]).Close with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryMapping]) func() error { return (*phlaredb.cacheIterator[*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryMapping]).Err with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryMapping]) func() error { return (*phlaredb.cacheIterator[*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryMapping]).At with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryMapping]) func() phlaredb.ResultWithRowNum[*v1.InMemoryMapping] { return (*phlaredb.cacheIterator[*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryMapping]).Next with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryMapping]) func() bool { return (*phlaredb.cacheIterator[*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryMapping]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) func() string { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) }
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) func() error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) func([]*v1.InMemoryMapping, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryMapping,*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryMapping,*v1.MappingPersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*v1.InMemoryLocation]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryLocation]).Close with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryLocation]) func() error { return (*phlaredb.cacheIterator[*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryLocation]).Err with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryLocation]) func() error { return (*phlaredb.cacheIterator[*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryLocation]).At with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryLocation]) func() phlaredb.ResultWithRowNum[*v1.InMemoryLocation] { return (*phlaredb.cacheIterator[*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryLocation]).Next with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryLocation]) func() bool { return (*phlaredb.cacheIterator[*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryLocation]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) func() string { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) }
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) func() error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) func([]*v1.InMemoryLocation, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryLocation,*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryLocation,*v1.LocationPersister], phlaredb.ctx, phlaredb.bucketReader) }
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[*v1.InMemoryFunction]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryFunction]).Close with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryFunction]) func() error { return (*phlaredb.cacheIterator[*uint8]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryFunction]).Err with cost 7 as: method(*phlaredb.cacheIterator[*v1.InMemoryFunction]) func() error { return (*phlaredb.cacheIterator[*uint8]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryFunction]).At with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryFunction]) func() phlaredb.ResultWithRowNum[*v1.InMemoryFunction] { return (*phlaredb.cacheIterator[*uint8]).At(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[*v1.InMemoryFunction]).Next with cost 62 as: method(*phlaredb.cacheIterator[*v1.InMemoryFunction]) func() bool { return (*phlaredb.cacheIterator[*uint8]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[*v1.InMemoryFunction]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) func() string { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) }
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) func() error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) func([]*v1.InMemoryFunction, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[*v1.InMemoryFunction,*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[*v1.InMemoryFunction,*v1.FunctionPersister], phlaredb.ctx, phlaredb.bucketReader) }
<autogenerated>:1: cannot inline type..eq.github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[string]: type eq/hash function
./pkg/phlaredb/block_querier.go:1336:6: can inline phlaredb.(*inMemoryparquetReader[string,*v1.StringPersister]).retrieveRows with cost 20 as: method(*phlaredb.inMemoryparquetReader[string,*v1.StringPersister]) func(context.Context, iter.Iterator[int64]) iter.Iterator[github.com/grafana/pyroscope/pkg/phlaredb.ResultWithRowNum[string]] { var .autotmp_3 context.Context; .autotmp_3 = <nil>; return (*phlaredb.inMemoryparquetReader[string,*uint8]).retrieveRows(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*v1.StringPersister], .autotmp_3, phlaredb.rowNumIterator) }
./pkg/phlaredb/block_querier.go:1369:6: can inline phlaredb.(*cacheIterator[string]).Close with cost 7 as: method(*phlaredb.cacheIterator[string]) func() error { return (*phlaredb.cacheIterator[string]).Close(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1365:6: can inline phlaredb.(*cacheIterator[string]).Err with cost 7 as: method(*phlaredb.cacheIterator[string]) func() error { return (*phlaredb.cacheIterator[string]).Err(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1358:6: can inline phlaredb.(*cacheIterator[string]).At with cost 62 as: method(*phlaredb.cacheIterator[string]) func() phlaredb.ResultWithRowNum[string] { return (*phlaredb.cacheIterator[string]).At(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1348:6: can inline phlaredb.(*cacheIterator[string]).Next with cost 62 as: method(*phlaredb.cacheIterator[string]) func() bool { return (*phlaredb.cacheIterator[string]).Next(phlaredb.c, &phlaredb..dict.cacheIterator[string]) }
./pkg/phlaredb/block_querier.go:1332:6: can inline phlaredb.(*inMemoryparquetReader[string,*v1.StringPersister]).relPath with cost 73 as: method(*phlaredb.inMemoryparquetReader[string,*v1.StringPersister]) func() string { return (*phlaredb.inMemoryparquetReader[string,*uint8]).relPath(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*v1.StringPersister]) }
./pkg/phlaredb/block_querier.go:1322:6: can inline phlaredb.(*inMemoryparquetReader[string,*v1.StringPersister]).Close with cost 62 as: method(*phlaredb.inMemoryparquetReader[string,*v1.StringPersister]) func() error { return (*phlaredb.inMemoryparquetReader[string,*uint8]).Close(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*v1.StringPersister]) }
./pkg/phlaredb/block_querier.go:1296:6: can inline phlaredb.(*inMemoryparquetReader[string,*v1.StringPersister]).readRG with cost 64 as: method(*phlaredb.inMemoryparquetReader[string,*v1.StringPersister]) func([]string, parquet.RowGroup) error { return (*phlaredb.inMemoryparquetReader[string,*uint8]).readRG(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*v1.StringPersister], phlaredb.dst, phlaredb.rg) }
./pkg/phlaredb/block_querier.go:1238:6: can inline phlaredb.(*inMemoryparquetReader[string,*v1.StringPersister]).open with cost 64 as: method(*phlaredb.inMemoryparquetReader[string,*v1.StringPersister]) func(context.Context, objstore.BucketReader) error { return (*phlaredb.inMemoryparquetReader[string,*uint8]).open(phlaredb.r, &phlaredb..dict.inMemoryparquetReader[string,*v1.StringPersister], phlaredb.ctx, phlaredb.bucketReader) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/ingester/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*v1.Profile]).writeAny with cost 72 as: method(*parquet.GenericWriter[*v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*v1.Profile]).writeRows with cost 72 as: method(*parquet.GenericWriter[*v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*v1.Profile]).Schema with cost 11 as: method(*parquet.GenericWriter[*v1.Profile]) func() *parquet.Schema { return (*parquet.GenericWriter[*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*v1.Profile]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*v1.Profile]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*v1.Profile]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*v1.Profile]) func(string, string) { (*parquet.GenericWriter[*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*v1.Profile], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*v1.Profile]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*v1.Profile]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*v1.Profile]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*v1.Profile]).Write with cost 72 as: method(*parquet.GenericWriter[*v1.Profile]) func([]*v1.Profile) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*v1.Profile]).Reset with cost 79 as: method(*parquet.GenericWriter[*v1.Profile]) func(io.Writer) { (*parquet.GenericWriter[*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*v1.Profile], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*v1.Profile]).Flush with cost 62 as: method(*parquet.GenericWriter[*v1.Profile]) func() error { return (*parquet.GenericWriter[*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*v1.Profile]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*v1.Profile]).Close with cost 76 as: method(*parquet.GenericWriter[*v1.Profile]) func() error { return (*parquet.GenericWriter[*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*v1.Profile]) }
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func([]uint32, []*v1.InMemoryLocation) { (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func(context.Context, []*v1.InMemoryLocation, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func() int { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func() error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) func() string { return (*phlaredb.deduplicatingSlice[*v1.InMemoryLocation,struct { MappingId uint32; Address uint64; LinesHash uint64 },*uint8,*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryLocation,github.com/grafana/pyroscope/pkg/phlaredb.locationsKey,*github.com/grafana/pyroscope/pkg/phlaredb.locationsHelper,*v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*v1.LocationPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func(string, string) { (*parquet.GenericWriter[*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*v1.LocationPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*v1.LocationPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func([]*v1.LocationPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func(io.Writer) { (*parquet.GenericWriter[*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*v1.LocationPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*v1.LocationPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*v1.LocationPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*v1.LocationPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*v1.LocationPersister]) }
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func([]uint32, []*v1.InMemoryFunction) { (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func(context.Context, []*v1.InMemoryFunction, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func() int { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func() error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) func() string { return (*phlaredb.deduplicatingSlice[*v1.InMemoryFunction,struct { Name uint32; SystemName uint32; Filename uint32; StartLine uint32 },*uint8,*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryFunction,github.com/grafana/pyroscope/pkg/phlaredb.functionsKey,*github.com/grafana/pyroscope/pkg/phlaredb.functionsHelper,*v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*v1.FunctionPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func(string, string) { (*parquet.GenericWriter[*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*v1.FunctionPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*v1.FunctionPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func([]*v1.FunctionPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func(io.Writer) { (*parquet.GenericWriter[*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*v1.FunctionPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*v1.FunctionPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*v1.FunctionPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*v1.FunctionPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*v1.FunctionPersister]) }
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func([]uint32, []*v1.InMemoryMapping) { (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func(context.Context, []*v1.InMemoryMapping, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func() int { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func() error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) func() string { return (*phlaredb.deduplicatingSlice[*v1.InMemoryMapping,struct { MemoryStart uint64; MemoryLimit uint64; FileOffset uint64; Filename uint32; BuildId uint32; HasFunctions bool; HasFilenames bool; HasLineNumbers bool; HasInlineFrames bool },*uint8,*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[*v1.InMemoryMapping,github.com/grafana/pyroscope/pkg/phlaredb.mappingsKey,*github.com/grafana/pyroscope/pkg/phlaredb.mappingsHelper,*v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*v1.MappingPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func(string, string) { (*parquet.GenericWriter[*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*v1.MappingPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*v1.MappingPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func([]*v1.MappingPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func(io.Writer) { (*parquet.GenericWriter[*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*v1.MappingPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*v1.MappingPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*v1.MappingPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*v1.MappingPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*v1.MappingPersister]) }
./pkg/phlaredb/deduplicating_slice.go:231:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).append with cost 63 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func([]uint32, []string) { (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).append(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister], phlaredb.dst, phlaredb.elems) }
./pkg/phlaredb/deduplicating_slice.go:173:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).ingest with cost 69 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func(context.Context, []string, *phlaredb.rewriter) error { var .autotmp_4 context.Context; .autotmp_4 = <nil>; return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).ingest(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister], .autotmp_4, phlaredb.elems, phlaredb.rewriter) }
./pkg/phlaredb/deduplicating_slice.go:113:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).Flush with cost 76 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func(context.Context) (uint64, uint64, error) { return .autotmp_5, .autotmp_6, .autotmp_7 }
./pkg/phlaredb/deduplicating_slice.go:92:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).maxRowsPerRowGroup with cost 55 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func() int { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).maxRowsPerRowGroup(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:80:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).Close with cost 62 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func() error { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).Close(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:61:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).Init with cost 65 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func(string, *phlaredb.ParquetConfig, *phlaredb.headMetrics) error { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).Init(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister], phlaredb.path, phlaredb.cfg, phlaredb.metrics) }
./pkg/phlaredb/deduplicating_slice.go:57:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).Size with cost 14 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).Size(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:53:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).MemorySize with cost 14 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func() uint64 { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).MemorySize(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) }
./pkg/phlaredb/deduplicating_slice.go:49:6: can inline phlaredb.(*deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]).Name with cost 71 as: method(*phlaredb.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) func() string { return (*phlaredb.deduplicatingSlice[string,string,*uint8,*uint8]).Name(phlaredb.s, &phlaredb..dict.deduplicatingSlice[string,string,*github.com/grafana/pyroscope/pkg/phlaredb.stringsHelper,*v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:231:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).writeAny with cost 72 as: method(*parquet.GenericWriter[*v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:215:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).writeRows with cost 72 as: method(*parquet.GenericWriter[*v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:211:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).Schema with cost 11 as: method(*parquet.GenericWriter[*v1.StringPersister]) func() *parquet.Schema { return (*parquet.GenericWriter[*uint8]).Schema(parquet.w, &parquet..dict.GenericWriter[*v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:207:6: cannot inline parquet.(*GenericWriter[*v1.StringPersister]).ReadRowsFrom: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:203:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).SetKeyValueMetadata with cost 50 as: method(*parquet.GenericWriter[*v1.StringPersister]) func(string, string) { (*parquet.GenericWriter[*uint8]).SetKeyValueMetadata(parquet.w, &parquet..dict.GenericWriter[*v1.StringPersister], parquet.key, parquet.value) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:190:6: cannot inline parquet.(*GenericWriter[*v1.StringPersister]).WriteRowGroup: function too complex: cost 85 exceeds budget 80
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:186:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).WriteRows with cost 72 as: method(*parquet.GenericWriter[*v1.StringPersister]) func([]parquet.Row) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:167:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).Write with cost 72 as: method(*parquet.GenericWriter[*v1.StringPersister]) func([]*v1.StringPersister) (int, error) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:163:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).Reset with cost 79 as: method(*parquet.GenericWriter[*v1.StringPersister]) func(io.Writer) { (*parquet.GenericWriter[*uint8]).Reset(parquet.w, &parquet..dict.GenericWriter[*v1.StringPersister], parquet.output) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:159:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).Flush with cost 62 as: method(*parquet.GenericWriter[*v1.StringPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Flush(parquet.w, &parquet..dict.GenericWriter[*v1.StringPersister]) }
../../go/pkg/mod/github.com/parquet-go/parquet-go@v0.17.1-0.20230724165737-1e4f8bbc561c/writer.go:155:6: can inline parquet.(*GenericWriter[*v1.StringPersister]).Close with cost 76 as: method(*parquet.GenericWriter[*v1.StringPersister]) func() error { return (*parquet.GenericWriter[*uint8]).Close(parquet.w, &parquet..dict.GenericWriter[*v1.StringPersister]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; ActiveTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,1,rep,name=active_targets,json=activeTargets,proto3\" json:\"active_targets,omitempty\""; DroppedTargets []*github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.Target "protobuf:\"bytes,2,rep,name=dropped_targets,json=droppedTargets,proto3\" json:\"dropped_targets,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.unknownFields []uint8; State github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.State "protobuf:\"varint,1,opt,name=state,proto3,enum=agent.v1.State\" json:\"state,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/agent/v1.GetTargetsRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; LabelsSet []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Labels "protobuf:\"bytes,2,rep,name=labels_set,json=labelsSet,proto3\" json:\"labels_set,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\""; LabelNames []string "protobuf:\"bytes,2,rep,name=label_names,json=labelNames,proto3\" json:\"label_names,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.Series "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; GroupBy []string "protobuf:\"bytes,5,rep,name=group_by,json=groupBy,proto3\" json:\"group_by,omitempty\""; Step float64 "protobuf:\"fixed64,6,opt,name=step,proto3\" json:\"step,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectSeriesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraph "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\""; MaxNodes *int64 "protobuf:\"varint,5,opt,name=max_nodes,json=maxNodes,proto3,oneof\" json:\"max_nodes,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/google/v1.state google.golang.org/protobuf/internal/impl.MessageState "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.sizeCache int32 "parquet:\"-\""; github.com/grafana/pyroscope/api/gen/proto/go/google/v1.unknownFields []uint8 "parquet:\"-\""; SampleType []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,1,rep,name=sample_type,json=sampleType,proto3\" json:\"sample_type,omitempty\" parquet:\",\""; Sample []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Sample "protobuf:\"bytes,2,rep,name=sample,proto3\" json:\"sample,omitempty\" parquet:\",\""; Mapping []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Mapping "protobuf:\"bytes,3,rep,name=mapping,proto3\" json:\"mapping,omitempty\" parquet:\",\""; Location []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Location "protobuf:\"bytes,4,rep,name=location,proto3\" json:\"location,omitempty\" parquet:\",\""; Function []*github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Function "protobuf:\"bytes,5,rep,name=function,proto3\" json:\"function,omitempty\" parquet:\",\""; StringTable []string "protobuf:\"bytes,6,rep,name=string_table,json=stringTable,proto3\" json:\"string_table,omitempty\" parquet:\",\""; DropFrames int64 "protobuf:\"varint,7,opt,name=drop_frames,json=dropFrames,proto3\" json:\"drop_frames,omitempty\" parquet:\"-\""; KeepFrames int64 "protobuf:\"varint,8,opt,name=keep_frames,json=keepFrames,proto3\" json:\"keep_frames,omitempty\" parquet:\"-\""; TimeNanos int64 "protobuf:\"varint,9,opt,name=time_nanos,json=timeNanos,proto3\" json:\"time_nanos,omitempty\" parquet:\",delta\""; DurationNanos int64 "protobuf:\"varint,10,opt,name=duration_nanos,json=durationNanos,proto3\" json:\"duration_nanos,omitempty\" parquet:\"-\""; PeriodType *github.com/grafana/pyroscope/api/gen/proto/go/google/v1.ValueType "protobuf:\"bytes,11,opt,name=period_type,json=periodType,proto3\" json:\"period_type,omitempty\" parquet:\"-\""; Period int64 "protobuf:\"varint,12,opt,name=period,proto3\" json:\"period,omitempty\" parquet:\"-\""; Comment []int64 "protobuf:\"varint,13,rep,packed,name=comment,proto3\" json:\"comment,omitempty\" parquet:\"-\""; DefaultSampleType int64 "protobuf:\"varint,14,opt,name=default_sample_type,json=defaultSampleType,proto3\" json:\"default_sample_type,omitempty\" parquet:\"-\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/google/v1.Profile]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypeID string "protobuf:\"bytes,1,opt,name=profile_typeID,json=profileTypeID,proto3\" json:\"profile_typeID,omitempty\""; LabelSelector string "protobuf:\"bytes,2,opt,name=label_selector,json=labelSelector,proto3\" json:\"label_selector,omitempty\""; Start int64 "protobuf:\"varint,3,opt,name=start,proto3\" json:\"start,omitempty\""; End int64 "protobuf:\"varint,4,opt,name=end,proto3\" json:\"end,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeProfileRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; ProfileTypes []*github.com/grafana/pyroscope/api/gen/proto/go/types/v1.ProfileType "protobuf:\"bytes,1,rep,name=profile_types,json=profileTypes,proto3\" json:\"profile_types,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.ProfileTypesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Name string "protobuf:\"bytes,1,opt,name=name,proto3\" json:\"name,omitempty\""; Matchers []string "protobuf:\"bytes,2,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelValuesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Names []string "protobuf:\"bytes,1,rep,name=names,proto3\" json:\"names,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/types/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/types/v1.unknownFields []uint8; Matchers []string "protobuf:\"bytes,1,rep,name=matchers,proto3\" json:\"matchers,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/types/v1.LabelNamesRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Flamegraph *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.FlameGraphDiff "protobuf:\"bytes,1,opt,name=flamegraph,proto3\" json:\"flamegraph,omitempty\"" }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.unknownFields []uint8; Left *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,1,opt,name=left,proto3\" json:\"left,omitempty\""; Right *github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.SelectMergeStacktracesRequest "protobuf:\"bytes,2,opt,name=right,proto3\" json:\"right,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/querier/v1.DiffRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:285:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).internalOnly with cost 4 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() { (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).internalOnly(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:277:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Trailer with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Trailer(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:263:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Header with cost 18 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() http.Header { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Header(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:256:6: can inline connect.(*Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]).Any with cost 9 as: method(*connect.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) func() any { return (*connect.Response[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8 }]).Any(connect.r, &connect..dict.Response[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushResponse]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:209:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).setRequestMethod with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func(string) { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).setRequestMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest], connect.method) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:206:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).internalOnly with cost 4 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() { (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).internalOnly(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:201:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).HTTPMethod with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() string { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).HTTPMethod(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:184:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Header with cost 18 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() http.Header { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Header(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:177:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Peer with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() connect.Peer { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Peer(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:172:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Spec with cost 8 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() connect.Spec { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Spec(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../go/pkg/mod/github.com/bufbuild/connect-go@v1.9.0/connect.go:167:6: can inline connect.(*Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]).Any with cost 9 as: method(*connect.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) func() any { return (*connect.Request[struct { github.com/grafana/pyroscope/api/gen/proto/go/push/v1.state google.golang.org/protobuf/internal/impl.MessageState; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.sizeCache int32; github.com/grafana/pyroscope/api/gen/proto/go/push/v1.unknownFields []uint8; Series []*github.com/grafana/pyroscope/api/gen/proto/go/push/v1.RawProfileSeries "protobuf:\"bytes,1,rep,name=series,proto3\" json:\"series,omitempty\"" }]).Any(connect.r, &connect..dict.Request[github.com/grafana/pyroscope/api/gen/proto/go/push/v1.PushRequest]) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[net/http.response]).CompareAndSwap with cost 70 as: method(*atomic.Pointer[net/http.response]) func(*http.response, *http.response) bool { return (*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).CompareAndSwap(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.old, atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[net/http.response]).Swap with cost 68 as: method(*atomic.Pointer[net/http.response]) func(*http.response) *http.response { return (*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Swap(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[net/http.response]).Store with cost 66 as: method(*atomic.Pointer[net/http.response]) func(*http.response) { (*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Store(atomic.x, &atomic..dict.Pointer[net/http.response], atomic.val) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[net/http.response]).Load with cost 9 as: method(*atomic.Pointer[net/http.response]) func() *http.response { return (*atomic.Pointer[struct { net/http.conn *net/http.conn; net/http.req *net/http.Request; net/http.reqBody io.ReadCloser; net/http.cancelCtx context.CancelFunc; net/http.wroteHeader bool; net/http.wroteContinue bool; net/http.wants10KeepAlive bool; net/http.wantsClose bool; net/http.canWriteContinue sync/atomic.Bool; net/http.writeContinueMu sync.Mutex; net/http.w *bufio.Writer; net/http.cw net/http.chunkWriter; net/http.handlerHeader net/http.Header; net/http.calledHeader bool; net/http.written int64; net/http.contentLength int64; net/http.status int; net/http.closeAfterReply bool; net/http.fullDuplex bool; net/http.requestBodyLimitHit bool; net/http.trailers []string; net/http.handlerDone sync/atomic.Bool; net/http.dateBuf [29]uint8; net/http.clenBuf [10]uint8; net/http.statusBuf [3]uint8; net/http.closeNotifyCh chan bool; net/http.didCloseNotify sync/atomic.Bool }]).Load(atomic.x, &atomic..dict.Pointer[net/http.response]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:878:6: can inline btree.(*node[github.com/google/btree.Item]).reset with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(*btree.copyOnWriteContext[github.com/google/btree.Item]) bool { return (*btree.node[interface { Less(github.com/google/btree.Item) bool }]).reset(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.c) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:569:6: can inline btree.(*node[github.com/google/btree.Item]).print with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(io.Writer, int) { (*btree.node[interface { Less(github.com/google/btree.Item) bool }]).print(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.w, btree.level) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:500:6: can inline btree.(*node[github.com/google/btree.Item]).iterate with cost 77 as: method(*btree.node[github.com/google/btree.Item]) func(btree.direction, btree.optionalItem[github.com/google/btree.Item], btree.optionalItem[github.com/google/btree.Item], bool, bool, btree.ItemIteratorG[github.com/google/btree.Item]) (bool, bool) { return .autotmp_9, .autotmp_10 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:437:6: can inline btree.(*node[github.com/google/btree.Item]).growChildAndRemove with cost 75 as: method(*btree.node[github.com/google/btree.Item]) func(int, btree.Item, int, btree.toRemove) (btree.Item, bool) { return .autotmp_7, .autotmp_8 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:369:6: can inline btree.(*node[github.com/google/btree.Item]).remove with cost 74 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item, int, btree.toRemove) (btree.Item, bool) { return .autotmp_6, .autotmp_7 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:321:6: can inline btree.(*node[github.com/google/btree.Item]).get with cost 72 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item) (btree.Item, bool) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:293:6: can inline btree.(*node[github.com/google/btree.Item]).insert with cost 73 as: method(*btree.node[github.com/google/btree.Item]) func(btree.Item, int) (btree.Item, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:279:6: can inline btree.(*node[github.com/google/btree.Item]).maybeSplitChild with cost 64 as: method(*btree.node[github.com/google/btree.Item]) func(int, int) bool { return (*btree.node[interface { Less(github.com/google/btree.Item) bool }]).maybeSplitChild(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.i, btree.maxItems) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:265:6: can inline btree.(*node[github.com/google/btree.Item]).split with cost 72 as: method(*btree.node[github.com/google/btree.Item]) func(int) (btree.Item, *btree.node[github.com/google/btree.Item]) { return .autotmp_4, .autotmp_5 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:256:6: cannot inline btree.(*node[github.com/google/btree.Item]).mutableChild: function too complex: cost 86 exceeds budget 80
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:235:6: can inline btree.(*node[github.com/google/btree.Item]).mutableFor with cost 63 as: method(*btree.node[github.com/google/btree.Item]) func(*btree.copyOnWriteContext[github.com/google/btree.Item]) *btree.node[github.com/google/btree.Item] { return (*btree.node[interface { Less(github.com/google/btree.Item) bool }]).mutableFor(btree.n, &btree..dict.node[github.com/google/btree.Item], btree.cow) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:665:6: can inline btree.(*copyOnWriteContext[github.com/google/btree.Item]).freeNode with cost 63 as: method(*btree.copyOnWriteContext[github.com/google/btree.Item]) func(*btree.node[github.com/google/btree.Item]) btree.freeType { return (*btree.copyOnWriteContext[interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item], btree.n) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:648:6: can inline btree.(*copyOnWriteContext[github.com/google/btree.Item]).newNode with cost 76 as: method(*btree.copyOnWriteContext[github.com/google/btree.Item]) func() *btree.node[github.com/google/btree.Item] { return (*btree.copyOnWriteContext[interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.c, &btree..dict.copyOnWriteContext[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:114:6: can inline btree.(*FreeListG[github.com/google/btree.Item]).freeNode with cost 63 as: method(*btree.FreeListG[github.com/google/btree.Item]) func(*btree.node[github.com/google/btree.Item]) bool { return (*btree.FreeListG[interface { Less(github.com/google/btree.Item) bool }]).freeNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item], btree.n) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:100:6: can inline btree.(*FreeListG[github.com/google/btree.Item]).newNode with cost 62 as: method(*btree.FreeListG[github.com/google/btree.Item]) func() *btree.node[github.com/google/btree.Item] { return (*btree.FreeListG[interface { Less(github.com/google/btree.Item) bool }]).newNode(btree.f, &btree..dict.FreeListG[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: can inline btree.items[*github.com/google/btree.node[github.com/google/btree.Item]].find with cost 73 as: method(btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(*btree.node[github.com/google/btree.Item], func(*btree.node[github.com/google/btree.Item], *btree.node[github.com/google/btree.Item]) bool) (int, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).truncate with cost 43 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int) { (*btree.items[*uint8]).truncate(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).pop with cost 38 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func() *btree.node[github.com/google/btree.Item] { return (*btree.items[*uint8]).pop(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).removeAt with cost 52 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int) *btree.node[github.com/google/btree.Item] { return (*btree.items[*uint8]).removeAt(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[*github.com/google/btree.node[github.com/google/btree.Item]]).insertAt with cost 40 as: method(*btree.items[*github.com/google/btree.node[github.com/google/btree.Item]]) func(int, *btree.node[github.com/google/btree.Item]) { (*btree.items[*uint8]).insertAt(btree.s, &btree..dict.items[*github.com/google/btree.node[github.com/google/btree.Item]], btree.index, btree.item) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:214:6: can inline btree.items[github.com/google/btree.Item].find with cost 73 as: method(btree.items[github.com/google/btree.Item]) func(btree.Item, func(btree.Item, btree.Item) bool) (int, bool) { return .autotmp_5, .autotmp_6 }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:202:6: can inline btree.(*items[github.com/google/btree.Item]).truncate with cost 43 as: method(*btree.items[github.com/google/btree.Item]) func(int) { (*btree.items[interface { Less(github.com/google/btree.Item) bool }]).truncate(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:191:6: can inline btree.(*items[github.com/google/btree.Item]).pop with cost 38 as: method(*btree.items[github.com/google/btree.Item]) func() btree.Item { return (*btree.items[interface { Less(github.com/google/btree.Item) bool }]).pop(btree.s, &btree..dict.items[github.com/google/btree.Item]) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:181:6: can inline btree.(*items[github.com/google/btree.Item]).removeAt with cost 52 as: method(*btree.items[github.com/google/btree.Item]) func(int) btree.Item { return (*btree.items[interface { Less(github.com/google/btree.Item) bool }]).removeAt(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index) }
../../go/pkg/mod/github.com/google/btree@v1.1.2/btree_generic.go:170:6: can inline btree.(*items[github.com/google/btree.Item]).insertAt with cost 40 as: method(*btree.items[github.com/google/btree.Item]) func(int, btree.Item) { (*btree.items[interface { Less(github.com/google/btree.Item) bool }]).insertAt(btree.s, &btree..dict.items[github.com/google/btree.Item], btree.index, btree.item) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:63:6: can inline atomic.(*Pointer[string]).CompareAndSwap with cost 70 as: method(*atomic.Pointer[string]) func(*string, *string) bool { return (*atomic.Pointer[string]).CompareAndSwap(atomic.x, &atomic..dict.Pointer[string], atomic.old, atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:60:6: can inline atomic.(*Pointer[string]).Swap with cost 68 as: method(*atomic.Pointer[string]) func(*string) *string { return (*atomic.Pointer[string]).Swap(atomic.x, &atomic..dict.Pointer[string], atomic.new) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:57:6: can inline atomic.(*Pointer[string]).Store with cost 66 as: method(*atomic.Pointer[string]) func(*string) { (*atomic.Pointer[string]).Store(atomic.x, &atomic..dict.Pointer[string], atomic.val) }
../../github/go-linux-amd64-bootstrap/src/sync/atomic/type.go:54:6: can inline atomic.(*Pointer[string]).Load with cost 9 as: method(*atomic.Pointer[string]) func() *string { return (*atomic.Pointer[string]).Load(atomic.x, &atomic..dict.Pointer[string]) }
